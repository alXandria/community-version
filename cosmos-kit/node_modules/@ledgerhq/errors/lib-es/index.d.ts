import { serializeError, deserializeError, createCustomErrorClass, addCustomErrorDeserializer } from "./helpers";
export { serializeError, deserializeError, createCustomErrorClass, addCustomErrorDeserializer, };
export declare const AccountNameRequiredError: import("./helpers").CustomErrorFunc;
export declare const AccountNotSupported: import("./helpers").CustomErrorFunc;
export declare const AmountRequired: import("./helpers").CustomErrorFunc;
export declare const BluetoothRequired: import("./helpers").CustomErrorFunc;
export declare const BtcUnmatchedApp: import("./helpers").CustomErrorFunc;
export declare const CantOpenDevice: import("./helpers").CustomErrorFunc;
export declare const CashAddrNotSupported: import("./helpers").CustomErrorFunc;
export declare const CurrencyNotSupported: import("./helpers").CustomErrorFunc;
export declare const DeviceAppVerifyNotSupported: import("./helpers").CustomErrorFunc;
export declare const DeviceGenuineSocketEarlyClose: import("./helpers").CustomErrorFunc;
export declare const DeviceNotGenuineError: import("./helpers").CustomErrorFunc;
export declare const DeviceOnDashboardExpected: import("./helpers").CustomErrorFunc;
export declare const DeviceOnDashboardUnexpected: import("./helpers").CustomErrorFunc;
export declare const DeviceInOSUExpected: import("./helpers").CustomErrorFunc;
export declare const DeviceHalted: import("./helpers").CustomErrorFunc;
export declare const DeviceNameInvalid: import("./helpers").CustomErrorFunc;
export declare const DeviceSocketFail: import("./helpers").CustomErrorFunc;
export declare const DeviceSocketNoBulkStatus: import("./helpers").CustomErrorFunc;
export declare const DisconnectedDevice: import("./helpers").CustomErrorFunc;
export declare const DisconnectedDeviceDuringOperation: import("./helpers").CustomErrorFunc;
export declare const DeviceExtractOnboardingStateError: import("./helpers").CustomErrorFunc;
export declare const DeviceOnboardingStatePollingError: import("./helpers").CustomErrorFunc;
export declare const EnpointConfigError: import("./helpers").CustomErrorFunc;
export declare const EthAppPleaseEnableContractData: import("./helpers").CustomErrorFunc;
export declare const FeeEstimationFailed: import("./helpers").CustomErrorFunc;
export declare const FirmwareNotRecognized: import("./helpers").CustomErrorFunc;
export declare const HardResetFail: import("./helpers").CustomErrorFunc;
export declare const InvalidXRPTag: import("./helpers").CustomErrorFunc;
export declare const InvalidAddress: import("./helpers").CustomErrorFunc;
export declare const InvalidAddressBecauseDestinationIsAlsoSource: import("./helpers").CustomErrorFunc;
export declare const LatestMCUInstalledError: import("./helpers").CustomErrorFunc;
export declare const UnknownMCU: import("./helpers").CustomErrorFunc;
export declare const LedgerAPIError: import("./helpers").CustomErrorFunc;
export declare const LedgerAPIErrorWithMessage: import("./helpers").CustomErrorFunc;
export declare const LedgerAPINotAvailable: import("./helpers").CustomErrorFunc;
export declare const ManagerAppAlreadyInstalledError: import("./helpers").CustomErrorFunc;
export declare const ManagerAppRelyOnBTCError: import("./helpers").CustomErrorFunc;
export declare const ManagerAppDepInstallRequired: import("./helpers").CustomErrorFunc;
export declare const ManagerAppDepUninstallRequired: import("./helpers").CustomErrorFunc;
export declare const ManagerDeviceLockedError: import("./helpers").CustomErrorFunc;
export declare const ManagerFirmwareNotEnoughSpaceError: import("./helpers").CustomErrorFunc;
export declare const ManagerNotEnoughSpaceError: import("./helpers").CustomErrorFunc;
export declare const ManagerUninstallBTCDep: import("./helpers").CustomErrorFunc;
export declare const NetworkDown: import("./helpers").CustomErrorFunc;
export declare const NoAddressesFound: import("./helpers").CustomErrorFunc;
export declare const NotEnoughBalance: import("./helpers").CustomErrorFunc;
export declare const NotEnoughBalanceToDelegate: import("./helpers").CustomErrorFunc;
export declare const NotEnoughBalanceInParentAccount: import("./helpers").CustomErrorFunc;
export declare const NotEnoughSpendableBalance: import("./helpers").CustomErrorFunc;
export declare const NotEnoughBalanceBecauseDestinationNotCreated: import("./helpers").CustomErrorFunc;
export declare const NoAccessToCamera: import("./helpers").CustomErrorFunc;
export declare const NotEnoughGas: import("./helpers").CustomErrorFunc;
export declare const NotSupportedLegacyAddress: import("./helpers").CustomErrorFunc;
export declare const GasLessThanEstimate: import("./helpers").CustomErrorFunc;
export declare const PasswordsDontMatchError: import("./helpers").CustomErrorFunc;
export declare const PasswordIncorrectError: import("./helpers").CustomErrorFunc;
export declare const RecommendSubAccountsToEmpty: import("./helpers").CustomErrorFunc;
export declare const RecommendUndelegation: import("./helpers").CustomErrorFunc;
export declare const TimeoutTagged: import("./helpers").CustomErrorFunc;
export declare const UnexpectedBootloader: import("./helpers").CustomErrorFunc;
export declare const MCUNotGenuineToDashboard: import("./helpers").CustomErrorFunc;
export declare const RecipientRequired: import("./helpers").CustomErrorFunc;
export declare const UnavailableTezosOriginatedAccountReceive: import("./helpers").CustomErrorFunc;
export declare const UnavailableTezosOriginatedAccountSend: import("./helpers").CustomErrorFunc;
export declare const UpdateFetchFileFail: import("./helpers").CustomErrorFunc;
export declare const UpdateIncorrectHash: import("./helpers").CustomErrorFunc;
export declare const UpdateIncorrectSig: import("./helpers").CustomErrorFunc;
export declare const UpdateYourApp: import("./helpers").CustomErrorFunc;
export declare const UserRefusedDeviceNameChange: import("./helpers").CustomErrorFunc;
export declare const UserRefusedAddress: import("./helpers").CustomErrorFunc;
export declare const UserRefusedFirmwareUpdate: import("./helpers").CustomErrorFunc;
export declare const UserRefusedAllowManager: import("./helpers").CustomErrorFunc;
export declare const UserRefusedOnDevice: import("./helpers").CustomErrorFunc;
export declare const TransportOpenUserCancelled: import("./helpers").CustomErrorFunc;
export declare const TransportInterfaceNotAvailable: import("./helpers").CustomErrorFunc;
export declare const TransportRaceCondition: import("./helpers").CustomErrorFunc;
export declare const TransportWebUSBGestureRequired: import("./helpers").CustomErrorFunc;
export declare const DeviceShouldStayInApp: import("./helpers").CustomErrorFunc;
export declare const WebsocketConnectionError: import("./helpers").CustomErrorFunc;
export declare const WebsocketConnectionFailed: import("./helpers").CustomErrorFunc;
export declare const WrongDeviceForAccount: import("./helpers").CustomErrorFunc;
export declare const WrongAppForCurrency: import("./helpers").CustomErrorFunc;
export declare const ETHAddressNonEIP: import("./helpers").CustomErrorFunc;
export declare const CantScanQRCode: import("./helpers").CustomErrorFunc;
export declare const FeeNotLoaded: import("./helpers").CustomErrorFunc;
export declare const FeeRequired: import("./helpers").CustomErrorFunc;
export declare const FeeTooHigh: import("./helpers").CustomErrorFunc;
export declare const SyncError: import("./helpers").CustomErrorFunc;
export declare const PairingFailed: import("./helpers").CustomErrorFunc;
export declare const GenuineCheckFailed: import("./helpers").CustomErrorFunc;
export declare const LedgerAPI4xx: import("./helpers").CustomErrorFunc;
export declare const LedgerAPI5xx: import("./helpers").CustomErrorFunc;
export declare const FirmwareOrAppUpdateRequired: import("./helpers").CustomErrorFunc;
export declare const NoDBPathGiven: import("./helpers").CustomErrorFunc;
export declare const DBWrongPassword: import("./helpers").CustomErrorFunc;
export declare const DBNotReset: import("./helpers").CustomErrorFunc;
/**
 * TransportError is used for any generic transport errors.
 * e.g. Error thrown when data received by exchanges are incorrect or if exchanged failed to communicate with the device for various reason.
 */
export declare function TransportError(message: string, id: string): void;
export declare namespace TransportError {
    var prototype: Error;
}
export declare const StatusCodes: {
    PIN_REMAINING_ATTEMPTS: number;
    INCORRECT_LENGTH: number;
    MISSING_CRITICAL_PARAMETER: number;
    COMMAND_INCOMPATIBLE_FILE_STRUCTURE: number;
    SECURITY_STATUS_NOT_SATISFIED: number;
    CONDITIONS_OF_USE_NOT_SATISFIED: number;
    INCORRECT_DATA: number;
    NOT_ENOUGH_MEMORY_SPACE: number;
    REFERENCED_DATA_NOT_FOUND: number;
    FILE_ALREADY_EXISTS: number;
    INCORRECT_P1_P2: number;
    INS_NOT_SUPPORTED: number;
    CLA_NOT_SUPPORTED: number;
    TECHNICAL_PROBLEM: number;
    OK: number;
    MEMORY_PROBLEM: number;
    NO_EF_SELECTED: number;
    INVALID_OFFSET: number;
    FILE_NOT_FOUND: number;
    INCONSISTENT_FILE: number;
    ALGORITHM_NOT_SUPPORTED: number;
    INVALID_KCV: number;
    CODE_NOT_INITIALIZED: number;
    ACCESS_CONDITION_NOT_FULFILLED: number;
    CONTRADICTION_SECRET_CODE_STATUS: number;
    CONTRADICTION_INVALIDATION: number;
    CODE_BLOCKED: number;
    MAX_VALUE_REACHED: number;
    GP_AUTH_FAILED: number;
    LICENSING: number;
    HALTED: number;
};
export declare function getAltStatusMessage(code: number): string | undefined | null;
/**
 * Error thrown when a device returned a non success status.
 * the error.statusCode is one of the `StatusCodes` exported by this library.
 */
export declare function TransportStatusError(statusCode: number): void;
export declare namespace TransportStatusError {
    var prototype: Error;
}
//# sourceMappingURL=index.d.ts.map