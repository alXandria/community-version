"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const debouncer_1 = require("./debouncer");
describe("Test common utils", () => {
    test("Test debouncer", () => __awaiter(void 0, void 0, void 0, function* () {
        let i = 0;
        const fn = () => {
            i++;
            return ((i) => new Promise((resolve) => {
                setTimeout(() => {
                    resolve(i);
                }, 500);
            }))(i);
        };
        // Non debounced fn should return the different results.
        let [r1, r2, r3] = yield Promise.all([fn(), fn(), fn()]);
        expect(r1).toBe(1);
        expect(r2).toBe(2);
        expect(r3).toBe(3);
        const debouncedFn = debouncer_1.Debouncer.promise(fn);
        // debounced fn should return the same results.
        [r1, r2, r3] = yield Promise.all([
            debouncedFn(),
            debouncedFn(),
            debouncedFn(),
        ]);
        expect(r1).toBe(4);
        expect(r2).toBe(4);
        expect(r3).toBe(4);
    }));
});
//# sourceMappingURL=debouncer.spec.js.map