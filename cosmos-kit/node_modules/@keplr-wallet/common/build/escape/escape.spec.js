"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = require("./index");
describe("Test escapeHTML", () => {
    test("escapeHTML should escape <, >, &", () => __awaiter(void 0, void 0, void 0, function* () {
        expect(index_1.escapeHTML("<, >, &, ' and \"")).toBe(`\\u003c, \\u003e, \\u0026, ' and "`);
        expect(index_1.escapeHTML("<, >, &, ' and \" and <, >, &, ' and \"")).toBe(`\\u003c, \\u003e, \\u0026, ' and " and \\u003c, \\u003e, \\u0026, ' and "`);
    }));
    test("unescapeHTML should escape <, >, &", () => __awaiter(void 0, void 0, void 0, function* () {
        expect(index_1.unescapeHTML(`\\u003c, \\u003e, \\u0026, ' and "`)).toBe("<, >, &, ' and \"");
        expect(index_1.unescapeHTML(`\\u003c, \\u003e, \\u0026, ' and " and \\u003c, \\u003e, \\u0026, ' and "`)).toBe("<, >, &, ' and \" and <, >, &, ' and \"");
    }));
});
//# sourceMappingURL=escape.spec.js.map