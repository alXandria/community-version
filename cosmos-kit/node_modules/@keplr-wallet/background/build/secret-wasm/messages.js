"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetTxEncryptionKeyMsg = exports.RequestDecryptMsg = exports.ReqeustEncryptMsg = exports.GetPubkeyMsg = void 0;
const router_1 = require("@keplr-wallet/router");
const constants_1 = require("./constants");
class GetPubkeyMsg extends router_1.Message {
    constructor(chainId) {
        super();
        this.chainId = chainId;
    }
    static type() {
        return "get-pubkey-msg";
    }
    validateBasic() {
        if (!this.chainId) {
            throw new router_1.KeplrError("secret-wasm", 100, "chain id not set");
        }
    }
    approveExternal() {
        return true;
    }
    route() {
        return constants_1.ROUTE;
    }
    type() {
        return GetPubkeyMsg.type();
    }
}
exports.GetPubkeyMsg = GetPubkeyMsg;
class ReqeustEncryptMsg extends router_1.Message {
    constructor(chainId, contractCodeHash, 
    // eslint-disable-next-line @typescript-eslint/ban-types
    msg) {
        super();
        this.chainId = chainId;
        this.contractCodeHash = contractCodeHash;
        this.msg = msg;
    }
    static type() {
        return "request-encrypt-msg";
    }
    validateBasic() {
        if (!this.chainId) {
            throw new router_1.KeplrError("secret-wasm", 100, "chain id not set");
        }
        if (!this.contractCodeHash) {
            throw new router_1.KeplrError("secret-wasm", 103, "contract code hash not set");
        }
        if (!this.msg) {
            throw new router_1.KeplrError("secret-wasm", 101, "msg not set");
        }
    }
    approveExternal() {
        return true;
    }
    route() {
        return constants_1.ROUTE;
    }
    type() {
        return ReqeustEncryptMsg.type();
    }
}
exports.ReqeustEncryptMsg = ReqeustEncryptMsg;
class RequestDecryptMsg extends router_1.Message {
    constructor(chainId, cipherText, nonce) {
        super();
        this.chainId = chainId;
        this.cipherText = cipherText;
        this.nonce = nonce;
    }
    static type() {
        return "request-decrypt-msg";
    }
    validateBasic() {
        if (!this.chainId) {
            throw new router_1.KeplrError("secret-wasm", 100, "chain id not set");
        }
        if (!this.cipherText || this.cipherText.length === 0) {
            throw new router_1.KeplrError("secret-wasm", 102, "ciphertext not set");
        }
        if (!this.nonce || this.nonce.length === 0) {
            throw new router_1.KeplrError("secret-wasm", 110, "nonce not set");
        }
    }
    approveExternal() {
        return true;
    }
    route() {
        return constants_1.ROUTE;
    }
    type() {
        return RequestDecryptMsg.type();
    }
}
exports.RequestDecryptMsg = RequestDecryptMsg;
class GetTxEncryptionKeyMsg extends router_1.Message {
    constructor(chainId, nonce) {
        super();
        this.chainId = chainId;
        this.nonce = nonce;
    }
    static type() {
        return "get-tx-encryption-key-msg";
    }
    validateBasic() {
        if (!this.chainId) {
            throw new router_1.KeplrError("secret-wasm", 100, "chain id not set");
        }
        if (!this.nonce) {
            // Nonce of zero length is permitted.
            throw new router_1.KeplrError("secret-wasm", 111, "nonce is null");
        }
    }
    approveExternal() {
        return true;
    }
    route() {
        return constants_1.ROUTE;
    }
    type() {
        return GetTxEncryptionKeyMsg.type();
    }
}
exports.GetTxEncryptionKeyMsg = GetTxEncryptionKeyMsg;
//# sourceMappingURL=messages.js.map