import { EnigmaUtils } from "secretjs";
import { KeyRingService } from "../keyring";
import { ChainsService } from "../chains";
import { PermissionService } from "../permission";
import { KVStore } from "@keplr-wallet/common";
import { ChainInfo } from "@keplr-wallet/types";
import { Env } from "@keplr-wallet/router";
export declare class SecretWasmService {
    protected readonly kvStore: KVStore;
    protected debouncerMap: Map<string, (env: Env, chainInfo: ChainInfo, bech32Address: string) => Promise<Uint8Array>>;
    protected cacheEnigmaUtils: Map<string, EnigmaUtils>;
    protected chainsService: ChainsService;
    protected keyRingService: KeyRingService;
    permissionService: PermissionService;
    constructor(kvStore: KVStore);
    init(chainsService: ChainsService, keyRingService: KeyRingService, permissionService: PermissionService): void;
    protected readonly onChainRemoved: () => void;
    getPubkey(env: Env, chainId: string): Promise<Uint8Array>;
    getTxEncryptionKey(env: Env, chainId: string, nonce: Uint8Array): Promise<Uint8Array>;
    encrypt(env: Env, chainId: string, contractCodeHash: string, msg: object): Promise<Uint8Array>;
    decrypt(env: Env, chainId: string, ciphertext: Uint8Array, nonce: Uint8Array): Promise<Uint8Array>;
    private getEnigmaUtils;
    protected getSeed(env: Env, chainInfo: ChainInfo): Promise<Uint8Array>;
    protected getSeedInner(env: Env, chainInfo: ChainInfo, bech32Address: string): Promise<Uint8Array>;
}
