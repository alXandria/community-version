"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResetChainEndpointsMsg = exports.SetChainEndpointsMsg = exports.TryUpdateChainMsg = void 0;
const router_1 = require("@keplr-wallet/router");
const constants_1 = require("./constants");
class TryUpdateChainMsg extends router_1.Message {
    constructor(chainId) {
        super();
        this.chainId = chainId;
    }
    static type() {
        return "try-update-chain";
    }
    validateBasic() {
        if (!this.chainId) {
            throw new router_1.KeplrError("updater", 100, "Empty chain id");
        }
    }
    route() {
        return constants_1.ROUTE;
    }
    type() {
        return TryUpdateChainMsg.type();
    }
}
exports.TryUpdateChainMsg = TryUpdateChainMsg;
class SetChainEndpointsMsg extends router_1.Message {
    constructor(chainId, rpc, rest) {
        super();
        this.chainId = chainId;
        this.rpc = rpc;
        this.rest = rest;
    }
    static type() {
        return "set-chain-endpoints";
    }
    validateBasic() {
        if (!this.chainId) {
            throw new router_1.KeplrError("updater", 100, "Empty chain id");
        }
        if (this.rpc) {
            // Make sure that rpc is valid url form
            const url = new URL(this.rpc);
            if (url.protocol !== "http:" && url.protocol !== "https:") {
                throw new Error(`RPC has invalid protocol: ${url.protocol}`);
            }
        }
        if (this.rest) {
            // Make sure that rest is valid url form
            const url = new URL(this.rest);
            if (url.protocol !== "http:" && url.protocol !== "https:") {
                throw new Error(`LCD has invalid protocol: ${url.protocol}`);
            }
        }
    }
    route() {
        return constants_1.ROUTE;
    }
    type() {
        return SetChainEndpointsMsg.type();
    }
}
exports.SetChainEndpointsMsg = SetChainEndpointsMsg;
class ResetChainEndpointsMsg extends router_1.Message {
    constructor(chainId) {
        super();
        this.chainId = chainId;
    }
    static type() {
        return "reset-chain-endpoints";
    }
    validateBasic() {
        if (!this.chainId) {
            throw new router_1.KeplrError("updater", 100, "Empty chain id");
        }
    }
    route() {
        return constants_1.ROUTE;
    }
    type() {
        return ResetChainEndpointsMsg.type();
    }
}
exports.ResetChainEndpointsMsg = ResetChainEndpointsMsg;
//# sourceMappingURL=messages.js.map