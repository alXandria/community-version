import { ChainInfo } from "@keplr-wallet/types";
import { KVStore } from "@keplr-wallet/common";
import { ChainInfoWithEmbed, ChainsService } from "../chains";
export declare class ChainUpdaterService {
    protected readonly kvStore: KVStore;
    protected chainsService: ChainsService;
    constructor(kvStore: KVStore);
    init(chainsService: ChainsService): void;
    putUpdatedPropertyToChainInfo(chainInfo: ChainInfo): Promise<ChainInfo>;
    clearUpdatedProperty(chainId: string): Promise<void>;
    tryUpdateChain(chainId: string): Promise<void>;
    private getUpdatedChainProperty;
    private saveChainProperty;
    private loadChainProperty;
    /**
     * Returns wether the chain has been changed.
     * Currently, only check the chain id has been changed.
     * @param chainInfo Chain information.
     */
    static checkChainUpdate(chainInfo: Readonly<ChainInfo>): Promise<{
        explicit: boolean;
        slient: boolean;
        chainId?: string;
        features?: string[];
    }>;
    setChainEndpoints(chainId: string, rpc: string | undefined, rest: string | undefined): Promise<ChainInfoWithEmbed[]>;
    resetChainEndpoints(chainId: string): Promise<ChainInfoWithEmbed[]>;
    static checkEndpointsConnectivity(chainId: string, rpc: string, rest: string, wsObject?: new (url: string, protocols?: string | string[]) => WebSocket): Promise<void>;
}
