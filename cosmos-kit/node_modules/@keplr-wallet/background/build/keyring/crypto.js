"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Crypto = void 0;
const aes_js_1 = __importStar(require("aes-js"));
const crypto_1 = require("@keplr-wallet/crypto");
const pbkdf2_1 = __importDefault(require("pbkdf2"));
const buffer_1 = require("buffer/");
const router_1 = require("@keplr-wallet/router");
class Crypto {
    static encrypt(crypto, kdf, type, text, password, meta, bip44HDPath) {
        return __awaiter(this, void 0, void 0, function* () {
            let random = new Uint8Array(32);
            const salt = buffer_1.Buffer.from(yield crypto.rng(random)).toString("hex");
            const scryptParams = {
                salt,
                dklen: 32,
                n: 131072,
                r: 8,
                p: 1,
            };
            const derivedKey = yield (() => __awaiter(this, void 0, void 0, function* () {
                switch (kdf) {
                    case "scrypt":
                        return yield crypto.scrypt(password, scryptParams);
                    case "sha256":
                        return crypto_1.Hash.sha256(buffer_1.Buffer.from(`${salt}/${password}`));
                    case "pbkdf2":
                        return new Promise((resolve, reject) => {
                            pbkdf2_1.default.pbkdf2(password, salt, 4000, 32, "sha256", (err, derivedKey) => {
                                if (err) {
                                    reject(err);
                                }
                                else {
                                    resolve(new Uint8Array(derivedKey));
                                }
                            });
                        });
                    default:
                        throw new router_1.KeplrError("keyring", 220, "Unknown kdf");
                }
            }))();
            const buf = buffer_1.Buffer.from(text);
            random = new Uint8Array(16);
            const iv = buffer_1.Buffer.from(yield crypto.rng(random));
            const counter = new aes_js_1.Counter(0);
            counter.setBytes(iv);
            const aesCtr = new aes_js_1.default.ModeOfOperation.ctr(derivedKey, counter);
            const ciphertext = buffer_1.Buffer.from(aesCtr.encrypt(buf));
            // Mac is sha256(last 16 bytes of derived key + ciphertext)
            const mac = crypto_1.Hash.sha256(buffer_1.Buffer.concat([
                buffer_1.Buffer.from(derivedKey.slice(derivedKey.length / 2)),
                ciphertext,
            ]));
            return {
                version: "1.2",
                type,
                coinTypeForChain: {},
                bip44HDPath,
                meta,
                crypto: {
                    cipher: "aes-128-ctr",
                    cipherparams: {
                        iv: iv.toString("hex"),
                    },
                    ciphertext: ciphertext.toString("hex"),
                    kdf,
                    kdfparams: scryptParams,
                    mac: buffer_1.Buffer.from(mac).toString("hex"),
                },
            };
        });
    }
    static decrypt(crypto, keyStore, password) {
        return __awaiter(this, void 0, void 0, function* () {
            const derivedKey = yield (() => __awaiter(this, void 0, void 0, function* () {
                switch (keyStore.crypto.kdf) {
                    case "scrypt":
                        return yield crypto.scrypt(password, keyStore.crypto.kdfparams);
                    case "sha256":
                        return crypto_1.Hash.sha256(buffer_1.Buffer.from(`${keyStore.crypto.kdfparams.salt}/${password}`));
                    case "pbkdf2":
                        return new Promise((resolve, reject) => {
                            pbkdf2_1.default.pbkdf2(password, keyStore.crypto.kdfparams.salt, 4000, 32, "sha256", (err, derivedKey) => {
                                if (err) {
                                    reject(err);
                                }
                                else {
                                    resolve(new Uint8Array(derivedKey));
                                }
                            });
                        });
                    default:
                        throw new router_1.KeplrError("keyring", 220, "Unknown kdf");
                }
            }))();
            const counter = new aes_js_1.Counter(0);
            counter.setBytes(buffer_1.Buffer.from(keyStore.crypto.cipherparams.iv, "hex"));
            const aesCtr = new aes_js_1.default.ModeOfOperation.ctr(derivedKey, counter);
            const mac = crypto_1.Hash.sha256(buffer_1.Buffer.concat([
                buffer_1.Buffer.from(derivedKey.slice(derivedKey.length / 2)),
                buffer_1.Buffer.from(keyStore.crypto.ciphertext, "hex"),
            ]));
            if (!buffer_1.Buffer.from(mac).equals(buffer_1.Buffer.from(keyStore.crypto.mac, "hex"))) {
                throw new router_1.KeplrError("keyring", 222, "Unmatched mac");
            }
            return buffer_1.Buffer.from(aesCtr.decrypt(buffer_1.Buffer.from(keyStore.crypto.ciphertext, "hex")));
        });
    }
}
exports.Crypto = Crypto;
//# sourceMappingURL=crypto.js.map