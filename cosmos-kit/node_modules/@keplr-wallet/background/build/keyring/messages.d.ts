import { Message } from "@keplr-wallet/router";
import { KeyRingStatus, MultiKeyStoreInfoWithSelected } from "./keyring";
import { BIP44HDPath, ExportKeyRingData } from "./types";
import { BIP44, EthSignType, KeplrSignOptions, Key } from "@keplr-wallet/types";
import { StdSignDoc, AminoSignResponse, StdSignature } from "@cosmjs/launchpad";
export declare class RestoreKeyRingMsg extends Message<{
    status: KeyRingStatus;
    multiKeyStoreInfo: MultiKeyStoreInfoWithSelected;
}> {
    static type(): string;
    constructor();
    validateBasic(): void;
    route(): string;
    type(): string;
}
export declare class DeleteKeyRingMsg extends Message<{
    status: KeyRingStatus;
    multiKeyStoreInfo: MultiKeyStoreInfoWithSelected;
}> {
    readonly index: number;
    readonly password: string;
    static type(): string;
    constructor(index: number, password: string);
    validateBasic(): void;
    route(): string;
    type(): string;
}
export declare class UpdateNameKeyRingMsg extends Message<{
    multiKeyStoreInfo: MultiKeyStoreInfoWithSelected;
}> {
    readonly index: number;
    readonly name: string;
    static type(): string;
    constructor(index: number, name: string);
    validateBasic(): void;
    route(): string;
    type(): string;
}
export declare class ShowKeyRingMsg extends Message<string> {
    readonly index: number;
    readonly password: string;
    static type(): string;
    constructor(index: number, password: string);
    validateBasic(): void;
    route(): string;
    type(): string;
}
export declare class CreateMnemonicKeyMsg extends Message<{
    status: KeyRingStatus;
    multiKeyStoreInfo: MultiKeyStoreInfoWithSelected;
}> {
    readonly kdf: "scrypt" | "sha256" | "pbkdf2";
    readonly mnemonic: string;
    readonly password: string;
    readonly meta: Record<string, string>;
    readonly bip44HDPath: BIP44HDPath;
    static type(): string;
    constructor(kdf: "scrypt" | "sha256" | "pbkdf2", mnemonic: string, password: string, meta: Record<string, string>, bip44HDPath: BIP44HDPath);
    validateBasic(): void;
    route(): string;
    type(): string;
}
export declare class AddMnemonicKeyMsg extends Message<{
    multiKeyStoreInfo: MultiKeyStoreInfoWithSelected;
}> {
    readonly kdf: "scrypt" | "sha256" | "pbkdf2";
    readonly mnemonic: string;
    readonly meta: Record<string, string>;
    readonly bip44HDPath: BIP44HDPath;
    static type(): string;
    constructor(kdf: "scrypt" | "sha256" | "pbkdf2", mnemonic: string, meta: Record<string, string>, bip44HDPath: BIP44HDPath);
    validateBasic(): void;
    route(): string;
    type(): string;
}
export declare class CreatePrivateKeyMsg extends Message<{
    status: KeyRingStatus;
    multiKeyStoreInfo: MultiKeyStoreInfoWithSelected;
}> {
    readonly kdf: "scrypt" | "sha256" | "pbkdf2";
    readonly privateKey: Uint8Array;
    readonly password: string;
    readonly meta: Record<string, string>;
    static type(): string;
    constructor(kdf: "scrypt" | "sha256" | "pbkdf2", privateKey: Uint8Array, password: string, meta: Record<string, string>);
    validateBasic(): void;
    route(): string;
    type(): string;
}
export declare class CreateLedgerKeyMsg extends Message<{
    status: KeyRingStatus;
    multiKeyStoreInfo: MultiKeyStoreInfoWithSelected;
}> {
    readonly kdf: "scrypt" | "sha256" | "pbkdf2";
    readonly password: string;
    readonly meta: Record<string, string>;
    readonly bip44HDPath: BIP44HDPath;
    static type(): string;
    constructor(kdf: "scrypt" | "sha256" | "pbkdf2", password: string, meta: Record<string, string>, bip44HDPath: BIP44HDPath);
    validateBasic(): void;
    route(): string;
    type(): string;
}
export declare class AddPrivateKeyMsg extends Message<{
    multiKeyStoreInfo: MultiKeyStoreInfoWithSelected;
}> {
    readonly kdf: "scrypt" | "sha256" | "pbkdf2";
    readonly privateKey: Uint8Array;
    readonly meta: Record<string, string>;
    static type(): string;
    constructor(kdf: "scrypt" | "sha256" | "pbkdf2", privateKey: Uint8Array, meta: Record<string, string>);
    validateBasic(): void;
    route(): string;
    type(): string;
}
export declare class AddLedgerKeyMsg extends Message<{
    multiKeyStoreInfo: MultiKeyStoreInfoWithSelected;
}> {
    readonly kdf: "scrypt" | "sha256" | "pbkdf2";
    readonly meta: Record<string, string>;
    readonly bip44HDPath: BIP44HDPath;
    static type(): string;
    constructor(kdf: "scrypt" | "sha256" | "pbkdf2", meta: Record<string, string>, bip44HDPath: BIP44HDPath);
    validateBasic(): void;
    route(): string;
    type(): string;
}
export declare class LockKeyRingMsg extends Message<{
    status: KeyRingStatus;
}> {
    static type(): string;
    constructor();
    validateBasic(): void;
    route(): string;
    type(): string;
}
export declare class UnlockKeyRingMsg extends Message<{
    status: KeyRingStatus;
}> {
    readonly password: string;
    static type(): string;
    constructor(password?: string);
    validateBasic(): void;
    route(): string;
    type(): string;
}
export declare class GetKeyMsg extends Message<Key> {
    readonly chainId: string;
    static type(): string;
    constructor(chainId: string);
    validateBasic(): void;
    approveExternal(): boolean;
    route(): string;
    type(): string;
}
export declare class RequestSignAminoMsg extends Message<AminoSignResponse> {
    readonly chainId: string;
    readonly signer: string;
    readonly signDoc: StdSignDoc;
    readonly signOptions: KeplrSignOptions & {
        isADR36WithString?: boolean;
        ethSignType?: EthSignType;
    };
    static type(): string;
    constructor(chainId: string, signer: string, signDoc: StdSignDoc, signOptions?: KeplrSignOptions & {
        isADR36WithString?: boolean;
        ethSignType?: EthSignType;
    });
    validateBasic(): void;
    approveExternal(): boolean;
    route(): string;
    type(): string;
}
export declare class RequestVerifyADR36AminoSignDoc extends Message<boolean> {
    readonly chainId: string;
    readonly signer: string;
    readonly data: Uint8Array;
    readonly signature: StdSignature;
    static type(): string;
    constructor(chainId: string, signer: string, data: Uint8Array, signature: StdSignature);
    validateBasic(): void;
    approveExternal(): boolean;
    route(): string;
    type(): string;
}
export declare class RequestSignDirectMsg extends Message<{
    readonly signed: {
        bodyBytes: Uint8Array;
        authInfoBytes: Uint8Array;
        chainId: string;
        accountNumber: string;
    };
    readonly signature: StdSignature;
}> {
    readonly chainId: string;
    readonly signer: string;
    readonly signDoc: {
        bodyBytes?: Uint8Array;
        authInfoBytes?: Uint8Array;
        chainId?: string;
        accountNumber?: string;
    };
    readonly signOptions: KeplrSignOptions;
    static type(): string;
    constructor(chainId: string, signer: string, signDoc: {
        bodyBytes?: Uint8Array;
        authInfoBytes?: Uint8Array;
        chainId?: string;
        accountNumber?: string;
    }, signOptions?: KeplrSignOptions);
    validateBasic(): void;
    approveExternal(): boolean;
    route(): string;
    type(): string;
}
export declare class GetMultiKeyStoreInfoMsg extends Message<{
    multiKeyStoreInfo: MultiKeyStoreInfoWithSelected;
}> {
    static type(): string;
    constructor();
    validateBasic(): void;
    route(): string;
    type(): string;
}
export declare class ChangeKeyRingMsg extends Message<{
    multiKeyStoreInfo: MultiKeyStoreInfoWithSelected;
}> {
    readonly index: number;
    static type(): string;
    constructor(index: number);
    validateBasic(): void;
    route(): string;
    type(): string;
}
export declare class GetIsKeyStoreCoinTypeSetMsg extends Message<{
    readonly path: BIP44;
    readonly bech32Address: string;
}[]> {
    readonly chainId: string;
    readonly paths: BIP44[];
    static type(): string;
    constructor(chainId: string, paths: BIP44[]);
    validateBasic(): void;
    route(): string;
    type(): string;
}
export declare class SetKeyStoreCoinTypeMsg extends Message<KeyRingStatus> {
    readonly chainId: string;
    readonly coinType: number;
    static type(): string;
    constructor(chainId: string, coinType: number);
    validateBasic(): void;
    route(): string;
    type(): string;
}
export declare class CheckPasswordMsg extends Message<boolean> {
    readonly password: string;
    static type(): string;
    constructor(password: string);
    validateBasic(): void;
    route(): string;
    type(): string;
}
export declare class ExportKeyRingDatasMsg extends Message<ExportKeyRingData[]> {
    readonly password: string;
    static type(): string;
    constructor(password: string);
    validateBasic(): void;
    route(): string;
    type(): string;
}
