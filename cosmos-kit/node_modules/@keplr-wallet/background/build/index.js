"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.init = void 0;
const PersistentMemory = __importStar(require("./persistent-memory/internal"));
const Chains = __importStar(require("./chains/internal"));
const Ledger = __importStar(require("./ledger/internal"));
const KeyRing = __importStar(require("./keyring/internal"));
const SecretWasm = __importStar(require("./secret-wasm/internal"));
const BackgroundTx = __importStar(require("./tx/internal"));
const Updater = __importStar(require("./updater/internal"));
const Tokens = __importStar(require("./tokens/internal"));
const Interaction = __importStar(require("./interaction/internal"));
const Permission = __importStar(require("./permission/internal"));
__exportStar(require("./persistent-memory"), exports);
__exportStar(require("./chains"), exports);
__exportStar(require("./ledger"), exports);
__exportStar(require("./keyring"), exports);
__exportStar(require("./secret-wasm"), exports);
__exportStar(require("./tx"), exports);
__exportStar(require("./updater"), exports);
__exportStar(require("./tokens"), exports);
__exportStar(require("./interaction"), exports);
__exportStar(require("./permission"), exports);
function init(router, storeCreator, 
// Message requester to the content script.
eventMsgRequester, embedChainInfos, 
// The origins that are able to pass any permission.
privilegedOrigins, commonCrypto, notification, ledgerOptions = {}, experimentalOptions = {}) {
    var _a;
    const interactionService = new Interaction.InteractionService(eventMsgRequester, commonCrypto.rng);
    const persistentMemoryService = new PersistentMemory.PersistentMemoryService();
    const permissionService = new Permission.PermissionService(storeCreator("permission"), privilegedOrigins);
    const chainUpdaterService = new Updater.ChainUpdaterService(storeCreator("updator"));
    const tokensService = new Tokens.TokensService(storeCreator("tokens"));
    const chainsService = new Chains.ChainsService(storeCreator("chains"), embedChainInfos, {
        useMemoryKVStoreForSuggestChain: (_a = experimentalOptions.suggestChain) === null || _a === void 0 ? void 0 : _a.useMemoryKVStore,
    });
    const ledgerService = new Ledger.LedgerService(storeCreator("ledger"), ledgerOptions);
    const keyRingService = new KeyRing.KeyRingService(storeCreator("keyring"), embedChainInfos, commonCrypto);
    const secretWasmService = new SecretWasm.SecretWasmService(storeCreator("secretwasm"));
    const backgroundTxService = new BackgroundTx.BackgroundTxService(notification);
    interactionService.init();
    persistentMemoryService.init();
    permissionService.init(interactionService, chainsService, keyRingService);
    chainUpdaterService.init(chainsService);
    tokensService.init(interactionService, permissionService, chainsService, keyRingService);
    chainsService.init(chainUpdaterService, interactionService);
    ledgerService.init(interactionService);
    keyRingService.init(interactionService, chainsService, permissionService, ledgerService);
    secretWasmService.init(chainsService, keyRingService, permissionService);
    backgroundTxService.init(chainsService, permissionService);
    Interaction.init(router, interactionService);
    PersistentMemory.init(router, persistentMemoryService);
    Permission.init(router, permissionService);
    Updater.init(router, chainUpdaterService);
    Tokens.init(router, tokensService);
    Chains.init(router, chainsService);
    Ledger.init(router, ledgerService);
    KeyRing.init(router, keyRingService);
    SecretWasm.init(router, secretWasmService);
    BackgroundTx.init(router, backgroundTxService);
}
exports.init = init;
//# sourceMappingURL=index.js.map