import { Env } from "@keplr-wallet/router";
import { ChainInfo, AppCurrency, CW20Currency, Secret20Currency } from "@keplr-wallet/types";
import { ChainsService } from "../chains";
import { KeyRingService } from "../keyring";
import { KVStore } from "@keplr-wallet/common";
import { InteractionService } from "../interaction";
import { PermissionService } from "../permission";
export declare class TokensService {
    protected readonly kvStore: KVStore;
    protected interactionService: InteractionService;
    permissionService: PermissionService;
    protected chainsService: ChainsService;
    protected keyRingService: KeyRingService;
    constructor(kvStore: KVStore);
    init(interactionService: InteractionService, permissionService: PermissionService, chainsService: ChainsService, keyRingService: KeyRingService): void;
    protected readonly onChainRemoved: (chainId: string) => void;
    suggestToken(env: Env, chainId: string, contractAddress: string, viewingKey?: string): Promise<void>;
    addToken(chainId: string, currency: AppCurrency): Promise<void>;
    removeToken(chainId: string, currency: AppCurrency): Promise<void>;
    getTokens(chainId: string): Promise<AppCurrency[]>;
    clearTokens(chainId: string): Promise<void>;
    private getTokensFromChain;
    private saveTokensToChain;
    private getTokensFromChainAndAccount;
    private saveTokensToChainAndAccount;
    private getTokensToAccountReverse;
    private setTokensToAccountReverse;
    private insertTokensToAccountReverse;
    getSecret20ViewingKey(chainId: string, contractAddress: string): Promise<string>;
    checkOrGrantSecret20ViewingKeyPermission(env: Env, chainId: string, contractAddress: string, origin: string): Promise<void>;
    static validateCurrency(chainInfo: ChainInfo, currency: AppCurrency): Promise<AppCurrency>;
    static validateCW20Currency(chainInfo: ChainInfo, currency: CW20Currency): Promise<CW20Currency>;
    static validateSecret20Currency(chainInfo: ChainInfo, currency: Secret20Currency): Promise<Secret20Currency>;
}
