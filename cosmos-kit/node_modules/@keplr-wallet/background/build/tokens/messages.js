"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetSecret20ViewingKey = exports.RemoveTokenMsg = exports.AddTokenMsg = exports.SuggestTokenMsg = exports.GetTokensMsg = void 0;
const router_1 = require("@keplr-wallet/router");
const constants_1 = require("./constants");
class GetTokensMsg extends router_1.Message {
    constructor(chainId) {
        super();
        this.chainId = chainId;
    }
    static type() {
        return "get-tokens";
    }
    validateBasic() {
        if (!this.chainId) {
            throw new router_1.KeplrError("tokens", 100, "Chain id is empty");
        }
    }
    route() {
        return constants_1.ROUTE;
    }
    type() {
        return GetTokensMsg.type();
    }
}
exports.GetTokensMsg = GetTokensMsg;
class SuggestTokenMsg extends router_1.Message {
    constructor(chainId, contractAddress, viewingKey) {
        super();
        this.chainId = chainId;
        this.contractAddress = contractAddress;
        this.viewingKey = viewingKey;
    }
    static type() {
        return "suggest-token";
    }
    approveExternal() {
        return true;
    }
    validateBasic() {
        if (!this.chainId) {
            throw new router_1.KeplrError("tokens", 100, "Chain id is empty");
        }
        if (!this.contractAddress) {
            throw new router_1.KeplrError("tokens", 101, "Contract address is empty");
        }
    }
    route() {
        return constants_1.ROUTE;
    }
    type() {
        return SuggestTokenMsg.type();
    }
}
exports.SuggestTokenMsg = SuggestTokenMsg;
class AddTokenMsg extends router_1.Message {
    constructor(chainId, currency) {
        super();
        this.chainId = chainId;
        this.currency = currency;
    }
    static type() {
        return "add-token";
    }
    validateBasic() {
        if (!this.chainId) {
            throw new router_1.KeplrError("tokens", 100, "Chain id is empty");
        }
    }
    route() {
        return constants_1.ROUTE;
    }
    type() {
        return AddTokenMsg.type();
    }
}
exports.AddTokenMsg = AddTokenMsg;
class RemoveTokenMsg extends router_1.Message {
    constructor(chainId, currency) {
        super();
        this.chainId = chainId;
        this.currency = currency;
    }
    static type() {
        return "remove-token";
    }
    validateBasic() {
        if (!this.chainId) {
            throw new router_1.KeplrError("tokens", 100, "Chain id is empty");
        }
    }
    route() {
        return constants_1.ROUTE;
    }
    type() {
        return RemoveTokenMsg.type();
    }
}
exports.RemoveTokenMsg = RemoveTokenMsg;
class GetSecret20ViewingKey extends router_1.Message {
    constructor(chainId, contractAddress) {
        super();
        this.chainId = chainId;
        this.contractAddress = contractAddress;
    }
    static type() {
        return "get-secret20-viewing-key";
    }
    validateBasic() {
        if (!this.chainId) {
            throw new router_1.KeplrError("tokens", 100, "Chain id is empty");
        }
        if (!this.contractAddress) {
            throw new router_1.KeplrError("tokens", 101, "Contract address is empty");
        }
    }
    approveExternal() {
        return true;
    }
    route() {
        return constants_1.ROUTE;
    }
    type() {
        return GetSecret20ViewingKey.type();
    }
}
exports.GetSecret20ViewingKey = GetSecret20ViewingKey;
//# sourceMappingURL=messages.js.map