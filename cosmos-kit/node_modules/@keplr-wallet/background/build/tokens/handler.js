"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getHandler = void 0;
const router_1 = require("@keplr-wallet/router");
const messages_1 = require("./messages");
const getHandler = (service) => {
    return (env, msg) => {
        switch (msg.constructor) {
            case messages_1.GetTokensMsg:
                return handleGetTokensMsg(service)(env, msg);
            case messages_1.SuggestTokenMsg:
                return handleSuggestTokenMsg(service)(env, msg);
            case messages_1.AddTokenMsg:
                return handleAddTokenMsg(service)(env, msg);
            case messages_1.RemoveTokenMsg:
                return handleRemoveTokenMsg(service)(env, msg);
            case messages_1.GetSecret20ViewingKey:
                return handleGetSecret20ViewingKey(service)(env, msg);
            default:
                throw new router_1.KeplrError("tokens", 120, "Unknown msg type");
        }
    };
};
exports.getHandler = getHandler;
const handleGetTokensMsg = (service) => {
    return (_, msg) => __awaiter(void 0, void 0, void 0, function* () {
        return yield service.getTokens(msg.chainId);
    });
};
const handleSuggestTokenMsg = (service) => {
    return (env, msg) => __awaiter(void 0, void 0, void 0, function* () {
        yield service.permissionService.checkOrGrantBasicAccessPermission(env, msg.chainId, msg.origin);
        yield service.suggestToken(env, msg.chainId, msg.contractAddress, msg.viewingKey);
    });
};
const handleAddTokenMsg = (service) => {
    return (_, msg) => __awaiter(void 0, void 0, void 0, function* () {
        yield service.addToken(msg.chainId, msg.currency);
    });
};
const handleRemoveTokenMsg = (service) => {
    return (_, msg) => __awaiter(void 0, void 0, void 0, function* () {
        yield service.removeToken(msg.chainId, msg.currency);
    });
};
const handleGetSecret20ViewingKey = (service) => {
    return (env, msg) => __awaiter(void 0, void 0, void 0, function* () {
        yield service.permissionService.checkOrGrantBasicAccessPermission(env, msg.chainId, msg.origin);
        /*
        await service.checkOrGrantSecret20ViewingKeyPermission(
          env,
          msg.chainId,
          msg.contractAddress,
          msg.origin
        );
         */
        return yield service.getSecret20ViewingKey(msg.chainId, msg.contractAddress);
    });
};
//# sourceMappingURL=handler.js.map