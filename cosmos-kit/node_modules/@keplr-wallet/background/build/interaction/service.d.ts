import { InteractionWaitingData } from "./types";
import { Env, FnRequestInteractionOptions, MessageRequester } from "@keplr-wallet/router";
import { RNG } from "@keplr-wallet/crypto";
export declare class InteractionService {
    protected readonly eventMsgRequester: MessageRequester;
    protected readonly rng: RNG;
    protected waitingMap: Map<string, InteractionWaitingData>;
    protected resolverMap: Map<string, {
        onApprove: (result: unknown) => void;
        onReject: (e: Error) => void;
    }>;
    constructor(eventMsgRequester: MessageRequester, rng: RNG);
    init(): void;
    dispatchEvent(port: string, type: string, data: unknown): void;
    waitApprove(env: Env, url: string, type: string, data: unknown, options?: FnRequestInteractionOptions): Promise<unknown>;
    protected wait(id: string, fn: () => void): Promise<unknown>;
    approve(id: string, result: unknown): void;
    reject(id: string): void;
    protected addDataToMap(type: string, isInternal: boolean, data: unknown): Promise<InteractionWaitingData>;
    protected removeDataFromMap(id: string): void;
}
