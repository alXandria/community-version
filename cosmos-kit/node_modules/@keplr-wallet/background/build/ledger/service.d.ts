import { Ledger } from "./ledger";
import { Env } from "@keplr-wallet/router";
import { BIP44HDPath } from "../keyring";
import { KVStore } from "@keplr-wallet/common";
import { InteractionService } from "../interaction";
import { LedgerOptions } from "./options";
export declare class LedgerService {
    protected readonly kvStore: KVStore;
    private previousInitAborter;
    protected options: LedgerOptions;
    protected interactionService: InteractionService;
    constructor(kvStore: KVStore, options: Partial<LedgerOptions>);
    init(interactionService: InteractionService): void;
    getPublicKey(env: Env, bip44HDPath: BIP44HDPath): Promise<Uint8Array>;
    sign(env: Env, bip44HDPath: BIP44HDPath, expectedPubKey: Uint8Array, message: Uint8Array): Promise<Uint8Array>;
    useLedger<T>(env: Env, fn: (ledger: Ledger, retryCount: number) => Promise<T>): Promise<T>;
    initLedger(env: Env): Promise<{
        ledger: Ledger;
        retryCount: number;
    }>;
    testLedgerGrantUIOpened(): Promise<void>;
    /**
     * Mode means that which transport should be used.
     * "webusb" and "webhid" are used in the extension environment (web).
     * Alternatively, custom mode can be supported by delivering the custom transport initer on the constructor.
     * Maybe, the "ble" (bluetooth) mode would be supported in the mobile environment (only with Ledger Nano X).
     */
    getMode(): Promise<string>;
    getWebHIDFlag(): Promise<boolean>;
    setWebHIDFlag(flag: boolean): Promise<void>;
}
