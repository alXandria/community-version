"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RemovePermissionOrigin = exports.AddPermissionOrigin = exports.GetOriginPermittedChainsMsg = exports.GetPermissionOriginsMsg = exports.EnableAccessMsg = void 0;
const router_1 = require("@keplr-wallet/router");
const constants_1 = require("./constants");
class EnableAccessMsg extends router_1.Message {
    constructor(chainIds) {
        super();
        this.chainIds = chainIds;
    }
    static type() {
        return "enable-access";
    }
    validateBasic() {
        if (!this.chainIds || this.chainIds.length === 0) {
            throw new router_1.KeplrError("permission", 100, "chain id not set");
        }
    }
    route() {
        return constants_1.ROUTE;
    }
    approveExternal() {
        return true;
    }
    type() {
        return EnableAccessMsg.type();
    }
}
exports.EnableAccessMsg = EnableAccessMsg;
class GetPermissionOriginsMsg extends router_1.Message {
    constructor(chainId, permissionType) {
        super();
        this.chainId = chainId;
        this.permissionType = permissionType;
    }
    static type() {
        return "get-permission-origins";
    }
    validateBasic() {
        if (!this.chainId) {
            throw new router_1.KeplrError("permission", 100, "chain id not set");
        }
        if (!this.permissionType) {
            throw new router_1.KeplrError("permission", 110, "empty permission type");
        }
    }
    route() {
        return constants_1.ROUTE;
    }
    type() {
        return GetPermissionOriginsMsg.type();
    }
}
exports.GetPermissionOriginsMsg = GetPermissionOriginsMsg;
class GetOriginPermittedChainsMsg extends router_1.Message {
    constructor(permissionOrigin, permissionType) {
        super();
        this.permissionOrigin = permissionOrigin;
        this.permissionType = permissionType;
    }
    static type() {
        return "get-origin-permitted-chains";
    }
    validateBasic() {
        if (!this.permissionOrigin) {
            throw new router_1.KeplrError("permission", 101, "origin not set");
        }
        if (!this.permissionType) {
            throw new router_1.KeplrError("permission", 110, "empty permission type");
        }
    }
    route() {
        return constants_1.ROUTE;
    }
    type() {
        return GetOriginPermittedChainsMsg.type();
    }
}
exports.GetOriginPermittedChainsMsg = GetOriginPermittedChainsMsg;
class AddPermissionOrigin extends router_1.Message {
    constructor(chainId, permissionType, permissionOrigin) {
        super();
        this.chainId = chainId;
        this.permissionType = permissionType;
        this.permissionOrigin = permissionOrigin;
    }
    static type() {
        return "add-permission-origin";
    }
    validateBasic() {
        if (!this.chainId) {
            throw new router_1.KeplrError("permission", 100, "chain id not set");
        }
        if (!this.permissionType) {
            throw new router_1.KeplrError("permission", 110, "empty permission type");
        }
        if (!this.permissionOrigin) {
            throw new router_1.KeplrError("permission", 111, "empty permission origin");
        }
    }
    route() {
        return constants_1.ROUTE;
    }
    type() {
        return AddPermissionOrigin.type();
    }
}
exports.AddPermissionOrigin = AddPermissionOrigin;
class RemovePermissionOrigin extends router_1.Message {
    constructor(chainId, permissionType, permissionOrigin) {
        super();
        this.chainId = chainId;
        this.permissionType = permissionType;
        this.permissionOrigin = permissionOrigin;
    }
    static type() {
        return "remove-permission-origin";
    }
    validateBasic() {
        if (!this.chainId) {
            throw new router_1.KeplrError("permission", 100, "chain id not set");
        }
        if (!this.permissionType) {
            throw new router_1.KeplrError("permission", 110, "empty permission type");
        }
        if (!this.permissionOrigin) {
            throw new router_1.KeplrError("permission", 111, "empty permission origin");
        }
    }
    route() {
        return constants_1.ROUTE;
    }
    type() {
        return RemovePermissionOrigin.type();
    }
}
exports.RemovePermissionOrigin = RemovePermissionOrigin;
//# sourceMappingURL=messages.js.map