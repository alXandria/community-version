import { InteractionService } from "../interaction";
import { Env } from "@keplr-wallet/router";
import { KVStore } from "@keplr-wallet/common";
import { ChainsService } from "../chains";
import { KeyRingService } from "../keyring";
export declare class PermissionService {
    protected readonly kvStore: KVStore;
    protected permissionMap: {
        [chainIdentifier: string]: {
            [type: string]: {
                [origin: string]: true | undefined;
            } | undefined;
        } | undefined;
    };
    protected privilegedOrigins: Map<string, boolean>;
    protected interactionService: InteractionService;
    protected chainsService: ChainsService;
    protected keyRingService: KeyRingService;
    constructor(kvStore: KVStore, privilegedOrigins: string[]);
    init(interactionService: InteractionService, chainsService: ChainsService, keyRingService: KeyRingService): void;
    protected readonly onChainRemoved: (chainId: string) => void;
    checkOrGrantBasicAccessPermission(env: Env, chainIds: string | string[], origin: string): Promise<void>;
    grantPermission(env: Env, url: string, chainIds: string[], type: string, origins: string[]): Promise<void>;
    grantBasicAccessPermission(env: Env, chainIds: string[], origins: string[]): Promise<void>;
    checkPermission(env: Env, chainId: string, type: string, origin: string): void;
    checkBasicAccessPermission(env: Env, chainIds: string[], origin: string): Promise<void>;
    hasPermisson(chainId: string, type: string, origin: string): boolean;
    getPermissionOrigins(chainId: string, type: string): string[];
    getOriginPermittedChains(origin: string, type: string): string[];
    addPermission(chainIds: string[], type: string, origins: string[]): Promise<void>;
    removePermission(chainId: string, type: string, origins: string[]): Promise<void>;
    removeAllPermissions(chainId: string): Promise<void>;
    protected restore(): Promise<void>;
    protected save(): Promise<void>;
}
