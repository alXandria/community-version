"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChainInfoSchema = exports.SuggestingBIP44Schema = exports.Bech32ConfigSchema = exports.Secret20CurrencySchema = exports.CW20CurrencySchema = exports.CurrencySchema = void 0;
const router_1 = require("@keplr-wallet/router");
const joi_1 = __importDefault(require("joi"));
exports.CurrencySchema = joi_1.default.object({
    coinDenom: joi_1.default.string().required(),
    coinMinimalDenom: joi_1.default.string().required(),
    coinDecimals: joi_1.default.number().integer().min(0).max(18).required(),
    coinGeckoId: joi_1.default.string(),
    coinImageUrl: joi_1.default.string().uri(),
});
exports.CW20CurrencySchema = exports.CurrencySchema
    .keys({
    type: joi_1.default.string().equal("cw20").required(),
    contractAddress: joi_1.default.string().required(),
})
    .custom((value) => {
    if (value.coinMinimalDenom.startsWith(`${value.type}:${value.contractAddress}:`)) {
        return value;
    }
    else {
        return Object.assign(Object.assign({}, value), { coinMinimalDenom: `${value.type}:${value.contractAddress}:` + value.coinMinimalDenom });
    }
});
exports.Secret20CurrencySchema = exports.CurrencySchema
    .keys({
    type: joi_1.default.string().equal("secret20").required(),
    contractAddress: joi_1.default.string().required(),
    viewingKey: joi_1.default.string().required(),
})
    .custom((value) => {
    if (value.coinMinimalDenom.startsWith(`${value.type}:${value.contractAddress}:`)) {
        return value;
    }
    else {
        return Object.assign(Object.assign({}, value), { coinMinimalDenom: `${value.type}:${value.contractAddress}:` + value.coinMinimalDenom });
    }
});
exports.Bech32ConfigSchema = joi_1.default.object({
    bech32PrefixAccAddr: joi_1.default.string().required(),
    bech32PrefixAccPub: joi_1.default.string().required(),
    bech32PrefixValAddr: joi_1.default.string().required(),
    bech32PrefixValPub: joi_1.default.string().required(),
    bech32PrefixConsAddr: joi_1.default.string().required(),
    bech32PrefixConsPub: joi_1.default.string().required(),
});
exports.SuggestingBIP44Schema = joi_1.default.object({
    coinType: joi_1.default.number().integer().min(0).required(),
}).unknown(true);
exports.ChainInfoSchema = joi_1.default.object({
    rpc: joi_1.default.string().required().uri(),
    // TODO: Handle rpc config.
    rest: joi_1.default.string().required().uri(),
    // TODO: Handle rest config.
    chainId: joi_1.default.string().required().min(1).max(30),
    chainName: joi_1.default.string().required().min(1).max(30),
    stakeCurrency: exports.CurrencySchema.required(),
    walletUrl: joi_1.default.string().uri(),
    walletUrlForStaking: joi_1.default.string().uri(),
    bip44: exports.SuggestingBIP44Schema.required(),
    bech32Config: exports.Bech32ConfigSchema.required(),
    currencies: joi_1.default.array()
        .min(1)
        .items(exports.CurrencySchema, exports.CW20CurrencySchema, exports.Secret20CurrencySchema)
        .required(),
    feeCurrencies: joi_1.default.array().min(1).items(exports.CurrencySchema).required(),
    coinType: joi_1.default.number().integer(),
    beta: joi_1.default.boolean(),
    gasPriceStep: joi_1.default.object({
        low: joi_1.default.number().required(),
        average: joi_1.default.number().required(),
        high: joi_1.default.number().required(),
    }),
    features: joi_1.default.array()
        .items(joi_1.default.string().valid("stargate", "cosmwasm", "wasmd_0.24+", "secretwasm", "ibc-transfer", "no-legacy-stdTx", "ibc-go", "eth-address-gen", "eth-key-sign", "query:/cosmos/bank/v1beta1/spendable_balances"))
        .unique()
        .custom((value) => {
        if (value.indexOf("cosmwasm") >= 0 && value.indexOf("secretwasm") >= 0) {
            throw new router_1.KeplrError("chains", 430, "cosmwasm and secretwasm are not compatible");
        }
        return value;
    }),
});
//# sourceMappingURL=types.js.map