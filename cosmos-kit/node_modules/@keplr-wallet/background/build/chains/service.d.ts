import { ChainInfoWithEmbed } from "./types";
import { ChainInfo } from "@keplr-wallet/types";
import { KVStore } from "@keplr-wallet/common";
import { ChainUpdaterService } from "../updater";
import { InteractionService } from "../interaction";
import { Env } from "@keplr-wallet/router";
declare type ChainRemovedHandler = (chainId: string, identifier: string) => void;
export declare class ChainsService {
    protected readonly kvStore: KVStore;
    protected readonly embedChainInfos: ChainInfo[];
    protected readonly experimentalOptions: Partial<{
        useMemoryKVStoreForSuggestChain: boolean;
    }>;
    protected onChainRemovedHandlers: ChainRemovedHandler[];
    protected cachedChainInfos: ChainInfoWithEmbed[] | undefined;
    protected chainUpdaterKeeper: ChainUpdaterService;
    protected interactionKeeper: InteractionService;
    protected readonly kvStoreForSuggestChain: KVStore;
    constructor(kvStore: KVStore, embedChainInfos: ChainInfo[], experimentalOptions?: Partial<{
        useMemoryKVStoreForSuggestChain: boolean;
    }>);
    init(chainUpdaterKeeper: ChainUpdaterService, interactionKeeper: InteractionService): void;
    readonly getChainInfos: () => Promise<ChainInfoWithEmbed[]>;
    clearCachedChainInfos(): void;
    getChainInfo(chainId: string): Promise<ChainInfoWithEmbed>;
    getChainCoinType(chainId: string): Promise<number>;
    hasChainInfo(chainId: string): Promise<boolean>;
    suggestChainInfo(env: Env, chainInfo: ChainInfo, origin: string): Promise<void>;
    getSuggestedChainInfos(): Promise<ChainInfo[]>;
    addChainInfo(chainInfo: ChainInfo): Promise<void>;
    removeChainInfo(chainId: string): Promise<void>;
    getChainEthereumKeyFeatures(chainId: string): Promise<{
        address: boolean;
        signing: boolean;
    }>;
    addChainRemovedHandler(handler: ChainRemovedHandler): void;
}
export {};
