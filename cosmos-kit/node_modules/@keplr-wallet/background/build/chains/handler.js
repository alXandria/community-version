"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getHandler = void 0;
const router_1 = require("@keplr-wallet/router");
const messages_1 = require("./messages");
const getHandler = (service) => {
    return (env, msg) => {
        switch (msg.constructor) {
            case messages_1.GetChainInfosMsg:
                return handleGetChainInfosMsg(service)(env, msg);
            case messages_1.SuggestChainInfoMsg:
                return handleSuggestChainInfoMsg(service)(env, msg);
            case messages_1.RemoveSuggestedChainInfoMsg:
                return handleRemoveSuggestedChainInfoMsg(service)(env, msg);
            default:
                throw new router_1.KeplrError("chains", 110, "Unknown msg type");
        }
    };
};
exports.getHandler = getHandler;
const handleGetChainInfosMsg = (service) => {
    return () => __awaiter(void 0, void 0, void 0, function* () {
        const chainInfos = yield service.getChainInfos();
        return {
            chainInfos,
        };
    });
};
const handleSuggestChainInfoMsg = (service) => {
    return (env, msg) => __awaiter(void 0, void 0, void 0, function* () {
        if (yield service.hasChainInfo(msg.chainInfo.chainId)) {
            // If suggested chain info is already registered, just return.
            return;
        }
        const chainInfo = msg.chainInfo;
        // And, always handle it as beta.
        chainInfo.beta = true;
        yield service.suggestChainInfo(env, chainInfo, msg.origin);
    });
};
const handleRemoveSuggestedChainInfoMsg = (service) => {
    return (_, msg) => __awaiter(void 0, void 0, void 0, function* () {
        yield service.removeChainInfo(msg.chainId);
        return yield service.getChainInfos();
    });
};
//# sourceMappingURL=handler.js.map