import { Message } from "../message";
import { Handler } from "../handler";
import { EnvProducer, Guard, MessageSender } from "../types";
import { MessageRegistry } from "../encoding";
export declare abstract class Router {
    protected readonly envProducer: EnvProducer;
    protected msgRegistry: MessageRegistry;
    protected registeredHandler: Map<string, Handler>;
    protected guards: Guard[];
    protected port: string;
    constructor(envProducer: EnvProducer);
    registerMessage(msgCls: {
        new (...args: any): Message<unknown>;
    } & {
        type(): string;
    }): void;
    addHandler(route: string, handler: Handler): void;
    addGuard(guard: Guard): void;
    abstract listen(port: string): void;
    abstract unlisten(): void;
    protected handleMessage(message: any, sender: MessageSender): Promise<unknown>;
}
