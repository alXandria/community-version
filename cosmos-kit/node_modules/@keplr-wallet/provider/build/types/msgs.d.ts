import { Message } from "@keplr-wallet/router";
import { ChainInfo, EthSignType, KeplrSignOptions, Key } from "@keplr-wallet/types";
import { AminoSignResponse, StdSignature, StdSignDoc } from "@cosmjs/launchpad";
export declare class EnableAccessMsg extends Message<void> {
    readonly chainIds: string[];
    static type(): string;
    constructor(chainIds: string[]);
    validateBasic(): void;
    route(): string;
    type(): string;
}
export declare class GetKeyMsg extends Message<Key> {
    readonly chainId: string;
    static type(): string;
    constructor(chainId: string);
    validateBasic(): void;
    route(): string;
    type(): string;
}
export declare class SuggestChainInfoMsg extends Message<void> {
    readonly chainInfo: ChainInfo;
    static type(): string;
    constructor(chainInfo: ChainInfo);
    validateBasic(): void;
    route(): string;
    type(): string;
}
export declare class SuggestTokenMsg extends Message<void> {
    readonly chainId: string;
    readonly contractAddress: string;
    readonly viewingKey?: string | undefined;
    static type(): string;
    constructor(chainId: string, contractAddress: string, viewingKey?: string | undefined);
    validateBasic(): void;
    route(): string;
    type(): string;
}
export declare class SendTxMsg extends Message<Uint8Array> {
    readonly chainId: string;
    readonly tx: unknown;
    readonly mode: "async" | "sync" | "block";
    static type(): string;
    constructor(chainId: string, tx: unknown, mode: "async" | "sync" | "block");
    validateBasic(): void;
    route(): string;
    type(): string;
}
export declare class GetSecret20ViewingKey extends Message<string> {
    readonly chainId: string;
    readonly contractAddress: string;
    static type(): string;
    constructor(chainId: string, contractAddress: string);
    validateBasic(): void;
    route(): string;
    type(): string;
}
export declare class RequestSignAminoMsg extends Message<AminoSignResponse> {
    readonly chainId: string;
    readonly signer: string;
    readonly signDoc: StdSignDoc;
    readonly signOptions: KeplrSignOptions & {
        isADR36WithString?: boolean;
        ethSignType?: EthSignType;
    };
    static type(): string;
    constructor(chainId: string, signer: string, signDoc: StdSignDoc, signOptions?: KeplrSignOptions & {
        isADR36WithString?: boolean;
        ethSignType?: EthSignType;
    });
    validateBasic(): void;
    route(): string;
    type(): string;
}
export declare class RequestVerifyADR36AminoSignDoc extends Message<boolean> {
    readonly chainId: string;
    readonly signer: string;
    readonly data: Uint8Array;
    readonly signature: StdSignature;
    static type(): string;
    constructor(chainId: string, signer: string, data: Uint8Array, signature: StdSignature);
    validateBasic(): void;
    route(): string;
    type(): string;
}
export declare class RequestSignDirectMsg extends Message<{
    readonly signed: {
        bodyBytes: Uint8Array;
        authInfoBytes: Uint8Array;
        chainId: string;
        accountNumber: string;
    };
    readonly signature: StdSignature;
}> {
    readonly chainId: string;
    readonly signer: string;
    readonly signDoc: {
        bodyBytes?: Uint8Array | null;
        authInfoBytes?: Uint8Array | null;
        chainId?: string | null;
        accountNumber?: string | null;
    };
    readonly signOptions: KeplrSignOptions;
    static type(): string;
    constructor(chainId: string, signer: string, signDoc: {
        bodyBytes?: Uint8Array | null;
        authInfoBytes?: Uint8Array | null;
        chainId?: string | null;
        accountNumber?: string | null;
    }, signOptions?: KeplrSignOptions);
    validateBasic(): void;
    route(): string;
    type(): string;
}
export declare class GetPubkeyMsg extends Message<Uint8Array> {
    readonly chainId: string;
    static type(): string;
    constructor(chainId: string);
    validateBasic(): void;
    route(): string;
    type(): string;
}
export declare class ReqeustEncryptMsg extends Message<Uint8Array> {
    readonly chainId: string;
    readonly contractCodeHash: string;
    readonly msg: object;
    static type(): string;
    constructor(chainId: string, contractCodeHash: string, msg: object);
    validateBasic(): void;
    route(): string;
    type(): string;
}
export declare class RequestDecryptMsg extends Message<Uint8Array> {
    readonly chainId: string;
    readonly cipherText: Uint8Array;
    readonly nonce: Uint8Array;
    static type(): string;
    constructor(chainId: string, cipherText: Uint8Array, nonce: Uint8Array);
    validateBasic(): void;
    route(): string;
    type(): string;
}
export declare class GetTxEncryptionKeyMsg extends Message<Uint8Array> {
    readonly chainId: string;
    readonly nonce: Uint8Array;
    static type(): string;
    constructor(chainId: string, nonce: Uint8Array);
    validateBasic(): void;
    route(): string;
    type(): string;
}
