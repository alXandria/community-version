import { AppCurrency, Keplr, KeplrSignOptions } from "@keplr-wallet/types";
import { ChainGetter } from "../common";
import { StdFee } from "@cosmjs/launchpad";
import { MakeTxResponse } from "./types";
export declare enum WalletStatus {
    NotInit = "NotInit",
    Loading = "Loading",
    Loaded = "Loaded",
    NotExist = "NotExist",
    Rejected = "Rejected"
}
export interface MsgOpt {
    readonly type: string;
    readonly gas: number;
}
export interface AccountSetOpts {
    readonly suggestChain: boolean;
    readonly suggestChainFn?: (keplr: Keplr, chainInfo: ReturnType<ChainGetter["getChain"]>) => Promise<void>;
    readonly autoInit: boolean;
    readonly getKeplr: () => Promise<Keplr | undefined>;
}
export declare class AccountSetBase {
    protected readonly eventListener: {
        addEventListener: (type: string, fn: () => unknown) => void;
        removeEventListener: (type: string, fn: () => unknown) => void;
    };
    protected readonly chainGetter: ChainGetter;
    protected readonly chainId: string;
    protected readonly opts: AccountSetOpts;
    protected _walletVersion: string | undefined;
    protected _walletStatus: WalletStatus;
    protected _rejectionReason: Error | undefined;
    protected _name: string;
    protected _bech32Address: string;
    protected _txTypeInProgress: string;
    protected pubKey: Uint8Array;
    protected hasInited: boolean;
    protected sendTokenFns: ((amount: string, currency: AppCurrency, recipient: string, memo: string, stdFee: Partial<StdFee>, signOptions?: KeplrSignOptions, onTxEvents?: ((tx: any) => void) | {
        onBroadcastFailed?: (e?: Error) => void;
        onBroadcasted?: (txHash: Uint8Array) => void;
        onFulfill?: (tx: any) => void;
    }) => Promise<boolean>)[];
    protected makeSendTokenTxFns: ((amount: string, currency: AppCurrency, recipient: string) => MakeTxResponse | undefined)[];
    constructor(eventListener: {
        addEventListener: (type: string, fn: () => unknown) => void;
        removeEventListener: (type: string, fn: () => unknown) => void;
    }, chainGetter: ChainGetter, chainId: string, opts: AccountSetOpts);
    getKeplr(): Promise<Keplr | undefined>;
    registerSendTokenFn(fn: (amount: string, currency: AppCurrency, recipient: string, memo: string, stdFee: Partial<StdFee>, signOptions?: KeplrSignOptions, onTxEvents?: ((tx: any) => void) | {
        onBroadcasted?: (txHash: Uint8Array) => void;
        onFulfill?: (tx: any) => void;
    }) => Promise<boolean>): void;
    registerMakeSendTokenFn(fn: (amount: string, currency: AppCurrency, recipient: string) => MakeTxResponse | undefined): void;
    protected enable(keplr: Keplr, chainId: string): Promise<void>;
    protected suggestChain(keplr: Keplr, chainInfo: ReturnType<ChainGetter["getChain"]>): Promise<void>;
    private readonly handleInit;
    init(): Generator<Promise<void> | Promise<import("@keplr-wallet/types").Key> | Promise<Keplr | undefined>, void, Keplr & import("@keplr-wallet/types").Key>;
    disconnect(): void;
    get walletVersion(): string | undefined;
    get isReadyToSendTx(): boolean;
    /**
     * @deprecated Use `isReadyToSendTx`
     */
    get isReadyToSendMsgs(): boolean;
    makeSendTokenTx(amount: string, currency: AppCurrency, recipient: string): MakeTxResponse;
    sendToken(amount: string, currency: AppCurrency, recipient: string, memo?: string, stdFee?: Partial<StdFee>, signOptions?: KeplrSignOptions, onTxEvents?: ((tx: any) => void) | {
        onBroadcasted?: (txHash: Uint8Array) => void;
        onFulfill?: (tx: any) => void;
    }): Promise<void>;
    get walletStatus(): WalletStatus;
    get rejectionReason(): Error | undefined;
    get name(): string;
    get bech32Address(): string;
    /**
     * Returns the tx type in progress waiting to be committed.
     * If there is no tx type in progress, this returns an empty string ("").
     */
    get txTypeInProgress(): string;
    /**
     * @deprecated Use `txTypeInProgress`
     */
    get isSendingMsg(): string | boolean;
    get hasEthereumHexAddress(): boolean;
    get ethereumHexAddress(): string;
}
export declare class AccountSetBaseSuper extends AccountSetBase {
    constructor(...params: ConstructorParameters<typeof AccountSetBase>);
    setTxTypeInProgress(type: string): void;
}
