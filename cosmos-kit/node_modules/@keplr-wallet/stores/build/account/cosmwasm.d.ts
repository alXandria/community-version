import { AccountSetBase, AccountSetBaseSuper, MsgOpt } from "./base";
import { CosmwasmQueries, IQueriesStore, QueriesSetBase } from "../query";
import { ChainGetter, CoinPrimitive } from "../common";
import { StdFee } from "@cosmjs/launchpad";
import { AppCurrency, KeplrSignOptions } from "@keplr-wallet/types";
import { DeepPartial, DeepReadonly, Optional } from "utility-types";
import { CosmosAccount } from "./cosmos";
export interface CosmwasmAccount {
    cosmwasm: CosmwasmAccountImpl;
}
export declare const CosmwasmAccount: {
    use(options: {
        msgOptsCreator?: ((chainId: string) => DeepPartial<CosmwasmMsgOpts> | undefined) | undefined;
        queriesStore: IQueriesStore<CosmwasmQueries>;
    }): (base: AccountSetBaseSuper & CosmosAccount, chainGetter: ChainGetter, chainId: string) => CosmwasmAccount;
};
/**
 * @deprecated Predict gas through simulation rather than using a fixed gas.
 */
export interface CosmwasmMsgOpts {
    readonly send: {
        readonly cw20: Pick<MsgOpt, "gas">;
    };
    readonly executeWasm: Pick<MsgOpt, "type">;
}
/**
 * @deprecated Predict gas through simulation rather than using a fixed gas.
 */
export declare const defaultCosmwasmMsgOpts: CosmwasmMsgOpts;
export declare class CosmwasmAccountImpl {
    protected readonly base: AccountSetBase & CosmosAccount;
    protected readonly chainGetter: ChainGetter;
    protected readonly chainId: string;
    protected readonly queriesStore: IQueriesStore<CosmwasmQueries>;
    protected readonly _msgOpts: CosmwasmMsgOpts;
    constructor(base: AccountSetBase & CosmosAccount, chainGetter: ChainGetter, chainId: string, queriesStore: IQueriesStore<CosmwasmQueries>, _msgOpts: CosmwasmMsgOpts);
    /**
     * @deprecated Predict gas through simulation rather than using a fixed gas.
     */
    get msgOpts(): CosmwasmMsgOpts;
    protected processMakeSendTokenTx(amount: string, currency: AppCurrency, recipient: string): import("./types").MakeTxResponse | undefined;
    /**
     * @deprecated
     */
    protected processSendToken(amount: string, currency: AppCurrency, recipient: string, memo: string, stdFee: Partial<StdFee>, signOptions?: KeplrSignOptions, onTxEvents?: ((tx: any) => void) | {
        onBroadcasted?: (txHash: Uint8Array) => void;
        onFulfill?: (tx: any) => void;
    }): Promise<boolean>;
    makeExecuteContractTx(type: "unknown" | "send" | "executeWasm" | undefined, contractAddress: string, obj: object, funds: CoinPrimitive[], preOnTxEvents?: ((tx: any) => void) | {
        onBroadcasted?: (txHash: Uint8Array) => void;
        onFulfill?: (tx: any) => void;
    }): import("./types").MakeTxResponse;
    /**
     * @deprecated
     */
    sendExecuteContractMsg(type: "unknown" | "send" | "executeWasm" | undefined, contractAddress: string, obj: object, funds: CoinPrimitive[], memo: string | undefined, stdFee: Optional<StdFee, "amount">, signOptions?: KeplrSignOptions, onTxEvents?: ((tx: any) => void) | {
        onBroadcasted?: (txHash: Uint8Array) => void;
        onFulfill?: (tx: any) => void;
    }): Promise<void>;
    protected get queries(): DeepReadonly<QueriesSetBase & CosmwasmQueries>;
}
