"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const base_1 = require("./base");
const chain_1 = require("../chain");
const provider_mock_1 = require("@keplr-wallet/provider-mock");
describe("Test Account set base", () => {
    test("Account set base should be inited automatically if `autoInit` is true", () => __awaiter(void 0, void 0, void 0, function* () {
        const chainInfos = [
            {
                chainId: "test",
                bech32Config: {
                    bech32PrefixAccAddr: "cosmos",
                },
                currencies: [],
            },
        ];
        const chainStore = new chain_1.ChainStore(chainInfos);
        const accountSetBase = new base_1.AccountSetBase({
            // No need
            addEventListener: () => { },
            removeEventListener: () => { },
        }, chainStore, "test", {
            suggestChain: false,
            autoInit: true,
            getKeplr: () => __awaiter(void 0, void 0, void 0, function* () {
                return new provider_mock_1.MockKeplr(() => __awaiter(void 0, void 0, void 0, function* () {
                    return new Uint8Array(0);
                }), chainInfos, "curious kitchen brief change imitate open close knock cause romance trim offer");
            }),
        });
        expect(accountSetBase.walletStatus).toBe(base_1.WalletStatus.Loading);
        // Need wait some time to get the Keplr.
        yield (() => {
            return new Promise((resolve) => {
                setTimeout(resolve, 1000);
            });
        })();
        expect(accountSetBase.walletStatus).toBe(base_1.WalletStatus.Loaded);
        expect(accountSetBase.bech32Address).toBe("cosmos1unx0p9jv79xz278xuk7uuuwj2l99k2sp4vm8wp");
        expect(accountSetBase.isReadyToSendMsgs).toBe(true);
    }));
    test("Account set base should not be inited automatically if `autoInit` is false", () => __awaiter(void 0, void 0, void 0, function* () {
        const chainInfos = [
            {
                chainId: "test",
                bech32Config: {
                    bech32PrefixAccAddr: "cosmos",
                },
                currencies: [],
            },
        ];
        const chainStore = new chain_1.ChainStore(chainInfos);
        const accountSetBase = new base_1.AccountSetBase({
            // No need
            addEventListener: () => { },
            removeEventListener: () => { },
        }, chainStore, "test", {
            suggestChain: false,
            autoInit: false,
            getKeplr: () => __awaiter(void 0, void 0, void 0, function* () {
                return new provider_mock_1.MockKeplr(() => __awaiter(void 0, void 0, void 0, function* () {
                    return new Uint8Array(0);
                }), chainInfos, "curious kitchen brief change imitate open close knock cause romance trim offer");
            }),
        });
        expect(accountSetBase.walletStatus).toBe(base_1.WalletStatus.NotInit);
        // Need wait some time to get the Keplr.
        yield (() => {
            return new Promise((resolve) => {
                setTimeout(resolve, 1000);
            });
        })();
        expect(accountSetBase.walletStatus).toBe(base_1.WalletStatus.NotInit);
    }));
});
//# sourceMappingURL=base.spec.js.map