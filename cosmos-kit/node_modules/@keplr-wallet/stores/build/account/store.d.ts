import { ChainedFunctionifyTuple, ChainGetter, HasMapStore, IObject } from "../common";
import { AccountSetBase, AccountSetBaseSuper, AccountSetOpts } from "./base";
import { DeepReadonly, UnionToIntersection } from "utility-types";
export interface IAccountStore<T extends IObject = {}> {
    getAccount(chainId: string): DeepReadonly<AccountSetBase & T>;
}
export declare class AccountStore<Injects extends Array<IObject>, AccountSetReturn = AccountSetBase & UnionToIntersection<Injects[number]>> extends HasMapStore<AccountSetReturn> {
    protected readonly eventListener: {
        addEventListener: (type: string, fn: () => unknown) => void;
        removeEventListener: (type: string, fn: () => unknown) => void;
    };
    protected readonly chainGetter: ChainGetter;
    protected readonly storeOptsCreator: (chainId: string) => AccountSetOpts;
    protected accountSetCreators: ChainedFunctionifyTuple<AccountSetBaseSuper, [
        ChainGetter,
        string
    ], Injects>;
    constructor(eventListener: {
        addEventListener: (type: string, fn: () => unknown) => void;
        removeEventListener: (type: string, fn: () => unknown) => void;
    }, chainGetter: ChainGetter, storeOptsCreator: (chainId: string) => AccountSetOpts, ...accountSetCreators: ChainedFunctionifyTuple<AccountSetBaseSuper, [
        ChainGetter,
        string
    ], Injects>);
    getAccount(chainId: string): AccountSetReturn;
    hasAccount(chainId: string): boolean;
}
