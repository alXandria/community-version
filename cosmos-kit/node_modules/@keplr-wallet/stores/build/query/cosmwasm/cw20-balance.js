"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ObservableQueryCw20BalanceRegistry = exports.ObservableQueryCw20BalanceInner = exports.ObservableQueryCw20Balance = void 0;
const mobx_1 = require("mobx");
const common_1 = require("@keplr-wallet/common");
const unit_1 = require("@keplr-wallet/unit");
const balances_1 = require("../balances");
const contract_query_1 = require("./contract-query");
class ObservableQueryCw20Balance extends contract_query_1.ObservableCosmwasmContractChainQuery {
    constructor(kvStore, chainId, chainGetter, contractAddress, bech32Address) {
        super(kvStore, chainId, chainGetter, contractAddress, {
            balance: { address: bech32Address },
        });
        this.contractAddress = contractAddress;
        this.bech32Address = bech32Address;
    }
    canFetch() {
        return super.canFetch() && this.bech32Address !== "";
    }
}
exports.ObservableQueryCw20Balance = ObservableQueryCw20Balance;
class ObservableQueryCw20BalanceInner extends balances_1.ObservableQueryBalanceInner {
    constructor(kvStore, chainId, chainGetter, denomHelper, bech32Address) {
        super(kvStore, chainId, chainGetter, 
        // No need to set the url at initial.
        "", denomHelper);
        this.bech32Address = bech32Address;
        mobx_1.makeObservable(this);
        this.queryCw20Balance = new ObservableQueryCw20Balance(kvStore, chainId, chainGetter, denomHelper.contractAddress, bech32Address);
    }
    // This method doesn't have the role because the fetching is actually exeucnted in the `ObservableQueryCw20Balance`.
    canFetch() {
        return false;
    }
    *fetch() {
        yield this.queryCw20Balance.fetch();
    }
    get balance() {
        const denom = this.denomHelper.denom;
        const chainInfo = this.chainGetter.getChain(this.chainId);
        const currency = chainInfo.currencies.find((cur) => cur.coinMinimalDenom === denom);
        // TODO: Infer the currency according to its denom (such if denom is `uatom` -> `Atom` with decimal 6)?
        if (!currency) {
            throw new Error(`Unknown currency: ${denom}`);
        }
        if (!this.queryCw20Balance.response ||
            !this.queryCw20Balance.response.data.balance) {
            return new unit_1.CoinPretty(currency, new unit_1.Int(0)).ready(false);
        }
        return new unit_1.CoinPretty(currency, new unit_1.Int(this.queryCw20Balance.response.data.balance));
    }
}
__decorate([
    mobx_1.override
], ObservableQueryCw20BalanceInner.prototype, "fetch", null);
__decorate([
    mobx_1.computed
], ObservableQueryCw20BalanceInner.prototype, "balance", null);
exports.ObservableQueryCw20BalanceInner = ObservableQueryCw20BalanceInner;
class ObservableQueryCw20BalanceRegistry {
    constructor(kvStore) {
        this.kvStore = kvStore;
    }
    getBalanceInner(chainId, chainGetter, bech32Address, minimalDenom) {
        const denomHelper = new common_1.DenomHelper(minimalDenom);
        if (denomHelper.type === "cw20") {
            return new ObservableQueryCw20BalanceInner(this.kvStore, chainId, chainGetter, denomHelper, bech32Address);
        }
    }
}
exports.ObservableQueryCw20BalanceRegistry = ObservableQueryCw20BalanceRegistry;
//# sourceMappingURL=cw20-balance.js.map