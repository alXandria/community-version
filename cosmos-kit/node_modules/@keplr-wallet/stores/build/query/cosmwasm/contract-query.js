"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ObservableCosmwasmContractChainQuery = void 0;
const chain_query_1 = require("../chain-query");
const buffer_1 = require("buffer/");
const mobx_1 = require("mobx");
class ObservableCosmwasmContractChainQuery extends chain_query_1.ObservableChainQuery {
    constructor(kvStore, chainId, chainGetter, contractAddress, 
    // eslint-disable-next-line @typescript-eslint/ban-types
    obj) {
        super(kvStore, chainId, chainGetter, ObservableCosmwasmContractChainQuery.getUrlFromObj(contractAddress, obj));
        this.contractAddress = contractAddress;
        this.obj = obj;
        mobx_1.autorun(() => {
            var _a;
            const chainInfo = this.chainGetter.getChain(this.chainId);
            if (((_a = chainInfo.features) === null || _a === void 0 ? void 0 : _a.includes("cosmwasm")) &&
                chainInfo.features.includes("wasmd_0.24+")) {
                if (this.url.startsWith("/wasm/v1/")) {
                    this.setUrl(`/cosmwasm${this.url}`);
                }
            }
        });
    }
    // eslint-disable-next-line @typescript-eslint/ban-types
    static getUrlFromObj(contractAddress, obj) {
        const msg = JSON.stringify(obj);
        const query = buffer_1.Buffer.from(msg).toString("base64");
        return `/wasm/v1/contract/${contractAddress}/smart/${query}`;
    }
    // eslint-disable-next-line @typescript-eslint/ban-types
    setObj(obj) {
        this.obj = obj;
        this.setUrl(ObservableCosmwasmContractChainQuery.getUrlFromObj(this.contractAddress, this.obj));
    }
    canFetch() {
        return this.contractAddress.length !== 0;
    }
    fetchResponse(cancelToken) {
        const _super = Object.create(null, {
            fetchResponse: { get: () => super.fetchResponse }
        });
        return __awaiter(this, void 0, void 0, function* () {
            const { response, headers } = yield _super.fetchResponse.call(this, cancelToken);
            const wasmResult = response.data;
            if (!wasmResult) {
                throw new Error("Failed to get the response from the contract");
            }
            return {
                headers,
                response: {
                    data: wasmResult.data,
                    status: response.status,
                    staled: false,
                    timestamp: Date.now(),
                },
            };
        });
    }
}
exports.ObservableCosmwasmContractChainQuery = ObservableCosmwasmContractChainQuery;
//# sourceMappingURL=contract-query.js.map