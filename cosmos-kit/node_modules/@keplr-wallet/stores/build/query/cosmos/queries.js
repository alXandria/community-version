"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CosmosQueriesImpl = exports.CosmosQueries = void 0;
const account_1 = require("./account");
const supply_1 = require("./supply");
const staking_1 = require("./staking");
const governance_1 = require("./governance");
const ibc_1 = require("./ibc");
const sifchain_1 = require("./supply/sifchain");
const balance_1 = require("./balance");
const iris_minting_1 = require("./supply/iris-minting");
const osmosis_1 = require("./supply/osmosis");
const distribution_1 = require("./distribution");
const status_1 = require("./status");
const juno_1 = require("./supply/juno");
exports.CosmosQueries = {
    use() {
        return (queriesSetBase, kvStore, chainId, chainGetter) => {
            return {
                cosmos: new CosmosQueriesImpl(queriesSetBase, kvStore, chainId, chainGetter),
            };
        };
    },
};
class CosmosQueriesImpl {
    constructor(base, kvStore, chainId, chainGetter) {
        this.queryRPCStatus = new status_1.ObservableQueryRPCStatus(kvStore, chainId, chainGetter);
        this.querySifchainAPY = new sifchain_1.ObservableQuerySifchainLiquidityAPY(kvStore, chainId);
        base.queryBalances.addBalanceRegistry(new balance_1.ObservableQueryCosmosBalanceRegistry(kvStore));
        this.queryAccount = new account_1.ObservableQueryAccount(kvStore, chainId, chainGetter);
        this.querySpendableBalances = new balance_1.ObservableQuerySpendableBalances(kvStore, chainId, chainGetter);
        this.queryMint = new supply_1.ObservableQueryMintingInfation(kvStore, chainId, chainGetter);
        this.queryPool = new staking_1.ObservableQueryStakingPool(kvStore, chainId, chainGetter);
        this.queryStakingParams = new staking_1.ObservableQueryStakingParams(kvStore, chainId, chainGetter);
        this.querySupplyTotal = new supply_1.ObservableQuerySupplyTotal(kvStore, chainId, chainGetter);
        const osmosisMintParams = new osmosis_1.ObservableQueryOsmosisMintParmas(kvStore, chainId, chainGetter);
        this.queryDistributionParams = new distribution_1.ObservableQueryDistributionParams(kvStore, chainId, chainGetter);
        this.queryInflation = new supply_1.ObservableQueryInflation(chainId, chainGetter, this.queryMint, this.queryPool, this.querySupplyTotal, new iris_minting_1.ObservableQueryIrisMintingInfation(kvStore, chainId, chainGetter), this.querySifchainAPY, new osmosis_1.ObservableQueryOsmosisEpochs(kvStore, chainId, chainGetter), new osmosis_1.ObservableQueryOsmosisEpochProvisions(kvStore, chainId, chainGetter, osmosisMintParams), osmosisMintParams, new juno_1.ObservableQueryJunoAnnualProvisions(kvStore, chainId, chainGetter), this.queryDistributionParams);
        this.queryRewards = new staking_1.ObservableQueryRewards(kvStore, chainId, chainGetter);
        this.queryDelegations = new staking_1.ObservableQueryDelegations(kvStore, chainId, chainGetter);
        this.queryUnbondingDelegations = new staking_1.ObservableQueryUnbondingDelegations(kvStore, chainId, chainGetter);
        this.queryValidators = new staking_1.ObservableQueryValidators(kvStore, chainId, chainGetter);
        this.queryGovernance = new governance_1.ObservableQueryGovernance(kvStore, chainId, chainGetter, this.queryPool);
        this.queryProposalVote = new governance_1.ObservableQueryProposalVote(kvStore, chainId, chainGetter);
        this.queryIBCClientState = new ibc_1.ObservableQueryIBCClientState(kvStore, chainId, chainGetter);
        this.queryIBCChannel = new ibc_1.ObservableQueryIBCChannel(kvStore, chainId, chainGetter);
        this.queryIBCDenomTrace = new ibc_1.ObservableQueryDenomTrace(kvStore, chainId, chainGetter);
    }
}
exports.CosmosQueriesImpl = CosmosQueriesImpl;
//# sourceMappingURL=queries.js.map