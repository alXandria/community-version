import { ObservableChainQuery } from "../../chain-query";
import { Proposal, ProposalStatus, ProposalTally } from "./types";
import { KVStore } from "@keplr-wallet/common";
import { ChainGetter } from "../../../common";
import { DeepReadonly } from "utility-types";
import { CoinPretty, IntPretty } from "@keplr-wallet/unit";
import { ObservableQueryGovernance } from "./proposals";
export declare class ObservableQueryProposal extends ObservableChainQuery<ProposalTally> {
    protected readonly _raw: Proposal;
    protected readonly governance: ObservableQueryGovernance;
    constructor(kvStore: KVStore, chainId: string, chainGetter: ChainGetter, _raw: Proposal, governance: ObservableQueryGovernance);
    protected canFetch(): boolean;
    get raw(): DeepReadonly<Proposal>;
    get proposalStatus(): ProposalStatus;
    get id(): string;
    get title(): string;
    get description(): string;
    get turnout(): IntPretty;
    /**
     * Return the voting tally.
     * If the proposal status is passed or rejected, it returns the final tally of the proposal.
     * If the proposal status is in voting period, it queries the tally to the rest endpoint.
     * If the querying of tally is not completed, it return the tally with all 0 with not ready option.
     */
    get tally(): {
        yes: IntPretty;
        abstain: IntPretty;
        no: IntPretty;
        noWithVeto: IntPretty;
    };
    get total(): CoinPretty;
    get tallyRatio(): {
        yes: IntPretty;
        abstain: IntPretty;
        no: IntPretty;
        noWithVeto: IntPretty;
    };
}
