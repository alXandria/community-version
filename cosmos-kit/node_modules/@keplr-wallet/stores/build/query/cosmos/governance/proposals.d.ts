import { ObservableChainQuery } from "../../chain-query";
import { GovProposals } from "./types";
import { ObservableQueryGovParamDeposit, ObservableQueryGovParamTally, ObservableQueryGovParamVoting } from "./params";
import { KVStore } from "@keplr-wallet/common";
import { ChainGetter } from "../../../common";
import { DeepReadonly } from "utility-types";
import { IntPretty } from "@keplr-wallet/unit";
import { ObservableQueryProposal } from "./proposal";
import { ObservableQueryStakingPool } from "../staking";
export declare class ObservableQueryGovernance extends ObservableChainQuery<GovProposals> {
    protected readonly _queryPool: ObservableQueryStakingPool;
    protected paramDeposit?: ObservableQueryGovParamDeposit;
    protected paramVoting?: ObservableQueryGovParamVoting;
    protected paramTally?: ObservableQueryGovParamTally;
    constructor(kvStore: KVStore, chainId: string, chainGetter: ChainGetter, _queryPool: ObservableQueryStakingPool);
    getQueryPool(): DeepReadonly<ObservableQueryStakingPool>;
    getQueryParamDeposit(): DeepReadonly<ObservableQueryGovParamDeposit>;
    getQueryParamVoting(): DeepReadonly<ObservableQueryGovParamVoting>;
    getQueryParamTally(): DeepReadonly<ObservableQueryGovParamTally>;
    get quorum(): IntPretty;
    get proposals(): DeepReadonly<ObservableQueryProposal[]>;
    readonly getProposal: (id: string) => DeepReadonly<ObservableQueryProposal> | undefined;
}
