"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ObservableQueryGovernance = void 0;
const chain_query_1 = require("../../chain-query");
const mobx_1 = require("mobx");
const params_1 = require("./params");
const unit_1 = require("@keplr-wallet/unit");
const mobx_utils_1 = require("mobx-utils");
const proposal_1 = require("./proposal");
class ObservableQueryGovernance extends chain_query_1.ObservableChainQuery {
    constructor(kvStore, chainId, chainGetter, _queryPool) {
        super(kvStore, chainId, chainGetter, 
        // TODO: Handle pagination
        "/cosmos/gov/v1beta1/proposals?pagination.limit=3000");
        this._queryPool = _queryPool;
        this.paramDeposit = undefined;
        this.paramVoting = undefined;
        this.paramTally = undefined;
        this.getProposal = mobx_utils_1.computedFn((id) => {
            return this.proposals.find((proposal) => proposal.id === id);
        });
        mobx_1.makeObservable(this);
    }
    getQueryPool() {
        return this._queryPool;
    }
    getQueryParamDeposit() {
        if (!this.paramDeposit) {
            mobx_1.runInAction(() => {
                this.paramDeposit = new params_1.ObservableQueryGovParamDeposit(this.kvStore, this.chainId, this.chainGetter);
            });
        }
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        return this.paramDeposit;
    }
    getQueryParamVoting() {
        if (!this.paramVoting) {
            mobx_1.runInAction(() => {
                this.paramVoting = new params_1.ObservableQueryGovParamVoting(this.kvStore, this.chainId, this.chainGetter);
            });
        }
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        return this.paramVoting;
    }
    getQueryParamTally() {
        if (!this.paramTally) {
            mobx_1.runInAction(() => {
                this.paramTally = new params_1.ObservableQueryGovParamTally(this.kvStore, this.chainId, this.chainGetter);
            });
        }
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        return this.paramTally;
    }
    get quorum() {
        const paramTally = this.getQueryParamTally();
        if (!paramTally.response) {
            return new unit_1.IntPretty(new unit_1.Int(0)).ready(false);
        }
        // TODO: Use `RatePretty`
        let quorum = new unit_1.Dec(paramTally.response.data.tally_params.quorum);
        // Multiply 100
        quorum = quorum.mulTruncate(unit_1.DecUtils.getPrecisionDec(2));
        return new unit_1.IntPretty(quorum);
    }
    get proposals() {
        if (!this.response) {
            return [];
        }
        const result = [];
        for (const raw of this.response.data.proposals) {
            result.push(new proposal_1.ObservableQueryProposal(this.kvStore, this.chainId, this.chainGetter, raw, this));
        }
        return result.reverse();
    }
}
__decorate([
    mobx_1.observable.ref
], ObservableQueryGovernance.prototype, "paramDeposit", void 0);
__decorate([
    mobx_1.observable.ref
], ObservableQueryGovernance.prototype, "paramVoting", void 0);
__decorate([
    mobx_1.observable.ref
], ObservableQueryGovernance.prototype, "paramTally", void 0);
__decorate([
    mobx_1.computed
], ObservableQueryGovernance.prototype, "quorum", null);
__decorate([
    mobx_1.computed
], ObservableQueryGovernance.prototype, "proposals", null);
exports.ObservableQueryGovernance = ObservableQueryGovernance;
//# sourceMappingURL=proposals.js.map