import { ObservableChainQuery, ObservableChainQueryMap } from "../../chain-query";
import { Delegation, Delegations } from "./types";
import { KVStore } from "@keplr-wallet/common";
import { ChainGetter } from "../../../common";
import { CoinPretty } from "@keplr-wallet/unit";
export declare class ObservableQueryDelegationsInner extends ObservableChainQuery<Delegations> {
    protected bech32Address: string;
    constructor(kvStore: KVStore, chainId: string, chainGetter: ChainGetter, bech32Address: string);
    protected canFetch(): boolean;
    get total(): CoinPretty;
    get delegationBalances(): {
        validatorAddress: string;
        balance: CoinPretty;
    }[];
    get delegations(): Delegation[];
    readonly getDelegationTo: (validatorAddress: string) => CoinPretty;
}
export declare class ObservableQueryDelegations extends ObservableChainQueryMap<Delegations> {
    protected readonly kvStore: KVStore;
    protected readonly chainId: string;
    protected readonly chainGetter: ChainGetter;
    constructor(kvStore: KVStore, chainId: string, chainGetter: ChainGetter);
    getQueryBech32Address(bech32Address: string): ObservableQueryDelegationsInner;
}
