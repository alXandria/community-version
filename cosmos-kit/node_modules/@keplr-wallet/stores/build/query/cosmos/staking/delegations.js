"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ObservableQueryDelegations = exports.ObservableQueryDelegationsInner = void 0;
const chain_query_1 = require("../../chain-query");
const unit_1 = require("@keplr-wallet/unit");
const mobx_1 = require("mobx");
const mobx_utils_1 = require("mobx-utils");
class ObservableQueryDelegationsInner extends chain_query_1.ObservableChainQuery {
    constructor(kvStore, chainId, chainGetter, bech32Address) {
        super(kvStore, chainId, chainGetter, `/cosmos/staking/v1beta1/delegations/${bech32Address}?pagination.limit=1000`);
        this.getDelegationTo = mobx_utils_1.computedFn((validatorAddress) => {
            const delegations = this.delegations;
            const stakeCurrency = this.chainGetter.getChain(this.chainId)
                .stakeCurrency;
            if (!this.response) {
                return new unit_1.CoinPretty(stakeCurrency, new unit_1.Int(0)).ready(false);
            }
            for (const delegation of delegations) {
                if (delegation.delegation.validator_address === validatorAddress) {
                    return new unit_1.CoinPretty(stakeCurrency, new unit_1.Int(delegation.balance.amount));
                }
            }
            return new unit_1.CoinPretty(stakeCurrency, new unit_1.Int(0));
        });
        mobx_1.makeObservable(this);
        this.bech32Address = bech32Address;
    }
    canFetch() {
        // If bech32 address is empty, it will always fail, so don't need to fetch it.
        return this.bech32Address.length > 0;
    }
    get total() {
        const stakeCurrency = this.chainGetter.getChain(this.chainId).stakeCurrency;
        if (!this.response) {
            return new unit_1.CoinPretty(stakeCurrency, new unit_1.Int(0)).ready(false);
        }
        let totalBalance = new unit_1.Int(0);
        for (const delegation of this.response.data.delegation_responses) {
            totalBalance = totalBalance.add(new unit_1.Int(delegation.balance.amount));
        }
        return new unit_1.CoinPretty(stakeCurrency, totalBalance);
    }
    get delegationBalances() {
        if (!this.response) {
            return [];
        }
        const stakeCurrency = this.chainGetter.getChain(this.chainId).stakeCurrency;
        const result = [];
        for (const delegation of this.response.data.delegation_responses) {
            result.push({
                validatorAddress: delegation.delegation.validator_address,
                balance: new unit_1.CoinPretty(stakeCurrency, new unit_1.Int(delegation.balance.amount)),
            });
        }
        return result;
    }
    get delegations() {
        if (!this.response) {
            return [];
        }
        return this.response.data.delegation_responses;
    }
}
__decorate([
    mobx_1.computed
], ObservableQueryDelegationsInner.prototype, "total", null);
__decorate([
    mobx_1.computed
], ObservableQueryDelegationsInner.prototype, "delegationBalances", null);
__decorate([
    mobx_1.computed
], ObservableQueryDelegationsInner.prototype, "delegations", null);
exports.ObservableQueryDelegationsInner = ObservableQueryDelegationsInner;
class ObservableQueryDelegations extends chain_query_1.ObservableChainQueryMap {
    constructor(kvStore, chainId, chainGetter) {
        super(kvStore, chainId, chainGetter, (bech32Address) => {
            return new ObservableQueryDelegationsInner(this.kvStore, this.chainId, this.chainGetter, bech32Address);
        });
        this.kvStore = kvStore;
        this.chainId = chainId;
        this.chainGetter = chainGetter;
    }
    getQueryBech32Address(bech32Address) {
        return this.get(bech32Address);
    }
}
exports.ObservableQueryDelegations = ObservableQueryDelegations;
//# sourceMappingURL=delegations.js.map