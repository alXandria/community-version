"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ObservableQueryValidators = exports.ObservableQueryValidatorsInner = exports.ObservableQueryValidatorThumbnail = void 0;
const chain_query_1 = require("../../chain-query");
const types_1 = require("./types");
const mobx_1 = require("mobx");
const common_1 = require("../../../common");
const axios_1 = __importDefault(require("axios"));
const p_queue_1 = __importDefault(require("p-queue"));
const unit_1 = require("@keplr-wallet/unit");
const mobx_utils_1 = require("mobx-utils");
/**
 * Fetch the validator's thumbnail from keybase if the identity exists.
 */
class ObservableQueryValidatorThumbnail extends common_1.ObservableQuery {
    constructor(kvStore, validator) {
        const instance = axios_1.default.create({
            baseURL: "https://keybase.io/",
        });
        super(kvStore, instance, `_/api/1.0/user/lookup.json?fields=pictures&key_suffix=${validator.description.identity}`);
        mobx_1.makeObservable(this);
        this.validator = validator;
    }
    canFetch() {
        return this.validator.description.identity !== "";
    }
    fetchResponse(cancelToken) {
        const _super = Object.create(null, {
            fetchResponse: { get: () => super.fetchResponse }
        });
        return __awaiter(this, void 0, void 0, function* () {
            return yield ObservableQueryValidatorThumbnail.fetchingThumbnailQueue.add(() => {
                return _super.fetchResponse.call(this, cancelToken);
            });
        });
    }
    get thumbnail() {
        var _a, _b, _c, _d;
        if (((_a = this.response) === null || _a === void 0 ? void 0 : _a.data.status.code) === 0) {
            if (this.response.data.them && this.response.data.them.length > 0) {
                return (_d = (_c = (_b = this.response.data.them[0].pictures) === null || _b === void 0 ? void 0 : _b.primary) === null || _c === void 0 ? void 0 : _c.url) !== null && _d !== void 0 ? _d : "";
            }
        }
        return "";
    }
}
/**
 * Throttle down fetching the thumbnail from Keybase.
 * If too many requests occurs at the same time, Keybase will reject these requests.
 * @protected
 */
ObservableQueryValidatorThumbnail.fetchingThumbnailQueue = new p_queue_1.default({
    concurrency: 3,
});
__decorate([
    mobx_1.computed
], ObservableQueryValidatorThumbnail.prototype, "thumbnail", null);
exports.ObservableQueryValidatorThumbnail = ObservableQueryValidatorThumbnail;
class ObservableQueryValidatorsInner extends chain_query_1.ObservableChainQuery {
    constructor(kvStore, chainId, chainGetter, status) {
        super(kvStore, chainId, chainGetter, `/cosmos/staking/v1beta1/validators?pagination.limit=1000&status=${(() => {
            switch (status) {
                case types_1.BondStatus.Bonded:
                    return "BOND_STATUS_BONDED";
                case types_1.BondStatus.Unbonded:
                    return "BOND_STATUS_UNBONDED";
                case types_1.BondStatus.Unbonding:
                    return "BOND_STATUS_UNBONDING";
                default:
                    return "BOND_STATUS_UNSPECIFIED";
            }
        })()}`);
        this.status = status;
        this.thumbnailMap = new Map();
        this.getValidator = mobx_utils_1.computedFn((validatorAddress) => {
            const validators = this.validators;
            return validators.find((val) => val.operator_address === validatorAddress);
        });
        this.getValidatorThumbnail = mobx_utils_1.computedFn((operatorAddress) => {
            const validators = this.validators;
            const validator = validators.find((val) => val.operator_address === operatorAddress);
            if (!validator) {
                return "";
            }
            if (!validator.description.identity) {
                return "";
            }
            const identity = validator.description.identity;
            if (!this.thumbnailMap.has(identity)) {
                mobx_1.runInAction(() => {
                    this.thumbnailMap.set(identity, new ObservableQueryValidatorThumbnail(this.kvStore, validator));
                });
            }
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            return this.thumbnailMap.get(identity).thumbnail;
        });
        /**
         * Return the validator's voting power as human friendly (considering the coin decimals).
         */
        this.getValidatorShare = mobx_utils_1.computedFn((operatorAddress) => {
            const validators = this.validators;
            const validator = validators.find((val) => val.operator_address === operatorAddress);
            if (!validator) {
                return;
            }
            const chainInfo = this.chainGetter.getChain(this.chainId);
            const stakeCurrency = chainInfo.stakeCurrency;
            const power = new unit_1.Dec(validator.tokens).truncate();
            return new unit_1.CoinPretty(stakeCurrency, power);
        });
        mobx_1.makeObservable(this);
    }
    get validators() {
        if (!this.response) {
            return [];
        }
        return this.response.data.validators;
    }
    get validatorsSortedByVotingPower() {
        const validators = this.validators;
        return validators.sort((v1, v2) => {
            return new unit_1.Dec(v1.tokens).gt(new unit_1.Dec(v2.tokens)) ? -1 : 1;
        });
    }
}
__decorate([
    mobx_1.observable.shallow
], ObservableQueryValidatorsInner.prototype, "thumbnailMap", void 0);
__decorate([
    mobx_1.computed
], ObservableQueryValidatorsInner.prototype, "validators", null);
__decorate([
    mobx_1.computed
], ObservableQueryValidatorsInner.prototype, "validatorsSortedByVotingPower", null);
exports.ObservableQueryValidatorsInner = ObservableQueryValidatorsInner;
class ObservableQueryValidators extends chain_query_1.ObservableChainQueryMap {
    constructor(kvStore, chainId, chainGetter) {
        super(kvStore, chainId, chainGetter, (status) => {
            return new ObservableQueryValidatorsInner(this.kvStore, this.chainId, this.chainGetter, status);
        });
        this.kvStore = kvStore;
        this.chainId = chainId;
        this.chainGetter = chainGetter;
    }
    getQueryStatus(status = types_1.BondStatus.Bonded) {
        return this.get(status);
    }
}
exports.ObservableQueryValidators = ObservableQueryValidators;
//# sourceMappingURL=validators.js.map