import { ObservableChainQuery, ObservableChainQueryMap } from "../../chain-query";
import { BondStatus, Validators, Validator } from "./types";
import { KVStore } from "@keplr-wallet/common";
import { ChainGetter } from "../../../common";
import { ObservableQuery, QueryResponse } from "../../../common";
import { CancelToken } from "axios";
import PQueue from "p-queue";
import { CoinPretty } from "@keplr-wallet/unit";
interface KeybaseResult {
    status: {
        code: number;
        name: string;
    };
    them?: [
        {
            id?: string;
            pictures?: {
                primary?: {
                    url?: string;
                };
            };
        }
    ];
}
/**
 * Fetch the validator's thumbnail from keybase if the identity exists.
 */
export declare class ObservableQueryValidatorThumbnail extends ObservableQuery<KeybaseResult> {
    /**
     * Throttle down fetching the thumbnail from Keybase.
     * If too many requests occurs at the same time, Keybase will reject these requests.
     * @protected
     */
    protected static fetchingThumbnailQueue: PQueue;
    protected readonly validator: Validator;
    constructor(kvStore: KVStore, validator: Validator);
    protected canFetch(): boolean;
    protected fetchResponse(cancelToken: CancelToken): Promise<{
        response: QueryResponse<KeybaseResult>;
        headers: any;
    }>;
    get thumbnail(): string;
}
export declare class ObservableQueryValidatorsInner extends ObservableChainQuery<Validators> {
    protected readonly status: BondStatus;
    protected thumbnailMap: Map<string, ObservableQueryValidatorThumbnail>;
    constructor(kvStore: KVStore, chainId: string, chainGetter: ChainGetter, status: BondStatus);
    get validators(): Validator[];
    readonly getValidator: (validatorAddress: string) => Validator | undefined;
    get validatorsSortedByVotingPower(): Validator[];
    readonly getValidatorThumbnail: (operatorAddress: string) => string;
    /**
     * Return the validator's voting power as human friendly (considering the coin decimals).
     */
    readonly getValidatorShare: (operatorAddress: string) => CoinPretty | undefined;
}
export declare class ObservableQueryValidators extends ObservableChainQueryMap<Validators> {
    protected readonly kvStore: KVStore;
    protected readonly chainId: string;
    protected readonly chainGetter: ChainGetter;
    constructor(kvStore: KVStore, chainId: string, chainGetter: ChainGetter);
    getQueryStatus(status?: BondStatus): ObservableQueryValidatorsInner;
}
export {};
