import { Rewards } from "./types";
import { KVStore } from "@keplr-wallet/common";
import { ObservableChainQuery, ObservableChainQueryMap } from "../../chain-query";
import { ChainGetter } from "../../../common";
import { CoinPretty } from "@keplr-wallet/unit";
export declare class ObservableQueryRewardsInner extends ObservableChainQuery<Rewards> {
    protected bech32Address: string;
    constructor(kvStore: KVStore, chainId: string, chainGetter: ChainGetter, bech32Address: string);
    protected canFetch(): boolean;
    get rewards(): CoinPretty[];
    readonly getRewardsOf: (validatorAddress: string) => CoinPretty[];
    get stakableReward(): CoinPretty;
    readonly getStakableRewardOf: (validatorAddress: string) => CoinPretty;
    get unstakableRewards(): CoinPretty[];
    readonly getUnstakableRewardsOf: (validatorAddress: string) => CoinPretty[];
    get pendingRewardValidatorAddresses(): string[];
    /**
     * getDescendingPendingRewardValidatorAddresses returns the validator addresses in descending order by stakable asset.
     */
    readonly getDescendingPendingRewardValidatorAddresses: (maxValiadtors: number) => string[];
}
export declare class ObservableQueryRewards extends ObservableChainQueryMap<Rewards> {
    protected readonly kvStore: KVStore;
    protected readonly chainId: string;
    protected readonly chainGetter: ChainGetter;
    constructor(kvStore: KVStore, chainId: string, chainGetter: ChainGetter);
    getQueryBech32Address(bech32Address: string): ObservableQueryRewardsInner;
}
