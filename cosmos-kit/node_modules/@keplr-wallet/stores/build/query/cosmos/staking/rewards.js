"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ObservableQueryRewards = exports.ObservableQueryRewardsInner = void 0;
const chain_query_1 = require("../../chain-query");
const mobx_1 = require("mobx");
const unit_1 = require("@keplr-wallet/unit");
const common_1 = require("../../../common");
const mobx_utils_1 = require("mobx-utils");
class ObservableQueryRewardsInner extends chain_query_1.ObservableChainQuery {
    constructor(kvStore, chainId, chainGetter, bech32Address) {
        super(kvStore, chainId, chainGetter, `/cosmos/distribution/v1beta1/delegators/${bech32Address}/rewards`);
        this.getRewardsOf = mobx_utils_1.computedFn((validatorAddress) => {
            var _a, _b, _c;
            const chainInfo = this.chainGetter.getChain(this.chainId);
            const currenciesMap = chainInfo.currencies.reduce((obj, currency) => {
                // TODO: Handle the contract tokens.
                if (!("type" in currency)) {
                    obj[currency.coinMinimalDenom] = currency;
                }
                return obj;
            }, {});
            const reward = (_b = (_a = this.response) === null || _a === void 0 ? void 0 : _a.data.rewards) === null || _b === void 0 ? void 0 : _b.find((r) => {
                return r.validator_address === validatorAddress;
            });
            return common_1.StoreUtils.getBalancesFromCurrencies(currenciesMap, (_c = reward === null || reward === void 0 ? void 0 : reward.reward) !== null && _c !== void 0 ? _c : []);
        });
        this.getStakableRewardOf = mobx_utils_1.computedFn((validatorAddress) => {
            var _a, _b, _c;
            const chainInfo = this.chainGetter.getChain(this.chainId);
            const reward = (_b = (_a = this.response) === null || _a === void 0 ? void 0 : _a.data.rewards) === null || _b === void 0 ? void 0 : _b.find((r) => {
                return r.validator_address === validatorAddress;
            });
            return common_1.StoreUtils.getBalanceFromCurrency(chainInfo.stakeCurrency, (_c = reward === null || reward === void 0 ? void 0 : reward.reward) !== null && _c !== void 0 ? _c : []);
        });
        this.getUnstakableRewardsOf = mobx_utils_1.computedFn((validatorAddress) => {
            var _a, _b, _c;
            const chainInfo = this.chainGetter.getChain(this.chainId);
            const currenciesMap = chainInfo.currencies.reduce((obj, currency) => {
                // TODO: Handle the contract tokens.
                if (!("type" in currency) &&
                    currency.coinMinimalDenom !== chainInfo.stakeCurrency.coinMinimalDenom) {
                    obj[currency.coinMinimalDenom] = currency;
                }
                return obj;
            }, {});
            const reward = (_b = (_a = this.response) === null || _a === void 0 ? void 0 : _a.data.rewards) === null || _b === void 0 ? void 0 : _b.find((r) => {
                return r.validator_address === validatorAddress;
            });
            return common_1.StoreUtils.getBalancesFromCurrencies(currenciesMap, (_c = reward === null || reward === void 0 ? void 0 : reward.reward) !== null && _c !== void 0 ? _c : []);
        });
        /**
         * getDescendingPendingRewardValidatorAddresses returns the validator addresses in descending order by stakable asset.
         */
        // ComputeFn doesn't support the default argument.
        this.getDescendingPendingRewardValidatorAddresses = mobx_utils_1.computedFn((maxValiadtors) => {
            var _a, _b;
            if (!this.response) {
                return [];
            }
            const chainInfo = this.chainGetter.getChain(this.chainId);
            const rewards = (_b = (_a = this.response.data.rewards) === null || _a === void 0 ? void 0 : _a.slice()) !== null && _b !== void 0 ? _b : [];
            rewards.sort((reward1, reward2) => {
                var _a, _b;
                const amount1 = common_1.StoreUtils.getBalanceFromCurrency(chainInfo.stakeCurrency, (_a = reward1.reward) !== null && _a !== void 0 ? _a : []);
                const amount2 = common_1.StoreUtils.getBalanceFromCurrency(chainInfo.stakeCurrency, (_b = reward2.reward) !== null && _b !== void 0 ? _b : []);
                if (amount1.toDec().gt(amount2.toDec())) {
                    return -1;
                }
                else {
                    return 1;
                }
            });
            return rewards
                .filter((reward) => {
                if (reward.reward) {
                    for (const r of reward.reward) {
                        const dec = new unit_1.Dec(r.amount);
                        if (dec.truncate().gt(new unit_1.Int(0))) {
                            return true;
                        }
                    }
                }
                return false;
            })
                .slice(0, maxValiadtors)
                .map((r) => r.validator_address);
        });
        mobx_1.makeObservable(this);
        this.bech32Address = bech32Address;
    }
    canFetch() {
        // If bech32 address is empty, it will always fail, so don't need to fetch it.
        return this.bech32Address.length > 0;
    }
    get rewards() {
        var _a, _b;
        const chainInfo = this.chainGetter.getChain(this.chainId);
        const currenciesMap = chainInfo.currencies.reduce((obj, currency) => {
            // TODO: Handle the contract tokens.
            if (!("type" in currency)) {
                obj[currency.coinMinimalDenom] = currency;
            }
            return obj;
        }, {});
        return common_1.StoreUtils.getBalancesFromCurrencies(currenciesMap, (_b = (_a = this.response) === null || _a === void 0 ? void 0 : _a.data.total) !== null && _b !== void 0 ? _b : []);
    }
    get stakableReward() {
        var _a, _b;
        const chainInfo = this.chainGetter.getChain(this.chainId);
        return common_1.StoreUtils.getBalanceFromCurrency(chainInfo.stakeCurrency, (_b = (_a = this.response) === null || _a === void 0 ? void 0 : _a.data.total) !== null && _b !== void 0 ? _b : []);
    }
    get unstakableRewards() {
        var _a, _b;
        const chainInfo = this.chainGetter.getChain(this.chainId);
        const currenciesMap = chainInfo.currencies.reduce((obj, currency) => {
            // TODO: Handle the contract tokens.
            if (!("type" in currency) &&
                currency.coinMinimalDenom !== chainInfo.stakeCurrency.coinMinimalDenom) {
                obj[currency.coinMinimalDenom] = currency;
            }
            return obj;
        }, {});
        return common_1.StoreUtils.getBalancesFromCurrencies(currenciesMap, (_b = (_a = this.response) === null || _a === void 0 ? void 0 : _a.data.total) !== null && _b !== void 0 ? _b : []);
    }
    get pendingRewardValidatorAddresses() {
        var _a;
        if (!this.response) {
            return [];
        }
        const result = [];
        for (const reward of (_a = this.response.data.rewards) !== null && _a !== void 0 ? _a : []) {
            if (reward.reward) {
                for (const r of reward.reward) {
                    const dec = new unit_1.Dec(r.amount);
                    if (dec.truncate().gt(new unit_1.Int(0))) {
                        result.push(reward.validator_address);
                        break;
                    }
                }
            }
        }
        return result;
    }
}
__decorate([
    mobx_1.computed
], ObservableQueryRewardsInner.prototype, "rewards", null);
__decorate([
    mobx_1.computed
], ObservableQueryRewardsInner.prototype, "stakableReward", null);
__decorate([
    mobx_1.computed
], ObservableQueryRewardsInner.prototype, "unstakableRewards", null);
__decorate([
    mobx_1.computed
], ObservableQueryRewardsInner.prototype, "pendingRewardValidatorAddresses", null);
exports.ObservableQueryRewardsInner = ObservableQueryRewardsInner;
class ObservableQueryRewards extends chain_query_1.ObservableChainQueryMap {
    constructor(kvStore, chainId, chainGetter) {
        super(kvStore, chainId, chainGetter, (bech32Address) => {
            return new ObservableQueryRewardsInner(this.kvStore, this.chainId, this.chainGetter, bech32Address);
        });
        this.kvStore = kvStore;
        this.chainId = chainId;
        this.chainGetter = chainGetter;
    }
    getQueryBech32Address(bech32Address) {
        return this.get(bech32Address);
    }
}
exports.ObservableQueryRewards = ObservableQueryRewards;
//# sourceMappingURL=rewards.js.map