"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ObservableQueryStakingPool = void 0;
const chain_query_1 = require("../../chain-query");
const mobx_1 = require("mobx");
const unit_1 = require("@keplr-wallet/unit");
class ObservableQueryStakingPool extends chain_query_1.ObservableChainQuery {
    constructor(kvStore, chainId, chainGetter) {
        super(kvStore, chainId, chainGetter, "/cosmos/staking/v1beta1/pool");
        mobx_1.makeObservable(this);
    }
    get notBondedTokens() {
        const chainInfo = this.chainGetter.getChain(this.chainId);
        if (!this.response) {
            return new unit_1.CoinPretty(chainInfo.stakeCurrency, 0);
        }
        return new unit_1.CoinPretty(chainInfo.stakeCurrency, this.response.data.pool.not_bonded_tokens);
    }
    get bondedTokens() {
        const chainInfo = this.chainGetter.getChain(this.chainId);
        if (!this.response) {
            return new unit_1.CoinPretty(chainInfo.stakeCurrency, 0);
        }
        return new unit_1.CoinPretty(chainInfo.stakeCurrency, this.response.data.pool.bonded_tokens);
    }
}
__decorate([
    mobx_1.computed
], ObservableQueryStakingPool.prototype, "notBondedTokens", null);
__decorate([
    mobx_1.computed
], ObservableQueryStakingPool.prototype, "bondedTokens", null);
exports.ObservableQueryStakingPool = ObservableQueryStakingPool;
//# sourceMappingURL=pool.js.map