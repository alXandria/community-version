"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ObservableQueryStakingParams = void 0;
const chain_query_1 = require("../../chain-query");
const mobx_1 = require("mobx");
class ObservableQueryStakingParams extends chain_query_1.ObservableChainQuery {
    constructor(kvStore, chainId, chainGetter) {
        super(kvStore, chainId, chainGetter, "/cosmos/staking/v1beta1/params");
        mobx_1.makeObservable(this);
    }
    get unbondingTimeSec() {
        if (!this.response) {
            return 0;
        }
        return parseInt(this.response.data.params.unbonding_time.replace("s", ""));
    }
    get maxValidators() {
        var _a, _b;
        return (_b = (_a = this.response) === null || _a === void 0 ? void 0 : _a.data.params.max_validators) !== null && _b !== void 0 ? _b : 0;
    }
    get maxEntries() {
        var _a, _b;
        return (_b = (_a = this.response) === null || _a === void 0 ? void 0 : _a.data.params.max_entries) !== null && _b !== void 0 ? _b : 0;
    }
    get historicalEntries() {
        var _a, _b;
        return (_b = (_a = this.response) === null || _a === void 0 ? void 0 : _a.data.params.historical_entries) !== null && _b !== void 0 ? _b : 0;
    }
    get bondDenom() {
        var _a, _b;
        return (_b = (_a = this.response) === null || _a === void 0 ? void 0 : _a.data.params.bond_denom) !== null && _b !== void 0 ? _b : "";
    }
}
__decorate([
    mobx_1.computed
], ObservableQueryStakingParams.prototype, "unbondingTimeSec", null);
exports.ObservableQueryStakingParams = ObservableQueryStakingParams;
//# sourceMappingURL=params.js.map