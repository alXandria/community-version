import { ObservableChainQuery, ObservableChainQueryMap } from "../../chain-query";
import { UnbondingDelegation, UnbondingDelegations } from "./types";
import { KVStore } from "@keplr-wallet/common";
import { ChainGetter } from "../../../common";
import { CoinPretty, Int } from "@keplr-wallet/unit";
export declare class ObservableQueryUnbondingDelegationsInner extends ObservableChainQuery<UnbondingDelegations> {
    protected bech32Address: string;
    constructor(kvStore: KVStore, chainId: string, chainGetter: ChainGetter, bech32Address: string);
    protected canFetch(): boolean;
    get total(): CoinPretty;
    get unbondingBalances(): {
        validatorAddress: string;
        entries: {
            creationHeight: Int;
            completionTime: string;
            balance: CoinPretty;
        }[];
    }[];
    get unbondings(): UnbondingDelegation[];
}
export declare class ObservableQueryUnbondingDelegations extends ObservableChainQueryMap<UnbondingDelegations> {
    protected readonly kvStore: KVStore;
    protected readonly chainId: string;
    protected readonly chainGetter: ChainGetter;
    constructor(kvStore: KVStore, chainId: string, chainGetter: ChainGetter);
    getQueryBech32Address(bech32Address: string): ObservableQueryUnbondingDelegationsInner;
}
