"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ObservableQueryIBCChannel = exports.ObservableChainQueryIBCChannel = void 0;
const chain_query_1 = require("../../chain-query");
const mobx_1 = require("mobx");
class ObservableChainQueryIBCChannel extends chain_query_1.ObservableChainQuery {
    constructor(kvStore, chainId, chainGetter, portId, channelId) {
        super(kvStore, chainId, chainGetter, `/ibc/core/channel/v1beta1/channels/${channelId}/ports/${portId}`);
        this.portId = portId;
        this.channelId = channelId;
        mobx_1.autorun(() => {
            const chainInfo = this.chainGetter.getChain(this.chainId);
            if (chainInfo.features && chainInfo.features.includes("ibc-go")) {
                this.setUrl(`/ibc/core/channel/v1/channels/${this.channelId}/ports/${this.portId}`);
            }
        });
    }
}
exports.ObservableChainQueryIBCChannel = ObservableChainQueryIBCChannel;
class ObservableQueryIBCChannel extends chain_query_1.ObservableChainQueryMap {
    constructor(kvStore, chainId, chainGetter) {
        super(kvStore, chainId, chainGetter, (key) => {
            const params = JSON.parse(key);
            return new ObservableChainQueryIBCChannel(this.kvStore, this.chainId, this.chainGetter, params.portId, params.channelId);
        });
        this.kvStore = kvStore;
        this.chainId = chainId;
        this.chainGetter = chainGetter;
    }
    getTransferChannel(channelId) {
        return this.getChannel("transfer", channelId);
    }
    getChannel(portId, channelId) {
        // Use key as the JSON encoded Object.
        const key = JSON.stringify({
            portId,
            channelId,
        });
        return this.get(key);
    }
}
exports.ObservableQueryIBCChannel = ObservableQueryIBCChannel;
//# sourceMappingURL=channel.js.map