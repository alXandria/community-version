"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ObservableQueryDenomTrace = exports.ObservableChainQueryDenomTrace = void 0;
const chain_query_1 = require("../../chain-query");
const mobx_1 = require("mobx");
class ObservableChainQueryDenomTrace extends chain_query_1.ObservableChainQuery {
    constructor(kvStore, chainId, chainGetter, hash) {
        super(kvStore, chainId, chainGetter, `/ibc/applications/transfer/v1beta1/denom_traces/${hash}`);
        this.hash = hash;
        mobx_1.autorun(() => {
            const chainInfo = this.chainGetter.getChain(this.chainId);
            if (chainInfo.features && chainInfo.features.includes("ibc-go")) {
                this.setUrl(`/ibc/apps/transfer/v1/denom_traces/${hash}`);
            }
        });
    }
    get paths() {
        if (!this.response) {
            return [];
        }
        const rawPaths = this.response.data.denom_trace.path.split("/");
        if (rawPaths.length % 2 !== 0) {
            console.log("Failed to parse paths", rawPaths);
            return [];
        }
        const rawPathChunks = [];
        for (let i = 0; i < rawPaths.length; i += 2) {
            rawPathChunks.push(rawPaths.slice(i, i + 2));
        }
        return rawPathChunks.map((chunk) => {
            return {
                portId: chunk[0],
                channelId: chunk[1],
            };
        });
    }
    get denom() {
        if (!this.response) {
            return undefined;
        }
        return this.response.data.denom_trace.base_denom;
    }
    get denomTrace() {
        if (!this.response || !this.denom) {
            return undefined;
        }
        return {
            denom: this.denom,
            paths: this.paths,
        };
    }
}
__decorate([
    mobx_1.computed
], ObservableChainQueryDenomTrace.prototype, "paths", null);
__decorate([
    mobx_1.computed
], ObservableChainQueryDenomTrace.prototype, "denomTrace", null);
exports.ObservableChainQueryDenomTrace = ObservableChainQueryDenomTrace;
class ObservableQueryDenomTrace extends chain_query_1.ObservableChainQueryMap {
    constructor(kvStore, chainId, chainGetter) {
        super(kvStore, chainId, chainGetter, (hash) => {
            return new ObservableChainQueryDenomTrace(this.kvStore, this.chainId, this.chainGetter, hash);
        });
        this.kvStore = kvStore;
        this.chainId = chainId;
        this.chainGetter = chainGetter;
    }
    getDenomTrace(hash) {
        return this.get(hash);
    }
}
exports.ObservableQueryDenomTrace = ObservableQueryDenomTrace;
//# sourceMappingURL=denom-trace.js.map