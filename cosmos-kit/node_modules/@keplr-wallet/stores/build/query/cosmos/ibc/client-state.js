"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ObservableQueryIBCClientState = exports.ObservableChainQueryClientState = void 0;
const chain_query_1 = require("../../chain-query");
const mobx_1 = require("mobx");
class ObservableChainQueryClientState extends chain_query_1.ObservableChainQuery {
    constructor(kvStore, chainId, chainGetter, portId, channelId) {
        super(kvStore, chainId, chainGetter, `/ibc/core/channel/v1beta1/channels/${channelId}/ports/${portId}/client_state`);
        mobx_1.autorun(() => {
            const chainInfo = this.chainGetter.getChain(this.chainId);
            if (chainInfo.features && chainInfo.features.includes("ibc-go")) {
                this.setUrl(`/ibc/core/channel/v1/channels/${channelId}/ports/${portId}/client_state`);
            }
        });
    }
    /**
     * clientChainId returns the chain id of the client state if the client state's type is known (currently, only tendermint is supported).
     */
    get clientChainId() {
        var _a, _b;
        if (!this.response) {
            return undefined;
        }
        return (_b = (_a = this.response.data.identified_client_state) === null || _a === void 0 ? void 0 : _a.client_state) === null || _b === void 0 ? void 0 : _b.chain_id;
    }
}
__decorate([
    mobx_1.computed
], ObservableChainQueryClientState.prototype, "clientChainId", null);
exports.ObservableChainQueryClientState = ObservableChainQueryClientState;
class ObservableQueryIBCClientState extends chain_query_1.ObservableChainQueryMap {
    constructor(kvStore, chainId, chainGetter) {
        super(kvStore, chainId, chainGetter, (key) => {
            const params = JSON.parse(key);
            return new ObservableChainQueryClientState(this.kvStore, this.chainId, this.chainGetter, params.portId, params.channelId);
        });
        this.kvStore = kvStore;
        this.chainId = chainId;
        this.chainGetter = chainGetter;
    }
    getClientStateOnTransferPort(channelId) {
        return this.getClientState("transfer", channelId);
    }
    getClientState(portId, channelId) {
        // Use key as the JSON encoded Object.
        const key = JSON.stringify({
            portId,
            channelId,
        });
        return this.get(key);
    }
}
exports.ObservableQueryIBCClientState = ObservableQueryIBCClientState;
//# sourceMappingURL=client-state.js.map