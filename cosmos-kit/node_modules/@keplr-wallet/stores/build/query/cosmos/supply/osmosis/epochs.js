"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ObservableQueryOsmosisEpochs = exports.ObservableQueryOsmosisEpochsInner = void 0;
const chain_query_1 = require("../../../chain-query");
const mobx_1 = require("mobx");
class ObservableQueryOsmosisEpochsInner {
    constructor(identifier, queryEpochs) {
        this.identifier = identifier;
        this.queryEpochs = queryEpochs;
    }
    get epoch() {
        var _a;
        return (_a = this.queryEpochs.response) === null || _a === void 0 ? void 0 : _a.data.epochs.find((epoch) => epoch.identifier === this.identifier);
    }
    get duration() {
        if (!this.epoch) {
            return 0;
        }
        // Actually, the date type of golang protobuf is returned by the unit of seconds.
        return parseInt(this.epoch.duration.replace("s", ""));
    }
    get startTime() {
        if (!this.epoch) {
            return new Date(0);
        }
        return new Date(this.epoch.current_epoch_start_time);
    }
    get endTime() {
        const startTime = this.startTime;
        if (!this.duration) {
            return startTime;
        }
        return new Date(startTime.getTime() + this.duration * 1000);
    }
}
__decorate([
    mobx_1.computed
], ObservableQueryOsmosisEpochsInner.prototype, "epoch", null);
__decorate([
    mobx_1.computed
], ObservableQueryOsmosisEpochsInner.prototype, "duration", null);
__decorate([
    mobx_1.computed
], ObservableQueryOsmosisEpochsInner.prototype, "startTime", null);
__decorate([
    mobx_1.computed
], ObservableQueryOsmosisEpochsInner.prototype, "endTime", null);
exports.ObservableQueryOsmosisEpochsInner = ObservableQueryOsmosisEpochsInner;
class ObservableQueryOsmosisEpochs extends chain_query_1.ObservableChainQuery {
    constructor(kvStore, chainId, chainGetter) {
        super(kvStore, chainId, chainGetter, "/osmosis/epochs/v1beta1/epochs");
        this.map = new Map();
    }
    getEpoch(identifier) {
        if (!this.map.has(identifier)) {
            const inner = new ObservableQueryOsmosisEpochsInner(identifier, this);
            this.map.set(identifier, inner);
        }
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        return this.map.get(identifier);
    }
}
__decorate([
    mobx_1.observable.shallow
], ObservableQueryOsmosisEpochs.prototype, "map", void 0);
exports.ObservableQueryOsmosisEpochs = ObservableQueryOsmosisEpochs;
//# sourceMappingURL=epochs.js.map