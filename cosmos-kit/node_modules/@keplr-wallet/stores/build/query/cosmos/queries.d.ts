import { QueriesSetBase } from "../queries";
import { KVStore } from "@keplr-wallet/common";
import { ChainGetter } from "../../common";
import { ObservableQueryAccount } from "./account";
import { ObservableQueryInflation, ObservableQueryMintingInfation, ObservableQuerySupplyTotal } from "./supply";
import { ObservableQueryDelegations, ObservableQueryRewards, ObservableQueryStakingParams, ObservableQueryStakingPool, ObservableQueryUnbondingDelegations, ObservableQueryValidators } from "./staking";
import { ObservableQueryGovernance, ObservableQueryProposalVote } from "./governance";
import { ObservableQueryDenomTrace, ObservableQueryIBCChannel, ObservableQueryIBCClientState } from "./ibc";
import { ObservableQuerySifchainLiquidityAPY } from "./supply/sifchain";
import { ObservableQuerySpendableBalances } from "./balance";
import { DeepReadonly } from "utility-types";
import { ObservableQueryDistributionParams } from "./distribution";
import { ObservableQueryRPCStatus } from "./status";
export interface CosmosQueries {
    cosmos: CosmosQueriesImpl;
}
export declare const CosmosQueries: {
    use(): (queriesSetBase: QueriesSetBase, kvStore: KVStore, chainId: string, chainGetter: ChainGetter) => CosmosQueries;
};
export declare class CosmosQueriesImpl {
    readonly queryRPCStatus: DeepReadonly<ObservableQueryRPCStatus>;
    readonly queryAccount: DeepReadonly<ObservableQueryAccount>;
    readonly querySpendableBalances: DeepReadonly<ObservableQuerySpendableBalances>;
    readonly queryMint: DeepReadonly<ObservableQueryMintingInfation>;
    readonly queryPool: DeepReadonly<ObservableQueryStakingPool>;
    readonly queryStakingParams: DeepReadonly<ObservableQueryStakingParams>;
    readonly querySupplyTotal: DeepReadonly<ObservableQuerySupplyTotal>;
    readonly queryDistributionParams: DeepReadonly<ObservableQueryDistributionParams>;
    readonly queryInflation: DeepReadonly<ObservableQueryInflation>;
    readonly queryRewards: DeepReadonly<ObservableQueryRewards>;
    readonly queryDelegations: DeepReadonly<ObservableQueryDelegations>;
    readonly queryUnbondingDelegations: DeepReadonly<ObservableQueryUnbondingDelegations>;
    readonly queryValidators: DeepReadonly<ObservableQueryValidators>;
    readonly queryGovernance: DeepReadonly<ObservableQueryGovernance>;
    readonly queryProposalVote: DeepReadonly<ObservableQueryProposalVote>;
    readonly queryIBCClientState: DeepReadonly<ObservableQueryIBCClientState>;
    readonly queryIBCChannel: DeepReadonly<ObservableQueryIBCChannel>;
    readonly queryIBCDenomTrace: DeepReadonly<ObservableQueryDenomTrace>;
    readonly querySifchainAPY: DeepReadonly<ObservableQuerySifchainLiquidityAPY>;
    constructor(base: QueriesSetBase, kvStore: KVStore, chainId: string, chainGetter: ChainGetter);
}
