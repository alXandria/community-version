"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ObservableQuerySpendableBalances = exports.ObservableChainQuerySpendableBalances = void 0;
const chain_query_1 = require("../../chain-query");
const unit_1 = require("@keplr-wallet/unit");
const mobx_1 = require("mobx");
class ObservableChainQuerySpendableBalances extends chain_query_1.ObservableChainQuery {
    constructor(kvStore, chainId, chainGetter, address) {
        super(kvStore, chainId, chainGetter, `/cosmos/bank/v1beta1/spendable_balances/${address}`);
    }
    get balances() {
        if (!this.response) {
            return [];
        }
        const res = [];
        const chainInfo = this.chainGetter.getChain(this.chainId);
        for (const bal of this.response.data.balances) {
            const currency = chainInfo.findCurrency(bal.denom);
            if (currency) {
                res.push(new unit_1.CoinPretty(currency, bal.amount));
            }
        }
        return res;
    }
}
__decorate([
    mobx_1.computed
], ObservableChainQuerySpendableBalances.prototype, "balances", null);
exports.ObservableChainQuerySpendableBalances = ObservableChainQuerySpendableBalances;
class ObservableQuerySpendableBalances extends chain_query_1.ObservableChainQueryMap {
    constructor(kvStore, chainId, chainGetter) {
        super(kvStore, chainId, chainGetter, (denom) => {
            return new ObservableChainQuerySpendableBalances(this.kvStore, this.chainId, this.chainGetter, denom);
        });
        this.kvStore = kvStore;
        this.chainId = chainId;
        this.chainGetter = chainGetter;
    }
    getQueryBech32Address(bech32Address) {
        return this.get(bech32Address);
    }
}
exports.ObservableQuerySpendableBalances = ObservableQuerySpendableBalances;
//# sourceMappingURL=spendable.js.map