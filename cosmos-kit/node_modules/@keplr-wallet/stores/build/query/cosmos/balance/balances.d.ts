import { DenomHelper, KVStore } from "@keplr-wallet/common";
import { ChainGetter, QueryResponse } from "../../../common";
import { CoinPretty } from "@keplr-wallet/unit";
import { BalanceRegistry, ObservableQueryBalanceInner } from "../../balances";
import { ObservableChainQuery } from "../../chain-query";
import { Balances } from "./types";
export declare class ObservableQueryBalanceNative extends ObservableQueryBalanceInner {
    protected readonly nativeBalances: ObservableQueryCosmosBalances;
    constructor(kvStore: KVStore, chainId: string, chainGetter: ChainGetter, denomHelper: DenomHelper, nativeBalances: ObservableQueryCosmosBalances);
    protected canFetch(): boolean;
    get isFetching(): boolean;
    get error(): Readonly<import("../../../common").QueryError<unknown>> | undefined;
    get response(): Readonly<QueryResponse<Balances>> | undefined;
    fetch(): Generator<Generator<Generator<unknown, any, any>, void, unknown>, void, unknown>;
    get balance(): CoinPretty;
}
export declare class ObservableQueryCosmosBalances extends ObservableChainQuery<Balances> {
    protected bech32Address: string;
    protected duplicatedFetchCheck: boolean;
    constructor(kvStore: KVStore, chainId: string, chainGetter: ChainGetter, bech32Address: string);
    protected canFetch(): boolean;
    fetch(): Generator<Generator<unknown, any, any>, void, unknown>;
    protected setResponse(response: Readonly<QueryResponse<Balances>>): void;
}
export declare class ObservableQueryCosmosBalanceRegistry implements BalanceRegistry {
    protected readonly kvStore: KVStore;
    protected nativeBalances: Map<string, ObservableQueryCosmosBalances>;
    constructor(kvStore: KVStore);
    getBalanceInner(chainId: string, chainGetter: ChainGetter, bech32Address: string, minimalDenom: string): ObservableQueryBalanceInner | undefined;
}
