"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ObservableQueryAccount = exports.ObservableQueryAccountInner = void 0;
const chain_query_1 = require("../../chain-query");
const mobx_1 = require("mobx");
const cosmos_1 = require("@keplr-wallet/cosmos");
class ObservableQueryAccountInner extends chain_query_1.ObservableChainQuery {
    constructor(kvStore, chainId, chainGetter, bech32Address) {
        super(kvStore, chainId, chainGetter, `/cosmos/auth/v1beta1/accounts/${bech32Address}`);
        this.bech32Address = bech32Address;
        mobx_1.makeObservable(this);
    }
    get sequence() {
        if (!this.response) {
            return "0";
        }
        // XXX: In launchpad, the status was 200 even if the account not exist.
        //      However, from stargate, the status becomes 404 if the account not exist.
        //      This case has not been dealt with yet.
        //      However, in the case of 404, it will be treated as an error, and in this case the sequence should be 0.
        try {
            const account = cosmos_1.BaseAccount.fromProtoJSON(this.response.data, this.bech32Address);
            return account.getSequence().toString();
        }
        catch (_a) {
            return "0";
        }
    }
    get isVestingAccount() {
        var _a;
        if (!this.response) {
            return false;
        }
        return !!((_a = this.response.data) === null || _a === void 0 ? void 0 : _a.account.base_vesting_account);
    }
}
__decorate([
    mobx_1.computed
], ObservableQueryAccountInner.prototype, "sequence", null);
__decorate([
    mobx_1.computed
], ObservableQueryAccountInner.prototype, "isVestingAccount", null);
exports.ObservableQueryAccountInner = ObservableQueryAccountInner;
class ObservableQueryAccount extends chain_query_1.ObservableChainQueryMap {
    constructor(kvStore, chainId, chainGetter) {
        super(kvStore, chainId, chainGetter, (bech32Address) => {
            return new ObservableQueryAccountInner(this.kvStore, this.chainId, this.chainGetter, bech32Address);
        });
        this.kvStore = kvStore;
        this.chainId = chainId;
        this.chainGetter = chainGetter;
    }
    getQueryBech32Address(bech32Address) {
        return this.get(bech32Address);
    }
}
exports.ObservableQueryAccount = ObservableQueryAccount;
//# sourceMappingURL=index.js.map