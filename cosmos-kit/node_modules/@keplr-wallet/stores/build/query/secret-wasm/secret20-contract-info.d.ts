import { Secret20ContractTokenInfo } from "./types";
import { KVStore } from "@keplr-wallet/common";
import { ObservableChainQueryMap } from "../chain-query";
import { ChainGetter, QueryError } from "../../common";
import { ObservableQuerySecretContractCodeHash } from "./contract-hash";
import { ObservableSecretContractChainQuery } from "./contract-query";
import { Keplr } from "@keplr-wallet/types";
export declare class ObservableQuerySecret20ContactInfoInner extends ObservableSecretContractChainQuery<Secret20ContractTokenInfo> {
    protected readonly apiGetter: () => Promise<Keplr | undefined>;
    protected readonly contractAddress: string;
    protected readonly querySecretContractCodeHash: ObservableQuerySecretContractCodeHash;
    protected nonce?: Uint8Array;
    constructor(kvStore: KVStore, chainId: string, chainGetter: ChainGetter, apiGetter: () => Promise<Keplr | undefined>, contractAddress: string, querySecretContractCodeHash: ObservableQuerySecretContractCodeHash);
    get error(): Readonly<QueryError<unknown>> | undefined;
    get tokenInfo(): Secret20ContractTokenInfo["token_info"] | undefined;
}
export declare class ObservableQuerySecret20ContractInfo extends ObservableChainQueryMap<Secret20ContractTokenInfo> {
    protected readonly kvStore: KVStore;
    protected readonly chainId: string;
    protected readonly chainGetter: ChainGetter;
    protected readonly apiGetter: () => Promise<Keplr | undefined>;
    protected readonly querySecretContractCodeHash: ObservableQuerySecretContractCodeHash;
    constructor(kvStore: KVStore, chainId: string, chainGetter: ChainGetter, apiGetter: () => Promise<Keplr | undefined>, querySecretContractCodeHash: ObservableQuerySecretContractCodeHash);
    getQueryContract(contractAddress: string): ObservableQuerySecret20ContactInfoInner;
}
