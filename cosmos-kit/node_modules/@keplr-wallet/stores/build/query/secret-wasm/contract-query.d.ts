import { ObservableChainQuery } from "../chain-query";
import { KVStore } from "@keplr-wallet/common";
import { ChainGetter } from "../../common";
import { ObservableQuerySecretContractCodeHash } from "./contract-hash";
import { Keplr } from "@keplr-wallet/types";
import { CancelToken } from "axios";
import { QueryResponse } from "../../common";
export declare class ObservableSecretContractChainQuery<T> extends ObservableChainQuery<T> {
    protected readonly apiGetter: () => Promise<Keplr | undefined>;
    protected readonly contractAddress: string;
    protected obj: object;
    protected readonly querySecretContractCodeHash: ObservableQuerySecretContractCodeHash;
    protected keplr?: Keplr;
    protected nonce?: Uint8Array;
    protected _isIniting: boolean;
    constructor(kvStore: KVStore, chainId: string, chainGetter: ChainGetter, apiGetter: () => Promise<Keplr | undefined>, contractAddress: string, obj: object, querySecretContractCodeHash: ObservableQuerySecretContractCodeHash);
    protected setObj(obj: object): void;
    get isFetching(): boolean;
    protected canFetch(): boolean;
    protected initKeplr(): Generator<Promise<Keplr | undefined>, void, Keplr | undefined>;
    protected init(): Generator<Promise<Uint8Array>, void, Uint8Array>;
    protected fetchResponse(cancelToken: CancelToken): Promise<{
        response: QueryResponse<T>;
        headers: any;
    }>;
    protected getCacheKey(): string;
    get contractCodeHash(): string | undefined;
}
