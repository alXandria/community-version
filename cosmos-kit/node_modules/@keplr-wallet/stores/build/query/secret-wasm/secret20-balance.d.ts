import { DenomHelper, KVStore } from "@keplr-wallet/common";
import { ChainGetter, QueryResponse } from "../../common";
import { ObservableQuerySecretContractCodeHash } from "./contract-hash";
import { QueryError } from "../../common";
import { CoinPretty } from "@keplr-wallet/unit";
import { BalanceRegistry, ObservableQueryBalanceInner } from "../balances";
import { ObservableSecretContractChainQuery } from "./contract-query";
import { CancelToken } from "axios";
import { Keplr } from "@keplr-wallet/types";
export declare class ObservableQuerySecret20Balance extends ObservableSecretContractChainQuery<{
    balance: {
        amount: string;
    };
    ["viewing_key_error"]?: {
        msg: string;
    };
}> {
    protected readonly apiGetter: () => Promise<Keplr | undefined>;
    protected readonly contractAddress: string;
    protected readonly bech32Address: string;
    protected readonly parent: ObservableQuerySecret20BalanceInner;
    protected readonly querySecretContractCodeHash: ObservableQuerySecretContractCodeHash;
    constructor(kvStore: KVStore, chainId: string, chainGetter: ChainGetter, apiGetter: () => Promise<Keplr | undefined>, contractAddress: string, bech32Address: string, parent: ObservableQuerySecret20BalanceInner, querySecretContractCodeHash: ObservableQuerySecretContractCodeHash);
    get viewingKey(): string;
    protected canFetch(): boolean;
    protected fetchResponse(cancelToken: CancelToken): Promise<{
        response: QueryResponse<{
            balance: {
                amount: string;
            };
        }>;
        headers: any;
    }>;
}
export declare class ObservableQuerySecret20BalanceInner extends ObservableQueryBalanceInner {
    protected readonly apiGetter: () => Promise<Keplr | undefined>;
    protected readonly bech32Address: string;
    protected readonly querySecretContractCodeHash: ObservableQuerySecretContractCodeHash;
    protected readonly querySecret20Balance: ObservableQuerySecret20Balance;
    constructor(kvStore: KVStore, chainId: string, chainGetter: ChainGetter, apiGetter: () => Promise<Keplr | undefined>, denomHelper: DenomHelper, bech32Address: string, querySecretContractCodeHash: ObservableQuerySecretContractCodeHash);
    protected canFetch(): boolean;
    fetch(): Generator<Generator<unknown, any, any>, void, unknown>;
    get isFetching(): boolean;
    get error(): Readonly<QueryError<unknown>> | undefined;
    get balance(): CoinPretty;
}
export declare class ObservableQuerySecret20BalanceRegistry implements BalanceRegistry {
    protected readonly kvStore: KVStore;
    protected readonly apiGetter: () => Promise<Keplr | undefined>;
    protected readonly querySecretContractCodeHash: ObservableQuerySecretContractCodeHash;
    constructor(kvStore: KVStore, apiGetter: () => Promise<Keplr | undefined>, querySecretContractCodeHash: ObservableQuerySecretContractCodeHash);
    getBalanceInner(chainId: string, chainGetter: ChainGetter, bech32Address: string, minimalDenom: string): ObservableQueryBalanceInner | undefined;
}
