import { QueriesSetBase } from "../queries";
import { ChainGetter } from "../../common";
import { KVStore } from "@keplr-wallet/common";
import { ObservableQuerySecretContractCodeHash } from "./contract-hash";
import { ObservableQuerySecret20ContractInfo } from "./secret20-contract-info";
import { DeepReadonly } from "utility-types";
import { Keplr } from "@keplr-wallet/types";
export interface SecretQueries {
    secret: SecretQueriesImpl;
}
export declare const SecretQueries: {
    use(options: {
        apiGetter: () => Promise<Keplr | undefined>;
    }): (queriesSetBase: QueriesSetBase, kvStore: KVStore, chainId: string, chainGetter: ChainGetter) => SecretQueries;
};
export declare class SecretQueriesImpl {
    readonly querySecretContractCodeHash: DeepReadonly<ObservableQuerySecretContractCodeHash>;
    readonly querySecret20ContractInfo: DeepReadonly<ObservableQuerySecret20ContractInfo>;
    constructor(base: QueriesSetBase, kvStore: KVStore, chainId: string, chainGetter: ChainGetter, apiGetter: () => Promise<Keplr | undefined>);
}
