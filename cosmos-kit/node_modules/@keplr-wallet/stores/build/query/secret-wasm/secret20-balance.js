"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ObservableQuerySecret20BalanceRegistry = exports.ObservableQuerySecret20BalanceInner = exports.ObservableQuerySecret20Balance = void 0;
const mobx_1 = require("mobx");
const common_1 = require("@keplr-wallet/common");
const unit_1 = require("@keplr-wallet/unit");
const balances_1 = require("../balances");
const contract_query_1 = require("./contract-query");
const errors_1 = require("./errors");
class ObservableQuerySecret20Balance extends contract_query_1.ObservableSecretContractChainQuery {
    constructor(kvStore, chainId, chainGetter, apiGetter, contractAddress, bech32Address, parent, querySecretContractCodeHash) {
        super(kvStore, chainId, chainGetter, apiGetter, contractAddress, {}, querySecretContractCodeHash);
        this.apiGetter = apiGetter;
        this.contractAddress = contractAddress;
        this.bech32Address = bech32Address;
        this.parent = parent;
        this.querySecretContractCodeHash = querySecretContractCodeHash;
        mobx_1.makeObservable(this);
        if (!this.viewingKey) {
            this.setError({
                status: 0,
                statusText: "Viewing key is empty",
                message: "Viewing key is empty",
            });
        }
        else {
            this.setObj({
                balance: { address: bech32Address, key: this.viewingKey },
            });
        }
    }
    get viewingKey() {
        const currency = this.parent.currency;
        if ("type" in currency && currency.type === "secret20") {
            return currency.viewingKey;
        }
        return "";
    }
    canFetch() {
        return (super.canFetch() && this.bech32Address !== "" && this.viewingKey !== "");
    }
    fetchResponse(cancelToken) {
        const _super = Object.create(null, {
            fetchResponse: { get: () => super.fetchResponse }
        });
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const { response, headers } = yield _super.fetchResponse.call(this, cancelToken);
            if (response.data["viewing_key_error"]) {
                throw new errors_1.WrongViewingKeyError((_a = response.data["viewing_key_error"]) === null || _a === void 0 ? void 0 : _a.msg);
            }
            return {
                headers,
                response,
            };
        });
    }
}
__decorate([
    mobx_1.computed
], ObservableQuerySecret20Balance.prototype, "viewingKey", null);
exports.ObservableQuerySecret20Balance = ObservableQuerySecret20Balance;
class ObservableQuerySecret20BalanceInner extends balances_1.ObservableQueryBalanceInner {
    constructor(kvStore, chainId, chainGetter, apiGetter, denomHelper, bech32Address, querySecretContractCodeHash) {
        super(kvStore, chainId, chainGetter, 
        // No need to set the url at initial.
        "", denomHelper);
        this.apiGetter = apiGetter;
        this.bech32Address = bech32Address;
        this.querySecretContractCodeHash = querySecretContractCodeHash;
        mobx_1.makeObservable(this);
        this.querySecret20Balance = new ObservableQuerySecret20Balance(kvStore, chainId, chainGetter, this.apiGetter, denomHelper.contractAddress, bech32Address, this, this.querySecretContractCodeHash);
    }
    // This method doesn't have the role because the fetching is actually exeucnted in the `ObservableQuerySecret20Balance`.
    canFetch() {
        return false;
    }
    *fetch() {
        yield this.querySecret20Balance.fetch();
    }
    get isFetching() {
        return (this.querySecretContractCodeHash.getQueryContract(this.denomHelper.contractAddress).isFetching || this.querySecret20Balance.isFetching);
    }
    get error() {
        return (this.querySecretContractCodeHash.getQueryContract(this.denomHelper.contractAddress).error || this.querySecret20Balance.error);
    }
    get balance() {
        const denom = this.denomHelper.denom;
        const chainInfo = this.chainGetter.getChain(this.chainId);
        const currency = chainInfo.findCurrency(denom);
        // TODO: Infer the currency according to its denom (such if denom is `uatom` -> `Atom` with decimal 6)?
        if (!currency) {
            throw new Error(`Unknown currency: ${denom}`);
        }
        if (!this.querySecret20Balance.response ||
            !this.querySecret20Balance.response.data.balance) {
            return new unit_1.CoinPretty(currency, new unit_1.Int(0)).ready(false);
        }
        return new unit_1.CoinPretty(currency, new unit_1.Int(this.querySecret20Balance.response.data.balance.amount));
    }
}
__decorate([
    mobx_1.override
], ObservableQuerySecret20BalanceInner.prototype, "fetch", null);
__decorate([
    mobx_1.computed
], ObservableQuerySecret20BalanceInner.prototype, "balance", null);
exports.ObservableQuerySecret20BalanceInner = ObservableQuerySecret20BalanceInner;
class ObservableQuerySecret20BalanceRegistry {
    constructor(kvStore, apiGetter, querySecretContractCodeHash) {
        this.kvStore = kvStore;
        this.apiGetter = apiGetter;
        this.querySecretContractCodeHash = querySecretContractCodeHash;
    }
    getBalanceInner(chainId, chainGetter, bech32Address, minimalDenom) {
        const denomHelper = new common_1.DenomHelper(minimalDenom);
        if (denomHelper.type === "secret20") {
            return new ObservableQuerySecret20BalanceInner(this.kvStore, chainId, chainGetter, this.apiGetter, denomHelper, bech32Address, this.querySecretContractCodeHash);
        }
    }
}
exports.ObservableQuerySecret20BalanceRegistry = ObservableQuerySecret20BalanceRegistry;
//# sourceMappingURL=secret20-balance.js.map