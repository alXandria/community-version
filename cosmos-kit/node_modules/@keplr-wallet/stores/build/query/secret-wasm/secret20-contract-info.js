"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ObservableQuerySecret20ContractInfo = exports.ObservableQuerySecret20ContactInfoInner = void 0;
const chain_query_1 = require("../chain-query");
const mobx_1 = require("mobx");
const contract_query_1 = require("./contract-query");
class ObservableQuerySecret20ContactInfoInner extends contract_query_1.ObservableSecretContractChainQuery {
    constructor(kvStore, chainId, chainGetter, apiGetter, contractAddress, querySecretContractCodeHash) {
        // Don't need to set the url initially because it can't request without encyption.
        super(kvStore, chainId, chainGetter, apiGetter, contractAddress, { token_info: {} }, querySecretContractCodeHash);
        this.apiGetter = apiGetter;
        this.contractAddress = contractAddress;
        this.querySecretContractCodeHash = querySecretContractCodeHash;
        mobx_1.makeObservable(this);
    }
    get error() {
        return (super.error ||
            this.querySecretContractCodeHash.getQueryContract(this.contractAddress)
                .error);
    }
    get tokenInfo() {
        if (!this.response) {
            return undefined;
        }
        return this.response.data.token_info;
    }
}
__decorate([
    mobx_1.computed
], ObservableQuerySecret20ContactInfoInner.prototype, "tokenInfo", null);
exports.ObservableQuerySecret20ContactInfoInner = ObservableQuerySecret20ContactInfoInner;
class ObservableQuerySecret20ContractInfo extends chain_query_1.ObservableChainQueryMap {
    constructor(kvStore, chainId, chainGetter, apiGetter, querySecretContractCodeHash) {
        super(kvStore, chainId, chainGetter, (contractAddress) => {
            return new ObservableQuerySecret20ContactInfoInner(this.kvStore, this.chainId, this.chainGetter, this.apiGetter, contractAddress, querySecretContractCodeHash);
        });
        this.kvStore = kvStore;
        this.chainId = chainId;
        this.chainGetter = chainGetter;
        this.apiGetter = apiGetter;
        this.querySecretContractCodeHash = querySecretContractCodeHash;
    }
    getQueryContract(contractAddress) {
        return this.get(contractAddress);
    }
}
exports.ObservableQuerySecret20ContractInfo = ObservableQuerySecret20ContractInfo;
//# sourceMappingURL=secret20-contract-info.js.map