"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ObservableChainQueryRPCMap = exports.ObservableChainQueryRPC = void 0;
const common_1 = require("../common");
const axios_1 = __importDefault(require("axios"));
const mobx_1 = require("mobx");
const common_2 = require("../common");
class ObservableChainQueryRPC extends common_1.ObservableQuery {
    constructor(kvStore, chainId, chainGetter, url) {
        const chainInfo = chainGetter.getChain(chainId);
        const instance = axios_1.default.create(Object.assign({
            baseURL: chainInfo.rpc,
        }, chainInfo.rpcConfig));
        super(kvStore, instance, url);
        this._chainId = chainId;
        this.chainGetter = chainGetter;
    }
    get instance() {
        const chainInfo = this.chainGetter.getChain(this.chainId);
        return axios_1.default.create(Object.assign({
            baseURL: chainInfo.rpc,
        }, chainInfo.rpcConfig));
    }
    get chainId() {
        return this._chainId;
    }
}
__decorate([
    mobx_1.override
], ObservableChainQueryRPC.prototype, "instance", null);
exports.ObservableChainQueryRPC = ObservableChainQueryRPC;
class ObservableChainQueryRPCMap extends common_2.HasMapStore {
    constructor(kvStore, chainId, chainGetter, creater) {
        super(creater);
        this.kvStore = kvStore;
        this.chainId = chainId;
        this.chainGetter = chainGetter;
    }
}
exports.ObservableChainQueryRPCMap = ObservableChainQueryRPCMap;
//# sourceMappingURL=chain-rpc-query.js.map