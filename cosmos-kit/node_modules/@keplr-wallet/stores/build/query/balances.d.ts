import { ObservableChainQuery } from "./chain-query";
import { DenomHelper, KVStore } from "@keplr-wallet/common";
import { ChainGetter } from "../common";
import { CoinPretty } from "@keplr-wallet/unit";
import { AppCurrency } from "@keplr-wallet/types";
import { HasMapStore } from "../common";
export declare abstract class ObservableQueryBalanceInner<T = unknown, E = unknown> extends ObservableChainQuery<T, E> {
    protected readonly denomHelper: DenomHelper;
    protected constructor(kvStore: KVStore, chainId: string, chainGetter: ChainGetter, url: string, denomHelper: DenomHelper);
    abstract get balance(): CoinPretty;
    get currency(): AppCurrency;
}
export interface BalanceRegistry {
    getBalanceInner(chainId: string, chainGetter: ChainGetter, bech32Address: string, minimalDenom: string): ObservableQueryBalanceInner | undefined;
}
export declare class ObservableQueryBalancesInner {
    protected readonly kvStore: KVStore;
    protected readonly chainId: string;
    protected readonly chainGetter: ChainGetter;
    protected readonly balanceRegistries: BalanceRegistry[];
    protected bech32Address: string;
    protected balanceMap: Map<string, ObservableQueryBalanceInner>;
    constructor(kvStore: KVStore, chainId: string, chainGetter: ChainGetter, balanceRegistries: BalanceRegistry[], bech32Address: string);
    fetch(): void;
    protected getBalanceInner(currency: AppCurrency): ObservableQueryBalanceInner;
    get stakable(): ObservableQueryBalanceInner;
    /**
     * 알려진 모든 Currency들의 balance를 반환환다.
     */
    get balances(): ObservableQueryBalanceInner[];
    /**
     * 알려진 모든 Currency들 중 0 이상의 잔고를 가진 balance를 반환환다.
     */
    get positiveBalances(): ObservableQueryBalanceInner[];
    /**
     * Returns that the balances that are not native tokens.
     * Native token means that the token that exists on the `bank` module.
     */
    get nonNativeBalances(): ObservableQueryBalanceInner[];
    /**
     * Returns that the balances that are native tokens with greater than 0 balance.
     * Native token means that the token that exists on the `bank` module.
     */
    get positiveNativeUnstakables(): ObservableQueryBalanceInner[];
    get unstakables(): ObservableQueryBalanceInner[];
    readonly getBalanceFromCurrency: (currency: AppCurrency) => CoinPretty;
}
export declare class ObservableQueryBalances extends HasMapStore<ObservableQueryBalancesInner> {
    protected readonly kvStore: KVStore;
    protected readonly chainId: string;
    protected readonly chainGetter: ChainGetter;
    protected balanceRegistries: BalanceRegistry[];
    constructor(kvStore: KVStore, chainId: string, chainGetter: ChainGetter);
    addBalanceRegistry(registry: BalanceRegistry): void;
    getQueryBech32Address(bech32Address: string): ObservableQueryBalancesInner;
}
