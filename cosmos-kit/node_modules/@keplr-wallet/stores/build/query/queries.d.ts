import { KVStore } from "@keplr-wallet/common";
import { DeepReadonly, UnionToIntersection } from "utility-types";
import { ObservableQueryBalances } from "./balances";
import { ChainGetter, IObject, ChainedFunctionifyTuple } from "../common";
export interface QueriesSetBase {
    readonly queryBalances: DeepReadonly<ObservableQueryBalances>;
}
export declare const createQueriesSetBase: (kvStore: KVStore, chainId: string, chainGetter: ChainGetter) => QueriesSetBase;
export interface IQueriesStore<T extends IObject = {}> {
    get(chainId: string): DeepReadonly<QueriesSetBase & T>;
}
export declare class QueriesStore<Injects extends Array<IObject>> {
    protected readonly kvStore: KVStore;
    protected readonly chainGetter: ChainGetter;
    protected queriesMap: Map<string, QueriesSetBase & UnionToIntersection<Injects[number]>>;
    protected readonly queriesCreators: ChainedFunctionifyTuple<QueriesSetBase, [
        KVStore,
        string,
        ChainGetter
    ], Injects>;
    constructor(kvStore: KVStore, chainGetter: ChainGetter, ...queriesCreators: ChainedFunctionifyTuple<QueriesSetBase, [
        KVStore,
        string,
        ChainGetter
    ], Injects>);
    get(chainId: string): DeepReadonly<QueriesSetBase & UnionToIntersection<Injects[number]>>;
}
