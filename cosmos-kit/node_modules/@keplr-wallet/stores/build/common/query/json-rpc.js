"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ObservableJsonRPCQueryMap = exports.ObservableJsonRPCQuery = void 0;
const index_1 = require("./index");
const mobx_1 = require("mobx");
const crypto_1 = require("@keplr-wallet/crypto");
const buffer_1 = require("buffer/");
const map_1 = require("../map");
/**
 * Experimental implementation for json rpc.
 */
class ObservableJsonRPCQuery extends index_1.ObservableQuery {
    constructor(kvStore, instance, url, method, params, options = {}) {
        super(kvStore, instance, url, options);
        this.method = method;
        this._params = params;
        mobx_1.makeObservable(this);
    }
    get params() {
        return this._params;
    }
    setParams(params) {
        this._params = params;
        this.fetch();
    }
    fetchResponse(cancelToken) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield this.instance.post(this.url, {
                jsonrpc: "2.0",
                id: "1",
                method: this.method,
                params: this.params,
            }, {
                cancelToken,
            });
            if (result.data.error && result.data.error.message) {
                throw new Error(result.data.error.message);
            }
            if (!result.data.result) {
                throw new Error("Unknown error");
            }
            return {
                headers: result.headers,
                response: {
                    data: result.data.result,
                    status: result.status,
                    staled: false,
                    timestamp: Date.now(),
                },
            };
        });
    }
    getCacheKey() {
        const paramsHash = buffer_1.Buffer.from(crypto_1.Hash.sha256(buffer_1.Buffer.from(JSON.stringify(this.params))).slice(0, 8)).toString("hex");
        return `${super.getCacheKey()}-${this.method}-${paramsHash}`;
    }
}
__decorate([
    mobx_1.observable.ref
], ObservableJsonRPCQuery.prototype, "_params", void 0);
__decorate([
    mobx_1.action
], ObservableJsonRPCQuery.prototype, "setParams", null);
exports.ObservableJsonRPCQuery = ObservableJsonRPCQuery;
class ObservableJsonRPCQueryMap extends map_1.HasMapStore {
    constructor(creater) {
        super(creater);
    }
}
exports.ObservableJsonRPCQueryMap = ObservableJsonRPCQueryMap;
//# sourceMappingURL=json-rpc.js.map