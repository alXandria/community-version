import { ObservableQuery, QueryOptions, QueryResponse } from "./index";
import { KVStore } from "@keplr-wallet/common";
import { AxiosInstance, CancelToken } from "axios";
import { HasMapStore } from "../map";
/**
 * Experimental implementation for json rpc.
 */
export declare class ObservableJsonRPCQuery<T = unknown, E = unknown> extends ObservableQuery<T, E> {
    protected readonly method: string;
    protected _params: readonly any[];
    constructor(kvStore: KVStore, instance: AxiosInstance, url: string, method: string, params: readonly any[], options?: Partial<QueryOptions>);
    get params(): readonly any[];
    protected setParams(params: readonly any[]): void;
    protected fetchResponse(cancelToken: CancelToken): Promise<{
        response: QueryResponse<T>;
        headers: any;
    }>;
    protected getCacheKey(): string;
}
export declare class ObservableJsonRPCQueryMap<T = unknown, E = unknown> extends HasMapStore<ObservableJsonRPCQuery<T, E>> {
    constructor(creater: (key: string) => ObservableJsonRPCQuery<T, E>);
}
