import { InteractionStore } from "./interaction";
import { PermissionData } from "@keplr-wallet/background";
import { HasMapStore } from "../../common";
import { MessageRequester } from "@keplr-wallet/router";
export declare class Secret20ViewingKeyPermissionInnerStore {
    protected readonly chainId: string;
    protected readonly contractAddress: string;
    protected readonly requester: MessageRequester;
    protected _origins: string[];
    constructor(chainId: string, contractAddress: string, requester: MessageRequester);
    get origins(): string[];
    removeOrigin(origin: string): Generator<Promise<void> | Generator<Promise<string[]>, void, string[]>, void, unknown>;
    protected refreshOrigins(): Generator<Promise<string[]>, void, string[]>;
}
export declare class BasicAccessPermissionInnerStore {
    protected readonly chainId: string;
    protected readonly requester: MessageRequester;
    protected _origins: string[];
    constructor(chainId: string, requester: MessageRequester);
    get origins(): string[];
    addOrigin(origin: string): Generator<Promise<void> | Generator<Promise<string[]>, void, string[]>, void, unknown>;
    removeOrigin(origin: string): Generator<Promise<void> | Generator<Promise<string[]>, void, string[]>, void, unknown>;
    protected refreshOrigins(): Generator<Promise<string[]>, void, string[]>;
}
export declare class PermissionStore extends HasMapStore<BasicAccessPermissionInnerStore | Secret20ViewingKeyPermissionInnerStore> {
    protected readonly interactionStore: InteractionStore;
    protected readonly requester: MessageRequester;
    protected _isLoading: boolean;
    constructor(interactionStore: InteractionStore, requester: MessageRequester);
    getBasicAccessInfo(chainId: string): BasicAccessPermissionInnerStore;
    getOriginPermittedChains(origin: string, type: string): Promise<string[]>;
    getSecret20ViewingKeyAccessInfo(chainId: string, contractAddress: string): Secret20ViewingKeyPermissionInnerStore;
    get waitingBasicAccessPermissions(): {
        id: string;
        data: {
            chainIds: string[];
            origins: string[];
        };
    }[];
    get waitingSecret20ViewingKeyAccessPermissions(): {
        id: string;
        data: {
            chainIds: string[];
            contractAddress: string;
            origins: string[];
        };
    }[];
    get waitingDatas(): import("@keplr-wallet/background").InteractionWaitingData<PermissionData>[];
    approve(id: string): Generator<Generator<Promise<void>, void, unknown>, void, unknown>;
    reject(id: string): Generator<Generator<Promise<void>, void, unknown>, void, unknown>;
    rejectAll(): Generator<Generator<Generator<Promise<void>, void, unknown>, void, unknown>, void, unknown>;
    get isLoading(): boolean;
}
