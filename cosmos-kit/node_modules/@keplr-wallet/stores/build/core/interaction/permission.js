"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PermissionStore = exports.BasicAccessPermissionInnerStore = exports.Secret20ViewingKeyPermissionInnerStore = void 0;
const background_1 = require("@keplr-wallet/background");
const mobx_1 = require("mobx");
const common_1 = require("../../common");
const router_1 = require("@keplr-wallet/router");
const common_2 = require("@keplr-wallet/common");
class Secret20ViewingKeyPermissionInnerStore {
    constructor(chainId, contractAddress, requester) {
        this.chainId = chainId;
        this.contractAddress = contractAddress;
        this.requester = requester;
        this._origins = [];
        mobx_1.makeObservable(this);
        this.refreshOrigins();
    }
    get origins() {
        return this._origins;
    }
    *removeOrigin(origin) {
        yield this.requester.sendMessage(router_1.BACKGROUND_PORT, new background_1.RemovePermissionOrigin(this.chainId, background_1.getSecret20ViewingKeyPermissionType(this.contractAddress), origin));
        yield this.refreshOrigins();
    }
    *refreshOrigins() {
        this._origins = yield* common_2.toGenerator(this.requester.sendMessage(router_1.BACKGROUND_PORT, new background_1.GetPermissionOriginsMsg(this.chainId, background_1.getSecret20ViewingKeyPermissionType(this.contractAddress))));
    }
}
__decorate([
    mobx_1.observable.ref
], Secret20ViewingKeyPermissionInnerStore.prototype, "_origins", void 0);
__decorate([
    mobx_1.flow
], Secret20ViewingKeyPermissionInnerStore.prototype, "removeOrigin", null);
__decorate([
    mobx_1.flow
], Secret20ViewingKeyPermissionInnerStore.prototype, "refreshOrigins", null);
exports.Secret20ViewingKeyPermissionInnerStore = Secret20ViewingKeyPermissionInnerStore;
class BasicAccessPermissionInnerStore {
    constructor(chainId, requester) {
        this.chainId = chainId;
        this.requester = requester;
        this._origins = [];
        mobx_1.makeObservable(this);
        this.refreshOrigins();
    }
    get origins() {
        return this._origins;
    }
    *addOrigin(origin) {
        yield this.requester.sendMessage(router_1.BACKGROUND_PORT, new background_1.AddPermissionOrigin(this.chainId, background_1.getBasicAccessPermissionType(), origin));
        yield this.refreshOrigins();
    }
    *removeOrigin(origin) {
        yield this.requester.sendMessage(router_1.BACKGROUND_PORT, new background_1.RemovePermissionOrigin(this.chainId, background_1.getBasicAccessPermissionType(), origin));
        yield this.refreshOrigins();
    }
    *refreshOrigins() {
        this._origins = yield* common_2.toGenerator(this.requester.sendMessage(router_1.BACKGROUND_PORT, new background_1.GetPermissionOriginsMsg(this.chainId, background_1.getBasicAccessPermissionType())));
    }
}
__decorate([
    mobx_1.observable.ref
], BasicAccessPermissionInnerStore.prototype, "_origins", void 0);
__decorate([
    mobx_1.flow
], BasicAccessPermissionInnerStore.prototype, "addOrigin", null);
__decorate([
    mobx_1.flow
], BasicAccessPermissionInnerStore.prototype, "removeOrigin", null);
__decorate([
    mobx_1.flow
], BasicAccessPermissionInnerStore.prototype, "refreshOrigins", null);
exports.BasicAccessPermissionInnerStore = BasicAccessPermissionInnerStore;
class PermissionStore extends common_1.HasMapStore {
    constructor(interactionStore, requester) {
        super((key) => {
            const data = JSON.parse(key);
            if (data.type === "basicAccess") {
                return new BasicAccessPermissionInnerStore(data.chainId, this.requester);
            }
            else {
                return new Secret20ViewingKeyPermissionInnerStore(data.chainId, data.contractAddress, this.requester);
            }
        });
        this.interactionStore = interactionStore;
        this.requester = requester;
        this._isLoading = false;
        mobx_1.makeObservable(this);
    }
    getBasicAccessInfo(chainId) {
        const key = JSON.stringify({
            type: "basicAccess",
            chainId,
            contractAddress: "",
        });
        return this.get(key);
    }
    getOriginPermittedChains(origin, type) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.requester.sendMessage(router_1.BACKGROUND_PORT, new background_1.GetOriginPermittedChainsMsg(origin, type));
        });
    }
    getSecret20ViewingKeyAccessInfo(chainId, contractAddress) {
        const key = JSON.stringify({
            type: "viewingKey",
            chainId,
            contractAddress,
        });
        return this.get(key);
    }
    get waitingBasicAccessPermissions() {
        const datas = this.waitingDatas;
        const result = [];
        for (const data of datas) {
            if (background_1.isBasicAccessPermissionType(data.data.type)) {
                result.push({
                    id: data.id,
                    data: {
                        chainIds: data.data.chainIds,
                        origins: data.data.origins,
                    },
                });
            }
        }
        return result;
    }
    get waitingSecret20ViewingKeyAccessPermissions() {
        const datas = this.waitingDatas;
        const result = [];
        for (const data of datas) {
            if (background_1.isSecret20ViewingKeyPermissionType(data.data.type)) {
                result.push({
                    id: data.id,
                    data: {
                        chainIds: data.data.chainIds,
                        contractAddress: background_1.splitSecret20ViewingKeyPermissionType(data.data.type),
                        origins: data.data.origins,
                    },
                });
            }
        }
        return result;
    }
    get waitingDatas() {
        return this.interactionStore.getDatas(background_1.INTERACTION_TYPE_PERMISSION);
    }
    *approve(id) {
        this._isLoading = true;
        try {
            yield this.interactionStore.approve(background_1.INTERACTION_TYPE_PERMISSION, id, {});
        }
        finally {
            this._isLoading = false;
        }
    }
    *reject(id) {
        this._isLoading = true;
        try {
            yield this.interactionStore.reject(background_1.INTERACTION_TYPE_PERMISSION, id);
        }
        finally {
            this._isLoading = false;
        }
    }
    *rejectAll() {
        this._isLoading = true;
        try {
            yield this.interactionStore.rejectAll(background_1.INTERACTION_TYPE_PERMISSION);
        }
        finally {
            this._isLoading = false;
        }
    }
    get isLoading() {
        return this._isLoading;
    }
}
__decorate([
    mobx_1.observable
], PermissionStore.prototype, "_isLoading", void 0);
__decorate([
    mobx_1.computed
], PermissionStore.prototype, "waitingBasicAccessPermissions", null);
__decorate([
    mobx_1.computed
], PermissionStore.prototype, "waitingSecret20ViewingKeyAccessPermissions", null);
__decorate([
    mobx_1.flow
], PermissionStore.prototype, "approve", null);
__decorate([
    mobx_1.flow
], PermissionStore.prototype, "reject", null);
__decorate([
    mobx_1.flow
], PermissionStore.prototype, "rejectAll", null);
exports.PermissionStore = PermissionStore;
//# sourceMappingURL=permission.js.map