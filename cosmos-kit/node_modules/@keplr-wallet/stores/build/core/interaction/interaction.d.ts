import { Router, MessageRequester } from "@keplr-wallet/router";
import { InteractionForegroundHandler, InteractionWaitingData } from "@keplr-wallet/background";
export declare class InteractionStore implements InteractionForegroundHandler {
    protected readonly router: Router;
    protected readonly msgRequester: MessageRequester;
    protected datas: Map<string, InteractionWaitingData[]>;
    protected events: Map<string, Omit<InteractionWaitingData, "id" | "isInternal">[]>;
    constructor(router: Router, msgRequester: MessageRequester);
    getDatas<T = unknown>(type: string): InteractionWaitingData<T>[];
    getEvents<T = unknown>(type: string): Omit<InteractionWaitingData<T>, "id" | "isInternal">[];
    onInteractionDataReceived(data: InteractionWaitingData): void;
    onEventDataReceived(data: Omit<InteractionWaitingData, "id" | "isInternal">): void;
    approve(type: string, id: string, result: unknown): Generator<Promise<void>, void, unknown>;
    /**
     * Approve the interaction without removing the data on the store.
     * Actually, this method is used for the sign interaction to wait the actual signing ends.
     * You should make sure that remove the data manually.
     * @param id
     * @param result
     */
    approveWithoutRemovingData(id: string, result: unknown): Generator<Promise<void>, void, unknown>;
    reject(type: string, id: string): Generator<Promise<void>, void, unknown>;
    rejectAll(type: string): Generator<Generator<Promise<void>, void, unknown>, void, unknown>;
    removeData(type: string, id: string): void;
    clearEvent(type: string): void;
}
