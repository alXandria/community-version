"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChainSuggestStore = void 0;
const background_1 = require("@keplr-wallet/background");
const mobx_1 = require("mobx");
class ChainSuggestStore {
    constructor(interactionStore) {
        this.interactionStore = interactionStore;
        this._isLoading = false;
        mobx_1.makeObservable(this);
    }
    get waitingSuggestedChainInfo() {
        const datas = this.interactionStore.getDatas(background_1.SuggestChainInfoMsg.type());
        if (datas.length > 0) {
            return datas[0];
        }
    }
    *approve() {
        this._isLoading = true;
        try {
            const data = this.waitingSuggestedChainInfo;
            if (data) {
                yield this.interactionStore.approve(data.type, data.id, {});
            }
        }
        finally {
            this._isLoading = false;
        }
    }
    *reject() {
        this._isLoading = true;
        try {
            const data = this.waitingSuggestedChainInfo;
            if (data) {
                yield this.interactionStore.reject(data.type, data.id);
            }
        }
        finally {
            this._isLoading = false;
        }
    }
    *rejectAll() {
        this._isLoading = true;
        try {
            yield this.interactionStore.rejectAll(background_1.SuggestChainInfoMsg.type());
        }
        finally {
            this._isLoading = false;
        }
    }
    get isLoading() {
        return this._isLoading;
    }
}
__decorate([
    mobx_1.observable
], ChainSuggestStore.prototype, "_isLoading", void 0);
__decorate([
    mobx_1.flow
], ChainSuggestStore.prototype, "approve", null);
__decorate([
    mobx_1.flow
], ChainSuggestStore.prototype, "reject", null);
__decorate([
    mobx_1.flow
], ChainSuggestStore.prototype, "rejectAll", null);
exports.ChainSuggestStore = ChainSuggestStore;
//# sourceMappingURL=chain-suggest.js.map