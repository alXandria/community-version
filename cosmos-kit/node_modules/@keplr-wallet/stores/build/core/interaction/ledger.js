"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LedgerInitStore = void 0;
const mobx_1 = require("mobx");
const router_1 = require("@keplr-wallet/router");
const background_1 = require("@keplr-wallet/background");
const common_1 = require("@keplr-wallet/common");
class LedgerInitStore {
    constructor(interactionStore, msgRequester) {
        this.interactionStore = interactionStore;
        this.msgRequester = msgRequester;
        this._isLoading = false;
        this._isWebHID = false;
        mobx_1.makeObservable(this);
        this.fetchIsWebHID();
    }
    *fetchIsWebHID() {
        this._isWebHID = yield* common_1.toGenerator(this.msgRequester.sendMessage(router_1.BACKGROUND_PORT, new background_1.LedgerGetWebHIDFlagMsg()));
    }
    *setWebHID(flag) {
        yield this.msgRequester.sendMessage(router_1.BACKGROUND_PORT, new background_1.LedgerSetWebHIDFlagMsg(flag));
        yield this.fetchIsWebHID();
    }
    get isWebHID() {
        return this._isWebHID;
    }
    get isGetPubKeySucceeded() {
        const datas = this.interactionStore.getEvents("ledger-init");
        for (const data of datas) {
            if (data.data.event === "get-pubkey" && data.data.success) {
                return true;
            }
        }
        return false;
    }
    get isSignCompleted() {
        return this.isSignSucceeded || this.isSignRejected;
    }
    get isSignSucceeded() {
        const datas = this.interactionStore.getEvents("ledger-init");
        for (const data of datas) {
            if (data.data.event === "sign" && data.data.success) {
                return true;
            }
        }
        return false;
    }
    get isSignRejected() {
        const datas = this.interactionStore.getEvents("ledger-init");
        for (const data of datas) {
            if (data.data.event === "sign" && !data.data.success) {
                return true;
            }
        }
        return false;
    }
    get isInitAborted() {
        const datas = this.interactionStore.getEvents("ledger-init");
        for (const data of datas) {
            if (data.data.event === "init-aborted") {
                return true;
            }
        }
        return false;
    }
    get isInitNeeded() {
        const datas = this.interactionStore.getDatas("ledger-init");
        for (const data of datas) {
            if (data.data.event === "init-failed") {
                return true;
            }
        }
        return false;
    }
    *resume(...initArgs) {
        this._isLoading = true;
        try {
            const datas = this.interactionStore.getDatas("ledger-init");
            for (const data of datas) {
                if (data.data.event === "init-failed") {
                    // Approve resuming the initing ledger.
                    yield this.interactionStore.approve("ledger-init", data.id, {
                        initArgs,
                    });
                    break;
                }
            }
        }
        finally {
            this._isLoading = false;
        }
    }
    *resumeAll(...initArgs) {
        this._isLoading = true;
        try {
            const datas = this.interactionStore.getDatas("ledger-init");
            for (const data of datas) {
                if (data.data.event === "init-failed") {
                    // Approve resuming the initing ledger.
                    yield this.interactionStore.approve("ledger-init", data.id, {
                        initArgs,
                    });
                }
            }
        }
        finally {
            this._isLoading = false;
        }
    }
    *abort() {
        this._isLoading = true;
        try {
            const datas = this.interactionStore.getDatas("ledger-init");
            for (const data of datas) {
                if (data.data.event === "init-failed") {
                    // Approve resuming the initing ledger.
                    yield this.interactionStore.approve("ledger-init", data.id, {
                        abort: true,
                    });
                    break;
                }
            }
        }
        finally {
            this._isLoading = false;
        }
    }
    *abortAll() {
        this._isLoading = true;
        try {
            const datas = this.interactionStore.getDatas("ledger-init");
            for (const data of datas) {
                if (data.data.event === "init-failed") {
                    // Approve resuming the initing ledger.
                    yield this.interactionStore.approve("ledger-init", data.id, {
                        abort: true,
                    });
                }
            }
        }
        finally {
            this._isLoading = false;
        }
    }
    get isLoading() {
        return this._isLoading;
    }
}
__decorate([
    mobx_1.observable
], LedgerInitStore.prototype, "_isLoading", void 0);
__decorate([
    mobx_1.observable
], LedgerInitStore.prototype, "_isWebHID", void 0);
__decorate([
    mobx_1.flow
], LedgerInitStore.prototype, "fetchIsWebHID", null);
__decorate([
    mobx_1.flow
], LedgerInitStore.prototype, "setWebHID", null);
__decorate([
    mobx_1.computed
], LedgerInitStore.prototype, "isGetPubKeySucceeded", null);
__decorate([
    mobx_1.computed
], LedgerInitStore.prototype, "isSignCompleted", null);
__decorate([
    mobx_1.computed
], LedgerInitStore.prototype, "isSignSucceeded", null);
__decorate([
    mobx_1.computed
], LedgerInitStore.prototype, "isSignRejected", null);
__decorate([
    mobx_1.computed
], LedgerInitStore.prototype, "isInitAborted", null);
__decorate([
    mobx_1.computed
], LedgerInitStore.prototype, "isInitNeeded", null);
__decorate([
    mobx_1.flow
], LedgerInitStore.prototype, "resume", null);
__decorate([
    mobx_1.flow
], LedgerInitStore.prototype, "resumeAll", null);
__decorate([
    mobx_1.flow
], LedgerInitStore.prototype, "abort", null);
__decorate([
    mobx_1.flow
], LedgerInitStore.prototype, "abortAll", null);
exports.LedgerInitStore = LedgerInitStore;
//# sourceMappingURL=ledger.js.map