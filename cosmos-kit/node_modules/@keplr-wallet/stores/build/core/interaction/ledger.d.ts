import { InteractionStore } from "./interaction";
import { MessageRequester } from "@keplr-wallet/router";
export declare type LedgerInitDataType = {
    event: "get-pubkey";
    success: boolean;
} | {
    event: "sign";
    success: boolean;
} | {
    event: "init-failed";
} | {
    event: "init-aborted";
};
export declare class LedgerInitStore {
    protected readonly interactionStore: InteractionStore;
    protected readonly msgRequester: MessageRequester;
    protected _isLoading: boolean;
    protected _isWebHID: boolean;
    constructor(interactionStore: InteractionStore, msgRequester: MessageRequester);
    fetchIsWebHID(): Generator<Promise<boolean>, void, boolean>;
    setWebHID(flag: boolean): Generator<Promise<void> | Generator<Promise<boolean>, void, boolean>, void, unknown>;
    get isWebHID(): boolean;
    get isGetPubKeySucceeded(): boolean;
    get isSignCompleted(): boolean;
    get isSignSucceeded(): boolean;
    get isSignRejected(): boolean;
    get isInitAborted(): boolean;
    get isInitNeeded(): boolean;
    resume(...initArgs: any[]): Generator<Generator<Promise<void>, void, unknown>, void, unknown>;
    resumeAll(...initArgs: any[]): Generator<Generator<Promise<void>, void, unknown>, void, unknown>;
    abort(): Generator<Generator<Promise<void>, void, unknown>, void, unknown>;
    abortAll(): Generator<Generator<Promise<void>, void, unknown>, void, unknown>;
    get isLoading(): boolean;
}
