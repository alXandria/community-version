import { InteractionStore } from "./interaction";
import { StdSignDoc } from "@cosmjs/launchpad";
import { InteractionWaitingData } from "@keplr-wallet/background";
import { SignDocWrapper } from "@keplr-wallet/cosmos";
import { EthSignType, KeplrSignOptions } from "@keplr-wallet/types";
export declare class SignInteractionStore {
    protected readonly interactionStore: InteractionStore;
    protected _isLoading: boolean;
    constructor(interactionStore: InteractionStore);
    protected get waitingDatas(): InteractionWaitingData<{
        msgOrigin: string;
        chainId: string;
        mode: "amino";
        signer: string;
        signDoc: StdSignDoc;
        signOptions: KeplrSignOptions;
        isADR36SignDoc: boolean;
        isADR36WithString?: boolean | undefined;
        ethSignType?: EthSignType | undefined;
    } | {
        msgOrigin: string;
        chainId: string;
        mode: "direct";
        signer: string;
        signDocBytes: Uint8Array;
        signOptions: KeplrSignOptions;
    }>[];
    get waitingData(): InteractionWaitingData<{
        chainId: string;
        msgOrigin: string;
        signer: string;
        signDocWrapper: SignDocWrapper;
        signOptions: KeplrSignOptions;
        isADR36WithString?: boolean;
        ethSignType?: EthSignType;
    }> | undefined;
    protected isEnded(): boolean;
    protected clearEnded(): void;
    protected waitEnd(): Promise<void>;
    approveAndWaitEnd(newSignDocWrapper: SignDocWrapper): Generator<Promise<void> | Generator<Promise<void>, void, unknown>, void, unknown>;
    reject(): Generator<Generator<Promise<void>, void, unknown>, void, unknown>;
    rejectAll(): Generator<Generator<Generator<Promise<void>, void, unknown>, void, unknown>, void, unknown>;
    protected rejectWithId(id: string): Generator<Generator<Promise<void>, void, unknown>, void, unknown>;
    get isLoading(): boolean;
}
