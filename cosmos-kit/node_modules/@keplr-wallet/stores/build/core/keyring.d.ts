import { MessageRequester } from "@keplr-wallet/router";
import { BIP44HDPath, KeyRingStatus, MultiKeyStoreInfoWithSelected, ExportKeyRingData } from "@keplr-wallet/background";
import { InteractionStore } from "./interaction";
import { ChainGetter } from "../common";
import { BIP44 } from "@keplr-wallet/types";
import { DeepReadonly } from "utility-types";
export declare class KeyRingSelectablesStore {
    protected readonly chainGetter: ChainGetter;
    protected readonly requester: MessageRequester;
    protected readonly chainId: string;
    protected readonly keyRingStore: KeyRingStore;
    isInitializing: boolean;
    protected _isKeyStoreCoinTypeSet: boolean;
    _selectables: {
        path: BIP44;
        bech32Address: string;
    }[];
    constructor(chainGetter: ChainGetter, requester: MessageRequester, chainId: string, keyRingStore: KeyRingStore);
    get needSelectCoinType(): boolean;
    get selectables(): DeepReadonly<{
        path: BIP44;
        bech32Address: string;
    }[]>;
    refresh(): Generator<Promise<{
        readonly path: BIP44;
        readonly bech32Address: string;
    }[]> | Generator<Promise<KeyRingStatus> | Promise<{
        multiKeyStoreInfo: MultiKeyStoreInfoWithSelected;
    }>, void, (KeyRingStatus.NOTLOADED & {
        multiKeyStoreInfo: MultiKeyStoreInfoWithSelected;
    }) | (KeyRingStatus.EMPTY & {
        multiKeyStoreInfo: MultiKeyStoreInfoWithSelected;
    }) | (KeyRingStatus.LOCKED & {
        multiKeyStoreInfo: MultiKeyStoreInfoWithSelected;
    }) | (KeyRingStatus.UNLOCKED & {
        multiKeyStoreInfo: MultiKeyStoreInfoWithSelected;
    })>, void, {
        readonly path: BIP44;
        readonly bech32Address: string;
    }[]>;
}
export declare class KeyRingStore {
    protected readonly eventDispatcher: {
        dispatchEvent: (type: string) => void;
    };
    readonly defaultKdf: "scrypt" | "sha256" | "pbkdf2";
    protected readonly chainGetter: ChainGetter;
    protected readonly requester: MessageRequester;
    protected readonly interactionStore: InteractionStore;
    status: KeyRingStatus;
    multiKeyStoreInfo: MultiKeyStoreInfoWithSelected;
    protected selectablesMap: Map<string, KeyRingSelectablesStore>;
    protected keyStoreChangedListeners: (() => void)[];
    constructor(eventDispatcher: {
        dispatchEvent: (type: string) => void;
    }, defaultKdf: "scrypt" | "sha256" | "pbkdf2", chainGetter: ChainGetter, requester: MessageRequester, interactionStore: InteractionStore);
    get keyRingType(): string;
    createMnemonicKey(mnemonic: string, password: string, meta: Record<string, string>, bip44HDPath: BIP44HDPath, kdf?: "scrypt" | "sha256" | "pbkdf2"): Generator<Promise<{
        status: KeyRingStatus;
        multiKeyStoreInfo: MultiKeyStoreInfoWithSelected;
    }>, void, {
        status: KeyRingStatus;
        multiKeyStoreInfo: MultiKeyStoreInfoWithSelected;
    }>;
    createPrivateKey(privateKey: Uint8Array, password: string, meta: Record<string, string>, kdf?: "scrypt" | "sha256" | "pbkdf2"): Generator<Promise<{
        status: KeyRingStatus;
        multiKeyStoreInfo: MultiKeyStoreInfoWithSelected;
    }>, void, {
        status: KeyRingStatus;
        multiKeyStoreInfo: MultiKeyStoreInfoWithSelected;
    }>;
    createLedgerKey(password: string, meta: Record<string, string>, bip44HDPath: BIP44HDPath, kdf?: "scrypt" | "sha256" | "pbkdf2"): Generator<Promise<{
        status: KeyRingStatus;
        multiKeyStoreInfo: MultiKeyStoreInfoWithSelected;
    }>, void, {
        status: KeyRingStatus;
        multiKeyStoreInfo: MultiKeyStoreInfoWithSelected;
    }>;
    addMnemonicKey(mnemonic: string, meta: Record<string, string>, bip44HDPath: BIP44HDPath, kdf?: "scrypt" | "sha256" | "pbkdf2"): Generator<Promise<{
        multiKeyStoreInfo: MultiKeyStoreInfoWithSelected;
    }>, void, {
        multiKeyStoreInfo: MultiKeyStoreInfoWithSelected;
    }>;
    addPrivateKey(privateKey: Uint8Array, meta: Record<string, string>, kdf?: "scrypt" | "sha256" | "pbkdf2"): Generator<Promise<{
        multiKeyStoreInfo: MultiKeyStoreInfoWithSelected;
    }>, void, {
        multiKeyStoreInfo: MultiKeyStoreInfoWithSelected;
    }>;
    addLedgerKey(meta: Record<string, string>, bip44HDPath: BIP44HDPath, kdf?: "scrypt" | "sha256" | "pbkdf2"): Generator<Promise<{
        multiKeyStoreInfo: MultiKeyStoreInfoWithSelected;
    }>, void, {
        multiKeyStoreInfo: MultiKeyStoreInfoWithSelected;
    }>;
    changeKeyRing(index: number): Generator<Promise<{
        multiKeyStoreInfo: MultiKeyStoreInfoWithSelected;
    }>, void, {
        multiKeyStoreInfo: MultiKeyStoreInfoWithSelected;
    }>;
    lock(): Generator<Promise<{
        status: KeyRingStatus;
    }>, void, {
        status: KeyRingStatus;
    }>;
    unlock(password: string): Generator<Generator<Promise<void>, void, unknown> | Promise<{
        status: KeyRingStatus;
    }>, void, {
        status: KeyRingStatus;
    }>;
    rejectAll(): Generator<Generator<Generator<Promise<void>, void, unknown>, void, unknown>, void, unknown>;
    protected restore(): Generator<Promise<{
        status: KeyRingStatus;
        multiKeyStoreInfo: MultiKeyStoreInfoWithSelected;
    }>, void, {
        status: KeyRingStatus;
        multiKeyStoreInfo: MultiKeyStoreInfoWithSelected;
    }>;
    showKeyRing(index: number, password: string): Promise<string>;
    deleteKeyRing(index: number, password: string): Generator<Promise<{
        status: KeyRingStatus;
        multiKeyStoreInfo: MultiKeyStoreInfoWithSelected;
    }>, void, {
        status: KeyRingStatus;
        multiKeyStoreInfo: MultiKeyStoreInfoWithSelected;
    }>;
    updateNameKeyRing(index: number, name: string): Generator<Promise<{
        multiKeyStoreInfo: MultiKeyStoreInfoWithSelected;
    }>, void, {
        multiKeyStoreInfo: MultiKeyStoreInfoWithSelected;
    }>;
    checkPassword(password: string): Promise<boolean>;
    getKeyStoreSelectables(chainId: string): KeyRingSelectablesStore;
    setKeyStoreCoinType(chainId: string, coinType: number): Generator<Promise<KeyRingStatus> | Promise<{
        multiKeyStoreInfo: MultiKeyStoreInfoWithSelected;
    }>, void, (KeyRingStatus.NOTLOADED & {
        multiKeyStoreInfo: MultiKeyStoreInfoWithSelected;
    }) | (KeyRingStatus.EMPTY & {
        multiKeyStoreInfo: MultiKeyStoreInfoWithSelected;
    }) | (KeyRingStatus.LOCKED & {
        multiKeyStoreInfo: MultiKeyStoreInfoWithSelected;
    }) | (KeyRingStatus.UNLOCKED & {
        multiKeyStoreInfo: MultiKeyStoreInfoWithSelected;
    })>;
    exportKeyRingDatas(password: string): Promise<ExportKeyRingData[]>;
    protected dispatchKeyStoreChangeEvent(): void;
    addKeyStoreChangedListener(listener: () => void): void;
    removeKeyStoreChangedListener(listener: () => void): void;
}
