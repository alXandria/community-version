import { HasMapStore } from "../common";
import { MessageRequester } from "@keplr-wallet/router";
import { AppCurrency, ChainInfo } from "@keplr-wallet/types";
import { DeepReadonly } from "utility-types";
import { ChainStore } from "../chain";
import { InteractionStore } from "./interaction";
export declare class TokensStoreInner {
    protected readonly eventListener: {
        addEventListener: (type: string, fn: () => unknown) => void;
    };
    protected readonly chainStore: ChainStore<any>;
    protected readonly chainId: string;
    protected readonly requester: MessageRequester;
    protected _tokens: AppCurrency[];
    constructor(eventListener: {
        addEventListener: (type: string, fn: () => unknown) => void;
    }, chainStore: ChainStore<any>, chainId: string, requester: MessageRequester);
    get tokens(): DeepReadonly<AppCurrency[]>;
    refreshTokens(): Generator<Promise<AppCurrency[]>, void, AppCurrency[]>;
    addToken(currency: AppCurrency): Generator<Promise<void> | Generator<Promise<AppCurrency[]>, void, AppCurrency[]>, void, unknown>;
    removeToken(currency: AppCurrency): Generator<Promise<void> | Generator<Promise<AppCurrency[]>, void, AppCurrency[]>, void, unknown>;
}
export declare class TokensStore<C extends ChainInfo = ChainInfo> extends HasMapStore<TokensStoreInner> {
    protected readonly eventListener: {
        addEventListener: (type: string, fn: () => unknown) => void;
    };
    protected readonly chainStore: ChainStore<C>;
    protected readonly requester: MessageRequester;
    protected readonly interactionStore: InteractionStore;
    protected prevTokens: Map<string, AppCurrency[]>;
    constructor(eventListener: {
        addEventListener: (type: string, fn: () => unknown) => void;
    }, chainStore: ChainStore<C>, requester: MessageRequester, interactionStore: InteractionStore);
    getTokensOf(chainId: string): TokensStoreInner;
    get waitingSuggestedToken(): import("@keplr-wallet/background").InteractionWaitingData<{
        chainId: string;
        contractAddress: string;
        viewingKey?: string | undefined;
    }> | undefined;
    approveSuggestedToken(appCurrency: AppCurrency): Generator<Generator<Promise<void>, void, unknown> | Generator<Promise<AppCurrency[]>, void, AppCurrency[]>, void, unknown>;
    rejectSuggestedToken(): Generator<Generator<Promise<void>, void, unknown>, void, unknown>;
    rejectAllSuggestedTokens(): Generator<Generator<Generator<Promise<void>, void, unknown>, void, unknown>, void, unknown>;
}
