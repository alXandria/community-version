import { ObservableQuery, QueryResponse } from "../common";
import { CoinGeckoSimplePrice } from "./types";
import { CancelToken } from "axios";
import { KVStore } from "@keplr-wallet/common";
import { CoinPretty, PricePretty } from "@keplr-wallet/unit";
import { FiatCurrency } from "@keplr-wallet/types";
import { DeepReadonly } from "utility-types";
export declare class CoinGeckoPriceStore extends ObservableQuery<CoinGeckoSimplePrice> {
    protected coinIds: string[];
    protected vsCurrencies: string[];
    protected _defaultVsCurrency: string;
    protected _supportedVsCurrencies: {
        [vsCurrency: string]: FiatCurrency | undefined;
    };
    constructor(kvStore: KVStore, supportedVsCurrencies: {
        [vsCurrency: string]: FiatCurrency;
    }, defaultVsCurrency: string);
    get defaultVsCurrency(): string;
    setDefaultVsCurrency(defaultVsCurrency: string): void;
    restoreDefaultVsCurrency(): Generator<Promise<string | undefined>, void, string | undefined>;
    saveDefaultVsCurrency(): Promise<void>;
    get supportedVsCurrencies(): DeepReadonly<{
        [vsCurrency: string]: FiatCurrency | undefined;
    }>;
    getFiatCurrency(currency: string): FiatCurrency | undefined;
    protected canFetch(): boolean;
    protected fetchResponse(cancelToken: CancelToken): Promise<{
        response: QueryResponse<CoinGeckoSimplePrice>;
        headers: any;
    }>;
    protected refetch(): void;
    protected getCacheKey(): string;
    getPrice(coinId: string, vsCurrency?: string): number | undefined;
    calculatePrice(coin: CoinPretty, vsCurrrency?: string): PricePretty | undefined;
}
