"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Cw1SubkeyCosmWasmClient = void 0;
const cw1cosmwasmclient_1 = require("./cw1cosmwasmclient");
class Cw1SubkeyCosmWasmClient extends cw1cosmwasmclient_1.Cw1CosmWasmClient {
    async setAdmins(admins, memo = "") {
        const handleMsg = {
            update_admins: {
                admins: admins,
            },
        };
        return this.execute(this.cw1ContractAddress, handleMsg, memo);
    }
    async getAdmins() {
        const { admins } = await this.queryContractSmart(this.cw1ContractAddress, { admin_list: {} });
        return admins;
    }
    async isAdmin(address = this.signerAddress) {
        const admins = await this.getAdmins();
        return admins.includes(address);
    }
    async getAllAllowances() {
        const response = await this.queryContractSmart(this.cw1ContractAddress, {
            all_allowances: {},
        });
        return response.allowances;
    }
    async getAllowance(address = this.signerAddress) {
        return this.queryContractSmart(this.cw1ContractAddress, {
            allowance: { spender: address },
        });
    }
    async getAllPermissions() {
        const response = await this.queryContractSmart(this.cw1ContractAddress, {
            all_permissions: {},
        });
        return response.permissions;
    }
    async getPermissions(address = this.signerAddress) {
        return this.queryContractSmart(this.cw1ContractAddress, {
            permissions: { spender: address },
        });
    }
    async addAdmin(address, memo = "") {
        const admins = await this.getAdmins();
        const newAdmins = admins.includes(address) ? admins : [...admins, address];
        return this.setAdmins(newAdmins, memo);
    }
    async removeAdmin(address, memo = "") {
        const admins = await this.getAdmins();
        const newAdmins = admins.filter((admin) => admin !== address);
        return this.setAdmins(newAdmins, memo);
    }
    async increaseAllowance(address, amount, expires, memo = "") {
        const handleMsg = {
            increase_allowance: {
                spender: address,
                amount: amount,
                expires: expires,
            },
        };
        return this.execute(this.cw1ContractAddress, handleMsg, memo);
    }
    async decreaseAllowance(address, amount, expires, memo = "") {
        const handleMsg = {
            decrease_allowance: {
                spender: address,
                amount: amount,
                expires: expires,
            },
        };
        return this.execute(this.cw1ContractAddress, handleMsg, memo);
    }
    async setPermissions(address, permissions, memo = "") {
        const handleMsg = {
            set_permissions: {
                spender: address,
                permissions: permissions,
            },
        };
        return this.execute(this.cw1ContractAddress, handleMsg, memo);
    }
}
exports.Cw1SubkeyCosmWasmClient = Cw1SubkeyCosmWasmClient;
//# sourceMappingURL=cw1subkeycosmwasmclient.js.map