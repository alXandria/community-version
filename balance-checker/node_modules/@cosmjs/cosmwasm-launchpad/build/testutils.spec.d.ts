/** An internal testing type. SigningCosmWasmClient has a similar but different interface */
export interface ContractUploadInstructions {
    /** The wasm bytecode */
    readonly data: Uint8Array;
    readonly source?: string;
    readonly builder?: string;
}
export declare function getHackatom(): ContractUploadInstructions;
export declare function makeRandomAddress(): string;
export declare const tendermintIdMatcher: RegExp;
/** @see https://rgxdb.com/r/1NUN74O6 */
export declare const base64Matcher: RegExp;
export declare const bech32AddressMatcher: RegExp;
export declare const alice: {
    mnemonic: string;
    pubkey0: {
        type: string;
        value: string;
    };
    address0: string;
    address1: string;
    address2: string;
    address3: string;
    address4: string;
};
/** Unused account */
export declare const unused: {
    pubkey: {
        type: string;
        value: string;
    };
    address: string;
    accountNumber: number;
    sequence: number;
};
/** Deployed as part of scripts/launchpad/init.sh */
export declare const deployedHackatom: {
    codeId: number;
    source: string;
    builder: string;
    checksum: string;
    instances: {
        beneficiary: string;
        address: string;
        label: string;
    }[];
};
/** Deployed as part of scripts/launchpad/init.sh */
export declare const deployedErc20: {
    codeId: number;
    source: string;
    builder: string;
    checksum: string;
    instances: string[];
};
/** Deployed as part of scripts/launchpad/init.sh */
export declare const deployedCw3: {
    codeId: number;
    source: string;
    builder: string;
    instances: string[];
};
/** Deployed as part of scripts/launchpad/init.sh */
export declare const deployedCw1: {
    codeId: number;
    source: string;
    builder: string;
    instances: string[];
};
export declare const launchpad: {
    endpoint: string;
    chainId: string;
    validator: {
        address: string;
    };
};
export declare function launchpadEnabled(): boolean;
export declare function pendingWithoutLaunchpad(): void;
export declare function erc20Enabled(): boolean;
export declare function pendingWithoutErc20(): void;
export declare function cw3Enabled(): boolean;
export declare function pendingWithoutCw3(): void;
export declare function cw1Enabled(): boolean;
export declare function pendingWithoutCw1(): void;
/** Returns first element. Throws if array has a different length than 1. */
export declare function fromOneElementArray<T>(elements: ArrayLike<T>): T;
