"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable @typescript-eslint/naming-convention */
const launchpad_1 = require("@cosmjs/launchpad");
const cw1cosmwasmclient_1 = require("./cw1cosmwasmclient");
const testutils_spec_1 = require("./testutils.spec");
describe("Cw1CosmWasmClient", () => {
    const contractAddress = testutils_spec_1.deployedCw1.instances[0];
    const defaultToAddress = testutils_spec_1.makeRandomAddress();
    const defaultMsg = {
        bank: {
            send: {
                from_address: contractAddress,
                to_address: defaultToAddress,
                amount: launchpad_1.coins(1, "ucosm"),
            },
        },
    };
    describe("constructor", () => {
        it("can be constructed", async () => {
            const wallet = await launchpad_1.Secp256k1HdWallet.fromMnemonic(testutils_spec_1.alice.mnemonic);
            const client = new cw1cosmwasmclient_1.Cw1CosmWasmClient(testutils_spec_1.launchpad.endpoint, testutils_spec_1.alice.address0, wallet, contractAddress);
            expect(client).toBeTruthy();
        });
    });
    describe("canSend", () => {
        it("returns true if client signer can send", async () => {
            testutils_spec_1.pendingWithoutLaunchpad();
            testutils_spec_1.pendingWithoutCw1();
            const wallet = await launchpad_1.Secp256k1HdWallet.fromMnemonic(testutils_spec_1.alice.mnemonic);
            const client = new cw1cosmwasmclient_1.Cw1CosmWasmClient(testutils_spec_1.launchpad.endpoint, testutils_spec_1.alice.address0, wallet, testutils_spec_1.deployedCw1.instances[0]);
            const result = await client.canSend(defaultMsg);
            expect(result).toEqual(true);
        });
        it("returns false if client signer cannot send", async () => {
            testutils_spec_1.pendingWithoutLaunchpad();
            testutils_spec_1.pendingWithoutCw1();
            const wallet = await launchpad_1.Secp256k1HdWallet.fromMnemonic(testutils_spec_1.alice.mnemonic);
            const client = new cw1cosmwasmclient_1.Cw1CosmWasmClient(testutils_spec_1.launchpad.endpoint, testutils_spec_1.alice.address1, wallet, testutils_spec_1.deployedCw1.instances[0]);
            const result = await client.canSend(defaultMsg);
            expect(result).toEqual(false);
        });
        it("returns true if supplied signer can send", async () => {
            testutils_spec_1.pendingWithoutLaunchpad();
            testutils_spec_1.pendingWithoutCw1();
            const wallet = await launchpad_1.Secp256k1HdWallet.fromMnemonic(testutils_spec_1.alice.mnemonic);
            const client = new cw1cosmwasmclient_1.Cw1CosmWasmClient(testutils_spec_1.launchpad.endpoint, testutils_spec_1.alice.address1, wallet, testutils_spec_1.deployedCw1.instances[0]);
            const result = await client.canSend(defaultMsg, testutils_spec_1.alice.address0);
            expect(result).toEqual(true);
        });
        it("returns false if supplied signer cannot send", async () => {
            testutils_spec_1.pendingWithoutLaunchpad();
            testutils_spec_1.pendingWithoutCw1();
            const wallet = await launchpad_1.Secp256k1HdWallet.fromMnemonic(testutils_spec_1.alice.mnemonic);
            const client = new cw1cosmwasmclient_1.Cw1CosmWasmClient(testutils_spec_1.launchpad.endpoint, testutils_spec_1.alice.address0, wallet, testutils_spec_1.deployedCw1.instances[0]);
            const result = await client.canSend(defaultMsg, testutils_spec_1.alice.address1);
            expect(result).toEqual(false);
        });
    });
    describe("executeCw1", () => {
        it("works", async () => {
            testutils_spec_1.pendingWithoutLaunchpad();
            testutils_spec_1.pendingWithoutCw1();
            const wallet = await launchpad_1.Secp256k1HdWallet.fromMnemonic(testutils_spec_1.alice.mnemonic);
            const client = new cw1cosmwasmclient_1.Cw1CosmWasmClient(testutils_spec_1.launchpad.endpoint, testutils_spec_1.alice.address0, wallet, testutils_spec_1.deployedCw1.instances[0]);
            const result = await client.executeCw1([defaultMsg]);
            expect(result.transactionHash).toBeTruthy();
        });
    });
});
//# sourceMappingURL=cw1cosmwasmclient.spec.js.map