"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Cw3CosmWasmClient = exports.Vote = void 0;
const signingcosmwasmclient_1 = require("./signingcosmwasmclient");
/**
 * @see https://github.com/CosmWasm/cosmwasm-plus/blob/v0.3.2/packages/cw3/src/msg.rs#L35
 */
var Vote;
(function (Vote) {
    Vote["Yes"] = "yes";
    Vote["No"] = "no";
    Vote["Abstain"] = "abstain";
    Vote["Veto"] = "veto";
})(Vote = exports.Vote || (exports.Vote = {}));
class Cw3CosmWasmClient extends signingcosmwasmclient_1.SigningCosmWasmClient {
    constructor(apiUrl, signerAddress, signer, cw3ContractAddress, gasPrice, gasLimits, broadcastMode) {
        super(apiUrl, signerAddress, signer, gasPrice, gasLimits, broadcastMode);
        this.cw3ContractAddress = cw3ContractAddress;
    }
    getAccount(address) {
        return super.getAccount(address || this.cw3ContractAddress);
    }
    getThreshold() {
        return this.queryContractSmart(this.cw3ContractAddress, { threshold: {} });
    }
    getProposal(proposalId) {
        return this.queryContractSmart(this.cw3ContractAddress, { proposal: { proposal_id: proposalId } });
    }
    listProposals({ startAfter, limit, } = {}) {
        return this.queryContractSmart(this.cw3ContractAddress, {
            list_proposals: {
                start_after: startAfter,
                limit: limit,
            },
        });
    }
    reverseProposals({ startBefore, limit, } = {}) {
        return this.queryContractSmart(this.cw3ContractAddress, {
            reverse_proposals: {
                start_before: startBefore,
                limit: limit,
            },
        });
    }
    getVote(proposalId, voter) {
        return this.queryContractSmart(this.cw3ContractAddress, {
            vote: {
                proposal_id: proposalId,
                voter: voter,
            },
        });
    }
    listVotes(proposalId, { startAfter, limit } = {}) {
        return this.queryContractSmart(this.cw3ContractAddress, {
            list_votes: {
                proposal_id: proposalId,
                start_after: startAfter,
                limit: limit,
            },
        });
    }
    getVoter(address) {
        return this.queryContractSmart(this.cw3ContractAddress, {
            voter: {
                address: address,
            },
        });
    }
    listVoters({ startAfter, limit } = {}) {
        return this.queryContractSmart(this.cw3ContractAddress, {
            list_voters: {
                start_after: startAfter,
                limit: limit,
            },
        });
    }
    createMultisigProposal(title, description, msgs, earliest, latest, memo = "") {
        const handleMsg = {
            propose: {
                title: title,
                description: description,
                msgs: msgs,
                earliest: earliest,
                latest: latest,
            },
        };
        return this.execute(this.cw3ContractAddress, handleMsg, memo);
    }
    voteMultisigProposal(proposalId, vote, memo = "") {
        const handleMsg = {
            vote: {
                proposal_id: proposalId,
                vote: vote,
            },
        };
        return this.execute(this.cw3ContractAddress, handleMsg, memo);
    }
    executeMultisigProposal(proposalId, memo = "") {
        const handleMsg = { execute: { proposal_id: proposalId } };
        return this.execute(this.cw3ContractAddress, handleMsg, memo);
    }
    closeMultisigProposal(proposalId, memo = "") {
        const handleMsg = { close: { proposal_id: proposalId } };
        return this.execute(this.cw3ContractAddress, handleMsg, memo);
    }
}
exports.Cw3CosmWasmClient = Cw3CosmWasmClient;
//# sourceMappingURL=cw3cosmwasmclient.js.map