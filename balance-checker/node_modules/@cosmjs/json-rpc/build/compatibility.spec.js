"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const compatibility_1 = require("./compatibility");
describe("json", () => {
    function sum(a, b) {
        return a + b;
    }
    describe("isJsonCompatibleValue", () => {
        it("returns true for primitive types", () => {
            expect(compatibility_1.isJsonCompatibleValue(null)).toEqual(true);
            expect(compatibility_1.isJsonCompatibleValue(0)).toEqual(true);
            expect(compatibility_1.isJsonCompatibleValue(1)).toEqual(true);
            expect(compatibility_1.isJsonCompatibleValue("abc")).toEqual(true);
            expect(compatibility_1.isJsonCompatibleValue(true)).toEqual(true);
            expect(compatibility_1.isJsonCompatibleValue(false)).toEqual(true);
        });
        it("returns true for arrays", () => {
            expect(compatibility_1.isJsonCompatibleValue([1, 2, 3])).toEqual(true);
            expect(compatibility_1.isJsonCompatibleValue([1, "2", true, null])).toEqual(true);
            expect(compatibility_1.isJsonCompatibleValue([1, "2", true, null, [1, "2", true, null]])).toEqual(true);
            expect(compatibility_1.isJsonCompatibleValue([{ a: 123 }])).toEqual(true);
        });
        it("returns true for simple dicts", () => {
            expect(compatibility_1.isJsonCompatibleValue({ a: 123 })).toEqual(true);
            expect(compatibility_1.isJsonCompatibleValue({ a: "abc" })).toEqual(true);
            expect(compatibility_1.isJsonCompatibleValue({ a: true })).toEqual(true);
            expect(compatibility_1.isJsonCompatibleValue({ a: null })).toEqual(true);
        });
        it("returns true for dict with array", () => {
            expect(compatibility_1.isJsonCompatibleValue({ a: [1, 2, 3] })).toEqual(true);
            expect(compatibility_1.isJsonCompatibleValue({ a: [1, "2", true, null] })).toEqual(true);
        });
        it("returns true for nested dicts", () => {
            expect(compatibility_1.isJsonCompatibleValue({ a: { b: 123 } })).toEqual(true);
        });
        it("returns false for functions", () => {
            expect(compatibility_1.isJsonCompatibleValue(sum)).toEqual(false);
        });
        it("returns true for empty dicts", () => {
            expect(compatibility_1.isJsonCompatibleValue({})).toEqual(true);
        });
    });
    describe("isJsonCompatibleArray", () => {
        it("returns false for primitive types", () => {
            expect(compatibility_1.isJsonCompatibleArray(null)).toEqual(false);
            expect(compatibility_1.isJsonCompatibleArray(undefined)).toEqual(false);
            expect(compatibility_1.isJsonCompatibleArray(0)).toEqual(false);
            expect(compatibility_1.isJsonCompatibleArray(1)).toEqual(false);
            expect(compatibility_1.isJsonCompatibleArray("abc")).toEqual(false);
            expect(compatibility_1.isJsonCompatibleArray(true)).toEqual(false);
            expect(compatibility_1.isJsonCompatibleArray(false)).toEqual(false);
        });
        it("returns true for arrays", () => {
            expect(compatibility_1.isJsonCompatibleArray([1, 2, 3])).toEqual(true);
            expect(compatibility_1.isJsonCompatibleArray([1, "2", true, null])).toEqual(true);
            expect(compatibility_1.isJsonCompatibleArray([1, "2", true, null, [1, "2", true, null]])).toEqual(true);
            expect(compatibility_1.isJsonCompatibleArray([{ a: 123 }])).toEqual(true);
        });
        it("returns false for dicts", () => {
            expect(compatibility_1.isJsonCompatibleArray({ a: 123 })).toEqual(false);
            expect(compatibility_1.isJsonCompatibleArray({ a: "abc" })).toEqual(false);
            expect(compatibility_1.isJsonCompatibleArray({ a: true })).toEqual(false);
            expect(compatibility_1.isJsonCompatibleArray({ a: null })).toEqual(false);
        });
        it("returns false for functions", () => {
            expect(compatibility_1.isJsonCompatibleArray(sum)).toEqual(false);
        });
    });
    describe("isJsonCompatibleDictionary", () => {
        it("returns false for primitive types", () => {
            expect(compatibility_1.isJsonCompatibleDictionary(null)).toEqual(false);
            expect(compatibility_1.isJsonCompatibleDictionary(undefined)).toEqual(false);
            expect(compatibility_1.isJsonCompatibleDictionary(0)).toEqual(false);
            expect(compatibility_1.isJsonCompatibleDictionary(1)).toEqual(false);
            expect(compatibility_1.isJsonCompatibleDictionary("abc")).toEqual(false);
            expect(compatibility_1.isJsonCompatibleDictionary(true)).toEqual(false);
            expect(compatibility_1.isJsonCompatibleDictionary(false)).toEqual(false);
        });
        it("returns false for other objects", () => {
            expect(compatibility_1.isJsonCompatibleDictionary(new Uint8Array([0x00]))).toEqual(false);
            expect(compatibility_1.isJsonCompatibleDictionary(/123/)).toEqual(false);
            expect(compatibility_1.isJsonCompatibleDictionary(new Date())).toEqual(false);
        });
        it("returns false for arrays", () => {
            expect(compatibility_1.isJsonCompatibleDictionary([1, 2, 3])).toEqual(false);
        });
        it("returns false for functions", () => {
            expect(compatibility_1.isJsonCompatibleDictionary(sum)).toEqual(false);
        });
        it("returns true for empty dicts", () => {
            expect(compatibility_1.isJsonCompatibleDictionary({})).toEqual(true);
        });
        it("returns true for simple dicts", () => {
            expect(compatibility_1.isJsonCompatibleDictionary({ a: 123 })).toEqual(true);
            expect(compatibility_1.isJsonCompatibleDictionary({ a: "abc" })).toEqual(true);
            expect(compatibility_1.isJsonCompatibleDictionary({ a: true })).toEqual(true);
            expect(compatibility_1.isJsonCompatibleDictionary({ a: null })).toEqual(true);
        });
        it("returns true for dict with array", () => {
            expect(compatibility_1.isJsonCompatibleDictionary({ a: [1, 2, 3] })).toEqual(true);
            expect(compatibility_1.isJsonCompatibleDictionary({ a: [1, "2", true, null] })).toEqual(true);
        });
        it("returns true for nested dicts", () => {
            expect(compatibility_1.isJsonCompatibleDictionary({ a: { b: 123 } })).toEqual(true);
        });
    });
});
//# sourceMappingURL=compatibility.spec.js.map