{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.QueryClientImpl = exports.QueryDenomMetadataResponse = exports.QueryDenomMetadataRequest = exports.QueryDenomsMetadataResponse = exports.QueryDenomsMetadataRequest = exports.QueryParamsResponse = exports.QueryParamsRequest = exports.QuerySupplyOfResponse = exports.QuerySupplyOfRequest = exports.QueryTotalSupplyResponse = exports.QueryTotalSupplyRequest = exports.QueryAllBalancesResponse = exports.QueryAllBalancesRequest = exports.QueryBalanceResponse = exports.QueryBalanceRequest = exports.protobufPackage = void 0;\n/* eslint-disable */\n\nconst long_1 = __importDefault(require(\"long\"));\n\nconst minimal_1 = __importDefault(require(\"protobufjs/minimal\"));\n\nconst coin_1 = require(\"../../../cosmos/base/v1beta1/coin\");\n\nconst pagination_1 = require(\"../../../cosmos/base/query/v1beta1/pagination\");\n\nconst bank_1 = require(\"../../../cosmos/bank/v1beta1/bank\");\n\nexports.protobufPackage = \"cosmos.bank.v1beta1\";\nconst baseQueryBalanceRequest = {\n  address: \"\",\n  denom: \"\"\n};\nexports.QueryBalanceRequest = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.address !== \"\") {\n      writer.uint32(10).string(message.address);\n    }\n\n    if (message.denom !== \"\") {\n      writer.uint32(18).string(message.denom);\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseQueryBalanceRequest);\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.address = reader.string();\n          break;\n\n        case 2:\n          message.denom = reader.string();\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseQueryBalanceRequest);\n\n    if (object.address !== undefined && object.address !== null) {\n      message.address = String(object.address);\n    } else {\n      message.address = \"\";\n    }\n\n    if (object.denom !== undefined && object.denom !== null) {\n      message.denom = String(object.denom);\n    } else {\n      message.denom = \"\";\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.address !== undefined && (obj.address = message.address);\n    message.denom !== undefined && (obj.denom = message.denom);\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseQueryBalanceRequest);\n\n    if (object.address !== undefined && object.address !== null) {\n      message.address = object.address;\n    } else {\n      message.address = \"\";\n    }\n\n    if (object.denom !== undefined && object.denom !== null) {\n      message.denom = object.denom;\n    } else {\n      message.denom = \"\";\n    }\n\n    return message;\n  }\n\n};\nconst baseQueryBalanceResponse = {};\nexports.QueryBalanceResponse = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.balance !== undefined) {\n      coin_1.Coin.encode(message.balance, writer.uint32(10).fork()).ldelim();\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseQueryBalanceResponse);\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.balance = coin_1.Coin.decode(reader, reader.uint32());\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseQueryBalanceResponse);\n\n    if (object.balance !== undefined && object.balance !== null) {\n      message.balance = coin_1.Coin.fromJSON(object.balance);\n    } else {\n      message.balance = undefined;\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.balance !== undefined && (obj.balance = message.balance ? coin_1.Coin.toJSON(message.balance) : undefined);\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseQueryBalanceResponse);\n\n    if (object.balance !== undefined && object.balance !== null) {\n      message.balance = coin_1.Coin.fromPartial(object.balance);\n    } else {\n      message.balance = undefined;\n    }\n\n    return message;\n  }\n\n};\nconst baseQueryAllBalancesRequest = {\n  address: \"\"\n};\nexports.QueryAllBalancesRequest = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.address !== \"\") {\n      writer.uint32(10).string(message.address);\n    }\n\n    if (message.pagination !== undefined) {\n      pagination_1.PageRequest.encode(message.pagination, writer.uint32(18).fork()).ldelim();\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseQueryAllBalancesRequest);\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.address = reader.string();\n          break;\n\n        case 2:\n          message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseQueryAllBalancesRequest);\n\n    if (object.address !== undefined && object.address !== null) {\n      message.address = String(object.address);\n    } else {\n      message.address = \"\";\n    }\n\n    if (object.pagination !== undefined && object.pagination !== null) {\n      message.pagination = pagination_1.PageRequest.fromJSON(object.pagination);\n    } else {\n      message.pagination = undefined;\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.address !== undefined && (obj.address = message.address);\n    message.pagination !== undefined && (obj.pagination = message.pagination ? pagination_1.PageRequest.toJSON(message.pagination) : undefined);\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseQueryAllBalancesRequest);\n\n    if (object.address !== undefined && object.address !== null) {\n      message.address = object.address;\n    } else {\n      message.address = \"\";\n    }\n\n    if (object.pagination !== undefined && object.pagination !== null) {\n      message.pagination = pagination_1.PageRequest.fromPartial(object.pagination);\n    } else {\n      message.pagination = undefined;\n    }\n\n    return message;\n  }\n\n};\nconst baseQueryAllBalancesResponse = {};\nexports.QueryAllBalancesResponse = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    for (const v of message.balances) {\n      coin_1.Coin.encode(v, writer.uint32(10).fork()).ldelim();\n    }\n\n    if (message.pagination !== undefined) {\n      pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseQueryAllBalancesResponse);\n    message.balances = [];\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.balances.push(coin_1.Coin.decode(reader, reader.uint32()));\n          break;\n\n        case 2:\n          message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseQueryAllBalancesResponse);\n    message.balances = [];\n\n    if (object.balances !== undefined && object.balances !== null) {\n      for (const e of object.balances) {\n        message.balances.push(coin_1.Coin.fromJSON(e));\n      }\n    }\n\n    if (object.pagination !== undefined && object.pagination !== null) {\n      message.pagination = pagination_1.PageResponse.fromJSON(object.pagination);\n    } else {\n      message.pagination = undefined;\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n\n    if (message.balances) {\n      obj.balances = message.balances.map(e => e ? coin_1.Coin.toJSON(e) : undefined);\n    } else {\n      obj.balances = [];\n    }\n\n    message.pagination !== undefined && (obj.pagination = message.pagination ? pagination_1.PageResponse.toJSON(message.pagination) : undefined);\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseQueryAllBalancesResponse);\n    message.balances = [];\n\n    if (object.balances !== undefined && object.balances !== null) {\n      for (const e of object.balances) {\n        message.balances.push(coin_1.Coin.fromPartial(e));\n      }\n    }\n\n    if (object.pagination !== undefined && object.pagination !== null) {\n      message.pagination = pagination_1.PageResponse.fromPartial(object.pagination);\n    } else {\n      message.pagination = undefined;\n    }\n\n    return message;\n  }\n\n};\nconst baseQueryTotalSupplyRequest = {};\nexports.QueryTotalSupplyRequest = {\n  encode(_, writer = minimal_1.default.Writer.create()) {\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseQueryTotalSupplyRequest);\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(_) {\n    const message = Object.assign({}, baseQueryTotalSupplyRequest);\n    return message;\n  },\n\n  toJSON(_) {\n    const obj = {};\n    return obj;\n  },\n\n  fromPartial(_) {\n    const message = Object.assign({}, baseQueryTotalSupplyRequest);\n    return message;\n  }\n\n};\nconst baseQueryTotalSupplyResponse = {};\nexports.QueryTotalSupplyResponse = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    for (const v of message.supply) {\n      coin_1.Coin.encode(v, writer.uint32(10).fork()).ldelim();\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseQueryTotalSupplyResponse);\n    message.supply = [];\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.supply.push(coin_1.Coin.decode(reader, reader.uint32()));\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseQueryTotalSupplyResponse);\n    message.supply = [];\n\n    if (object.supply !== undefined && object.supply !== null) {\n      for (const e of object.supply) {\n        message.supply.push(coin_1.Coin.fromJSON(e));\n      }\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n\n    if (message.supply) {\n      obj.supply = message.supply.map(e => e ? coin_1.Coin.toJSON(e) : undefined);\n    } else {\n      obj.supply = [];\n    }\n\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseQueryTotalSupplyResponse);\n    message.supply = [];\n\n    if (object.supply !== undefined && object.supply !== null) {\n      for (const e of object.supply) {\n        message.supply.push(coin_1.Coin.fromPartial(e));\n      }\n    }\n\n    return message;\n  }\n\n};\nconst baseQuerySupplyOfRequest = {\n  denom: \"\"\n};\nexports.QuerySupplyOfRequest = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.denom !== \"\") {\n      writer.uint32(10).string(message.denom);\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseQuerySupplyOfRequest);\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.denom = reader.string();\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseQuerySupplyOfRequest);\n\n    if (object.denom !== undefined && object.denom !== null) {\n      message.denom = String(object.denom);\n    } else {\n      message.denom = \"\";\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.denom !== undefined && (obj.denom = message.denom);\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseQuerySupplyOfRequest);\n\n    if (object.denom !== undefined && object.denom !== null) {\n      message.denom = object.denom;\n    } else {\n      message.denom = \"\";\n    }\n\n    return message;\n  }\n\n};\nconst baseQuerySupplyOfResponse = {};\nexports.QuerySupplyOfResponse = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.amount !== undefined) {\n      coin_1.Coin.encode(message.amount, writer.uint32(10).fork()).ldelim();\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseQuerySupplyOfResponse);\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.amount = coin_1.Coin.decode(reader, reader.uint32());\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseQuerySupplyOfResponse);\n\n    if (object.amount !== undefined && object.amount !== null) {\n      message.amount = coin_1.Coin.fromJSON(object.amount);\n    } else {\n      message.amount = undefined;\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.amount !== undefined && (obj.amount = message.amount ? coin_1.Coin.toJSON(message.amount) : undefined);\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseQuerySupplyOfResponse);\n\n    if (object.amount !== undefined && object.amount !== null) {\n      message.amount = coin_1.Coin.fromPartial(object.amount);\n    } else {\n      message.amount = undefined;\n    }\n\n    return message;\n  }\n\n};\nconst baseQueryParamsRequest = {};\nexports.QueryParamsRequest = {\n  encode(_, writer = minimal_1.default.Writer.create()) {\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseQueryParamsRequest);\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(_) {\n    const message = Object.assign({}, baseQueryParamsRequest);\n    return message;\n  },\n\n  toJSON(_) {\n    const obj = {};\n    return obj;\n  },\n\n  fromPartial(_) {\n    const message = Object.assign({}, baseQueryParamsRequest);\n    return message;\n  }\n\n};\nconst baseQueryParamsResponse = {};\nexports.QueryParamsResponse = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.params !== undefined) {\n      bank_1.Params.encode(message.params, writer.uint32(10).fork()).ldelim();\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseQueryParamsResponse);\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.params = bank_1.Params.decode(reader, reader.uint32());\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseQueryParamsResponse);\n\n    if (object.params !== undefined && object.params !== null) {\n      message.params = bank_1.Params.fromJSON(object.params);\n    } else {\n      message.params = undefined;\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.params !== undefined && (obj.params = message.params ? bank_1.Params.toJSON(message.params) : undefined);\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseQueryParamsResponse);\n\n    if (object.params !== undefined && object.params !== null) {\n      message.params = bank_1.Params.fromPartial(object.params);\n    } else {\n      message.params = undefined;\n    }\n\n    return message;\n  }\n\n};\nconst baseQueryDenomsMetadataRequest = {};\nexports.QueryDenomsMetadataRequest = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.pagination !== undefined) {\n      pagination_1.PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseQueryDenomsMetadataRequest);\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseQueryDenomsMetadataRequest);\n\n    if (object.pagination !== undefined && object.pagination !== null) {\n      message.pagination = pagination_1.PageRequest.fromJSON(object.pagination);\n    } else {\n      message.pagination = undefined;\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.pagination !== undefined && (obj.pagination = message.pagination ? pagination_1.PageRequest.toJSON(message.pagination) : undefined);\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseQueryDenomsMetadataRequest);\n\n    if (object.pagination !== undefined && object.pagination !== null) {\n      message.pagination = pagination_1.PageRequest.fromPartial(object.pagination);\n    } else {\n      message.pagination = undefined;\n    }\n\n    return message;\n  }\n\n};\nconst baseQueryDenomsMetadataResponse = {};\nexports.QueryDenomsMetadataResponse = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    for (const v of message.metadatas) {\n      bank_1.Metadata.encode(v, writer.uint32(10).fork()).ldelim();\n    }\n\n    if (message.pagination !== undefined) {\n      pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseQueryDenomsMetadataResponse);\n    message.metadatas = [];\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.metadatas.push(bank_1.Metadata.decode(reader, reader.uint32()));\n          break;\n\n        case 2:\n          message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseQueryDenomsMetadataResponse);\n    message.metadatas = [];\n\n    if (object.metadatas !== undefined && object.metadatas !== null) {\n      for (const e of object.metadatas) {\n        message.metadatas.push(bank_1.Metadata.fromJSON(e));\n      }\n    }\n\n    if (object.pagination !== undefined && object.pagination !== null) {\n      message.pagination = pagination_1.PageResponse.fromJSON(object.pagination);\n    } else {\n      message.pagination = undefined;\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n\n    if (message.metadatas) {\n      obj.metadatas = message.metadatas.map(e => e ? bank_1.Metadata.toJSON(e) : undefined);\n    } else {\n      obj.metadatas = [];\n    }\n\n    message.pagination !== undefined && (obj.pagination = message.pagination ? pagination_1.PageResponse.toJSON(message.pagination) : undefined);\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseQueryDenomsMetadataResponse);\n    message.metadatas = [];\n\n    if (object.metadatas !== undefined && object.metadatas !== null) {\n      for (const e of object.metadatas) {\n        message.metadatas.push(bank_1.Metadata.fromPartial(e));\n      }\n    }\n\n    if (object.pagination !== undefined && object.pagination !== null) {\n      message.pagination = pagination_1.PageResponse.fromPartial(object.pagination);\n    } else {\n      message.pagination = undefined;\n    }\n\n    return message;\n  }\n\n};\nconst baseQueryDenomMetadataRequest = {\n  denom: \"\"\n};\nexports.QueryDenomMetadataRequest = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.denom !== \"\") {\n      writer.uint32(10).string(message.denom);\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseQueryDenomMetadataRequest);\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.denom = reader.string();\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseQueryDenomMetadataRequest);\n\n    if (object.denom !== undefined && object.denom !== null) {\n      message.denom = String(object.denom);\n    } else {\n      message.denom = \"\";\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.denom !== undefined && (obj.denom = message.denom);\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseQueryDenomMetadataRequest);\n\n    if (object.denom !== undefined && object.denom !== null) {\n      message.denom = object.denom;\n    } else {\n      message.denom = \"\";\n    }\n\n    return message;\n  }\n\n};\nconst baseQueryDenomMetadataResponse = {};\nexports.QueryDenomMetadataResponse = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.metadata !== undefined) {\n      bank_1.Metadata.encode(message.metadata, writer.uint32(10).fork()).ldelim();\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseQueryDenomMetadataResponse);\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.metadata = bank_1.Metadata.decode(reader, reader.uint32());\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseQueryDenomMetadataResponse);\n\n    if (object.metadata !== undefined && object.metadata !== null) {\n      message.metadata = bank_1.Metadata.fromJSON(object.metadata);\n    } else {\n      message.metadata = undefined;\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.metadata !== undefined && (obj.metadata = message.metadata ? bank_1.Metadata.toJSON(message.metadata) : undefined);\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseQueryDenomMetadataResponse);\n\n    if (object.metadata !== undefined && object.metadata !== null) {\n      message.metadata = bank_1.Metadata.fromPartial(object.metadata);\n    } else {\n      message.metadata = undefined;\n    }\n\n    return message;\n  }\n\n};\n\nclass QueryClientImpl {\n  constructor(rpc) {\n    this.rpc = rpc;\n  }\n\n  Balance(request) {\n    const data = exports.QueryBalanceRequest.encode(request).finish();\n    const promise = this.rpc.request(\"cosmos.bank.v1beta1.Query\", \"Balance\", data);\n    return promise.then(data => exports.QueryBalanceResponse.decode(new minimal_1.default.Reader(data)));\n  }\n\n  AllBalances(request) {\n    const data = exports.QueryAllBalancesRequest.encode(request).finish();\n    const promise = this.rpc.request(\"cosmos.bank.v1beta1.Query\", \"AllBalances\", data);\n    return promise.then(data => exports.QueryAllBalancesResponse.decode(new minimal_1.default.Reader(data)));\n  }\n\n  TotalSupply(request) {\n    const data = exports.QueryTotalSupplyRequest.encode(request).finish();\n    const promise = this.rpc.request(\"cosmos.bank.v1beta1.Query\", \"TotalSupply\", data);\n    return promise.then(data => exports.QueryTotalSupplyResponse.decode(new minimal_1.default.Reader(data)));\n  }\n\n  SupplyOf(request) {\n    const data = exports.QuerySupplyOfRequest.encode(request).finish();\n    const promise = this.rpc.request(\"cosmos.bank.v1beta1.Query\", \"SupplyOf\", data);\n    return promise.then(data => exports.QuerySupplyOfResponse.decode(new minimal_1.default.Reader(data)));\n  }\n\n  Params(request) {\n    const data = exports.QueryParamsRequest.encode(request).finish();\n    const promise = this.rpc.request(\"cosmos.bank.v1beta1.Query\", \"Params\", data);\n    return promise.then(data => exports.QueryParamsResponse.decode(new minimal_1.default.Reader(data)));\n  }\n\n  DenomMetadata(request) {\n    const data = exports.QueryDenomMetadataRequest.encode(request).finish();\n    const promise = this.rpc.request(\"cosmos.bank.v1beta1.Query\", \"DenomMetadata\", data);\n    return promise.then(data => exports.QueryDenomMetadataResponse.decode(new minimal_1.default.Reader(data)));\n  }\n\n  DenomsMetadata(request) {\n    const data = exports.QueryDenomsMetadataRequest.encode(request).finish();\n    const promise = this.rpc.request(\"cosmos.bank.v1beta1.Query\", \"DenomsMetadata\", data);\n    return promise.then(data => exports.QueryDenomsMetadataResponse.decode(new minimal_1.default.Reader(data)));\n  }\n\n}\n\nexports.QueryClientImpl = QueryClientImpl;\n\nif (minimal_1.default.util.Long !== long_1.default) {\n  minimal_1.default.util.Long = long_1.default;\n  minimal_1.default.configure();\n}","map":{"version":3,"sources":["../../../../../src/codec/cosmos/bank/v1beta1/query.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.QueryClientImpl = exports.QueryDenomMetadataResponse = exports.QueryDenomMetadataRequest = exports.QueryDenomsMetadataResponse = exports.QueryDenomsMetadataRequest = exports.QueryParamsResponse = exports.QueryParamsRequest = exports.QuerySupplyOfResponse = exports.QuerySupplyOfRequest = exports.QueryTotalSupplyResponse = exports.QueryTotalSupplyRequest = exports.QueryAllBalancesResponse = exports.QueryAllBalancesRequest = exports.QueryBalanceResponse = exports.QueryBalanceRequest = exports.protobufPackage = void 0;\n/* eslint-disable */\nconst long_1 = __importDefault(require(\"long\"));\nconst minimal_1 = __importDefault(require(\"protobufjs/minimal\"));\nconst coin_1 = require(\"../../../cosmos/base/v1beta1/coin\");\nconst pagination_1 = require(\"../../../cosmos/base/query/v1beta1/pagination\");\nconst bank_1 = require(\"../../../cosmos/bank/v1beta1/bank\");\nexports.protobufPackage = \"cosmos.bank.v1beta1\";\nconst baseQueryBalanceRequest = { address: \"\", denom: \"\" };\nexports.QueryBalanceRequest = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.address !== \"\") {\n            writer.uint32(10).string(message.address);\n        }\n        if (message.denom !== \"\") {\n            writer.uint32(18).string(message.denom);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseQueryBalanceRequest);\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.address = reader.string();\n                    break;\n                case 2:\n                    message.denom = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseQueryBalanceRequest);\n        if (object.address !== undefined && object.address !== null) {\n            message.address = String(object.address);\n        }\n        else {\n            message.address = \"\";\n        }\n        if (object.denom !== undefined && object.denom !== null) {\n            message.denom = String(object.denom);\n        }\n        else {\n            message.denom = \"\";\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.address !== undefined && (obj.address = message.address);\n        message.denom !== undefined && (obj.denom = message.denom);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseQueryBalanceRequest);\n        if (object.address !== undefined && object.address !== null) {\n            message.address = object.address;\n        }\n        else {\n            message.address = \"\";\n        }\n        if (object.denom !== undefined && object.denom !== null) {\n            message.denom = object.denom;\n        }\n        else {\n            message.denom = \"\";\n        }\n        return message;\n    },\n};\nconst baseQueryBalanceResponse = {};\nexports.QueryBalanceResponse = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.balance !== undefined) {\n            coin_1.Coin.encode(message.balance, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseQueryBalanceResponse);\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.balance = coin_1.Coin.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseQueryBalanceResponse);\n        if (object.balance !== undefined && object.balance !== null) {\n            message.balance = coin_1.Coin.fromJSON(object.balance);\n        }\n        else {\n            message.balance = undefined;\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.balance !== undefined &&\n            (obj.balance = message.balance ? coin_1.Coin.toJSON(message.balance) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseQueryBalanceResponse);\n        if (object.balance !== undefined && object.balance !== null) {\n            message.balance = coin_1.Coin.fromPartial(object.balance);\n        }\n        else {\n            message.balance = undefined;\n        }\n        return message;\n    },\n};\nconst baseQueryAllBalancesRequest = { address: \"\" };\nexports.QueryAllBalancesRequest = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.address !== \"\") {\n            writer.uint32(10).string(message.address);\n        }\n        if (message.pagination !== undefined) {\n            pagination_1.PageRequest.encode(message.pagination, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseQueryAllBalancesRequest);\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.address = reader.string();\n                    break;\n                case 2:\n                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseQueryAllBalancesRequest);\n        if (object.address !== undefined && object.address !== null) {\n            message.address = String(object.address);\n        }\n        else {\n            message.address = \"\";\n        }\n        if (object.pagination !== undefined && object.pagination !== null) {\n            message.pagination = pagination_1.PageRequest.fromJSON(object.pagination);\n        }\n        else {\n            message.pagination = undefined;\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.address !== undefined && (obj.address = message.address);\n        message.pagination !== undefined &&\n            (obj.pagination = message.pagination ? pagination_1.PageRequest.toJSON(message.pagination) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseQueryAllBalancesRequest);\n        if (object.address !== undefined && object.address !== null) {\n            message.address = object.address;\n        }\n        else {\n            message.address = \"\";\n        }\n        if (object.pagination !== undefined && object.pagination !== null) {\n            message.pagination = pagination_1.PageRequest.fromPartial(object.pagination);\n        }\n        else {\n            message.pagination = undefined;\n        }\n        return message;\n    },\n};\nconst baseQueryAllBalancesResponse = {};\nexports.QueryAllBalancesResponse = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        for (const v of message.balances) {\n            coin_1.Coin.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.pagination !== undefined) {\n            pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseQueryAllBalancesResponse);\n        message.balances = [];\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.balances.push(coin_1.Coin.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseQueryAllBalancesResponse);\n        message.balances = [];\n        if (object.balances !== undefined && object.balances !== null) {\n            for (const e of object.balances) {\n                message.balances.push(coin_1.Coin.fromJSON(e));\n            }\n        }\n        if (object.pagination !== undefined && object.pagination !== null) {\n            message.pagination = pagination_1.PageResponse.fromJSON(object.pagination);\n        }\n        else {\n            message.pagination = undefined;\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.balances) {\n            obj.balances = message.balances.map((e) => (e ? coin_1.Coin.toJSON(e) : undefined));\n        }\n        else {\n            obj.balances = [];\n        }\n        message.pagination !== undefined &&\n            (obj.pagination = message.pagination ? pagination_1.PageResponse.toJSON(message.pagination) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseQueryAllBalancesResponse);\n        message.balances = [];\n        if (object.balances !== undefined && object.balances !== null) {\n            for (const e of object.balances) {\n                message.balances.push(coin_1.Coin.fromPartial(e));\n            }\n        }\n        if (object.pagination !== undefined && object.pagination !== null) {\n            message.pagination = pagination_1.PageResponse.fromPartial(object.pagination);\n        }\n        else {\n            message.pagination = undefined;\n        }\n        return message;\n    },\n};\nconst baseQueryTotalSupplyRequest = {};\nexports.QueryTotalSupplyRequest = {\n    encode(_, writer = minimal_1.default.Writer.create()) {\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseQueryTotalSupplyRequest);\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(_) {\n        const message = Object.assign({}, baseQueryTotalSupplyRequest);\n        return message;\n    },\n    toJSON(_) {\n        const obj = {};\n        return obj;\n    },\n    fromPartial(_) {\n        const message = Object.assign({}, baseQueryTotalSupplyRequest);\n        return message;\n    },\n};\nconst baseQueryTotalSupplyResponse = {};\nexports.QueryTotalSupplyResponse = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        for (const v of message.supply) {\n            coin_1.Coin.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseQueryTotalSupplyResponse);\n        message.supply = [];\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.supply.push(coin_1.Coin.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseQueryTotalSupplyResponse);\n        message.supply = [];\n        if (object.supply !== undefined && object.supply !== null) {\n            for (const e of object.supply) {\n                message.supply.push(coin_1.Coin.fromJSON(e));\n            }\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.supply) {\n            obj.supply = message.supply.map((e) => (e ? coin_1.Coin.toJSON(e) : undefined));\n        }\n        else {\n            obj.supply = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseQueryTotalSupplyResponse);\n        message.supply = [];\n        if (object.supply !== undefined && object.supply !== null) {\n            for (const e of object.supply) {\n                message.supply.push(coin_1.Coin.fromPartial(e));\n            }\n        }\n        return message;\n    },\n};\nconst baseQuerySupplyOfRequest = { denom: \"\" };\nexports.QuerySupplyOfRequest = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.denom !== \"\") {\n            writer.uint32(10).string(message.denom);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseQuerySupplyOfRequest);\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.denom = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseQuerySupplyOfRequest);\n        if (object.denom !== undefined && object.denom !== null) {\n            message.denom = String(object.denom);\n        }\n        else {\n            message.denom = \"\";\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.denom !== undefined && (obj.denom = message.denom);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseQuerySupplyOfRequest);\n        if (object.denom !== undefined && object.denom !== null) {\n            message.denom = object.denom;\n        }\n        else {\n            message.denom = \"\";\n        }\n        return message;\n    },\n};\nconst baseQuerySupplyOfResponse = {};\nexports.QuerySupplyOfResponse = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.amount !== undefined) {\n            coin_1.Coin.encode(message.amount, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseQuerySupplyOfResponse);\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.amount = coin_1.Coin.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseQuerySupplyOfResponse);\n        if (object.amount !== undefined && object.amount !== null) {\n            message.amount = coin_1.Coin.fromJSON(object.amount);\n        }\n        else {\n            message.amount = undefined;\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.amount !== undefined && (obj.amount = message.amount ? coin_1.Coin.toJSON(message.amount) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseQuerySupplyOfResponse);\n        if (object.amount !== undefined && object.amount !== null) {\n            message.amount = coin_1.Coin.fromPartial(object.amount);\n        }\n        else {\n            message.amount = undefined;\n        }\n        return message;\n    },\n};\nconst baseQueryParamsRequest = {};\nexports.QueryParamsRequest = {\n    encode(_, writer = minimal_1.default.Writer.create()) {\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseQueryParamsRequest);\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(_) {\n        const message = Object.assign({}, baseQueryParamsRequest);\n        return message;\n    },\n    toJSON(_) {\n        const obj = {};\n        return obj;\n    },\n    fromPartial(_) {\n        const message = Object.assign({}, baseQueryParamsRequest);\n        return message;\n    },\n};\nconst baseQueryParamsResponse = {};\nexports.QueryParamsResponse = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.params !== undefined) {\n            bank_1.Params.encode(message.params, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseQueryParamsResponse);\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.params = bank_1.Params.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseQueryParamsResponse);\n        if (object.params !== undefined && object.params !== null) {\n            message.params = bank_1.Params.fromJSON(object.params);\n        }\n        else {\n            message.params = undefined;\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.params !== undefined && (obj.params = message.params ? bank_1.Params.toJSON(message.params) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseQueryParamsResponse);\n        if (object.params !== undefined && object.params !== null) {\n            message.params = bank_1.Params.fromPartial(object.params);\n        }\n        else {\n            message.params = undefined;\n        }\n        return message;\n    },\n};\nconst baseQueryDenomsMetadataRequest = {};\nexports.QueryDenomsMetadataRequest = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.pagination !== undefined) {\n            pagination_1.PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseQueryDenomsMetadataRequest);\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseQueryDenomsMetadataRequest);\n        if (object.pagination !== undefined && object.pagination !== null) {\n            message.pagination = pagination_1.PageRequest.fromJSON(object.pagination);\n        }\n        else {\n            message.pagination = undefined;\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.pagination !== undefined &&\n            (obj.pagination = message.pagination ? pagination_1.PageRequest.toJSON(message.pagination) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseQueryDenomsMetadataRequest);\n        if (object.pagination !== undefined && object.pagination !== null) {\n            message.pagination = pagination_1.PageRequest.fromPartial(object.pagination);\n        }\n        else {\n            message.pagination = undefined;\n        }\n        return message;\n    },\n};\nconst baseQueryDenomsMetadataResponse = {};\nexports.QueryDenomsMetadataResponse = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        for (const v of message.metadatas) {\n            bank_1.Metadata.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.pagination !== undefined) {\n            pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseQueryDenomsMetadataResponse);\n        message.metadatas = [];\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.metadatas.push(bank_1.Metadata.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseQueryDenomsMetadataResponse);\n        message.metadatas = [];\n        if (object.metadatas !== undefined && object.metadatas !== null) {\n            for (const e of object.metadatas) {\n                message.metadatas.push(bank_1.Metadata.fromJSON(e));\n            }\n        }\n        if (object.pagination !== undefined && object.pagination !== null) {\n            message.pagination = pagination_1.PageResponse.fromJSON(object.pagination);\n        }\n        else {\n            message.pagination = undefined;\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.metadatas) {\n            obj.metadatas = message.metadatas.map((e) => (e ? bank_1.Metadata.toJSON(e) : undefined));\n        }\n        else {\n            obj.metadatas = [];\n        }\n        message.pagination !== undefined &&\n            (obj.pagination = message.pagination ? pagination_1.PageResponse.toJSON(message.pagination) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseQueryDenomsMetadataResponse);\n        message.metadatas = [];\n        if (object.metadatas !== undefined && object.metadatas !== null) {\n            for (const e of object.metadatas) {\n                message.metadatas.push(bank_1.Metadata.fromPartial(e));\n            }\n        }\n        if (object.pagination !== undefined && object.pagination !== null) {\n            message.pagination = pagination_1.PageResponse.fromPartial(object.pagination);\n        }\n        else {\n            message.pagination = undefined;\n        }\n        return message;\n    },\n};\nconst baseQueryDenomMetadataRequest = { denom: \"\" };\nexports.QueryDenomMetadataRequest = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.denom !== \"\") {\n            writer.uint32(10).string(message.denom);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseQueryDenomMetadataRequest);\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.denom = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseQueryDenomMetadataRequest);\n        if (object.denom !== undefined && object.denom !== null) {\n            message.denom = String(object.denom);\n        }\n        else {\n            message.denom = \"\";\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.denom !== undefined && (obj.denom = message.denom);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseQueryDenomMetadataRequest);\n        if (object.denom !== undefined && object.denom !== null) {\n            message.denom = object.denom;\n        }\n        else {\n            message.denom = \"\";\n        }\n        return message;\n    },\n};\nconst baseQueryDenomMetadataResponse = {};\nexports.QueryDenomMetadataResponse = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.metadata !== undefined) {\n            bank_1.Metadata.encode(message.metadata, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseQueryDenomMetadataResponse);\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.metadata = bank_1.Metadata.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseQueryDenomMetadataResponse);\n        if (object.metadata !== undefined && object.metadata !== null) {\n            message.metadata = bank_1.Metadata.fromJSON(object.metadata);\n        }\n        else {\n            message.metadata = undefined;\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.metadata !== undefined &&\n            (obj.metadata = message.metadata ? bank_1.Metadata.toJSON(message.metadata) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseQueryDenomMetadataResponse);\n        if (object.metadata !== undefined && object.metadata !== null) {\n            message.metadata = bank_1.Metadata.fromPartial(object.metadata);\n        }\n        else {\n            message.metadata = undefined;\n        }\n        return message;\n    },\n};\nclass QueryClientImpl {\n    constructor(rpc) {\n        this.rpc = rpc;\n    }\n    Balance(request) {\n        const data = exports.QueryBalanceRequest.encode(request).finish();\n        const promise = this.rpc.request(\"cosmos.bank.v1beta1.Query\", \"Balance\", data);\n        return promise.then((data) => exports.QueryBalanceResponse.decode(new minimal_1.default.Reader(data)));\n    }\n    AllBalances(request) {\n        const data = exports.QueryAllBalancesRequest.encode(request).finish();\n        const promise = this.rpc.request(\"cosmos.bank.v1beta1.Query\", \"AllBalances\", data);\n        return promise.then((data) => exports.QueryAllBalancesResponse.decode(new minimal_1.default.Reader(data)));\n    }\n    TotalSupply(request) {\n        const data = exports.QueryTotalSupplyRequest.encode(request).finish();\n        const promise = this.rpc.request(\"cosmos.bank.v1beta1.Query\", \"TotalSupply\", data);\n        return promise.then((data) => exports.QueryTotalSupplyResponse.decode(new minimal_1.default.Reader(data)));\n    }\n    SupplyOf(request) {\n        const data = exports.QuerySupplyOfRequest.encode(request).finish();\n        const promise = this.rpc.request(\"cosmos.bank.v1beta1.Query\", \"SupplyOf\", data);\n        return promise.then((data) => exports.QuerySupplyOfResponse.decode(new minimal_1.default.Reader(data)));\n    }\n    Params(request) {\n        const data = exports.QueryParamsRequest.encode(request).finish();\n        const promise = this.rpc.request(\"cosmos.bank.v1beta1.Query\", \"Params\", data);\n        return promise.then((data) => exports.QueryParamsResponse.decode(new minimal_1.default.Reader(data)));\n    }\n    DenomMetadata(request) {\n        const data = exports.QueryDenomMetadataRequest.encode(request).finish();\n        const promise = this.rpc.request(\"cosmos.bank.v1beta1.Query\", \"DenomMetadata\", data);\n        return promise.then((data) => exports.QueryDenomMetadataResponse.decode(new minimal_1.default.Reader(data)));\n    }\n    DenomsMetadata(request) {\n        const data = exports.QueryDenomsMetadataRequest.encode(request).finish();\n        const promise = this.rpc.request(\"cosmos.bank.v1beta1.Query\", \"DenomsMetadata\", data);\n        return promise.then((data) => exports.QueryDenomsMetadataResponse.decode(new minimal_1.default.Reader(data)));\n    }\n}\nexports.QueryClientImpl = QueryClientImpl;\nif (minimal_1.default.util.Long !== long_1.default) {\n    minimal_1.default.util.Long = long_1.default;\n    minimal_1.default.configure();\n}\n//# sourceMappingURL=query.js.map"]},"metadata":{},"sourceType":"script"}