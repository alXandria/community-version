{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createMultisigThresholdPubkey = exports.compareArrays = void 0;\n\nconst encoding_1 = require(\"@cosmjs/encoding\");\n\nconst math_1 = require(\"@cosmjs/math\");\n\nconst addresses_1 = require(\"./addresses\");\n/**\n * Compare arrays lexicographically.\n *\n * Returns value < 0 if `a < b`.\n * Returns value > 0 if `a > b`.\n * Returns 0 if `a === b`.\n */\n\n\nfunction compareArrays(a, b) {\n  const aHex = encoding_1.toHex(a);\n  const bHex = encoding_1.toHex(b);\n  return aHex === bHex ? 0 : aHex < bHex ? -1 : 1;\n}\n\nexports.compareArrays = compareArrays;\n\nfunction createMultisigThresholdPubkey(pubkeys, threshold, nosort = false) {\n  const uintThreshold = new math_1.Uint53(threshold);\n\n  if (uintThreshold.toNumber() > pubkeys.length) {\n    throw new Error(`Threshold k = ${uintThreshold.toNumber()} exceeds number of keys n = ${pubkeys.length}`);\n  }\n\n  const outPubkeys = nosort ? pubkeys : Array.from(pubkeys).sort((lhs, rhs) => {\n    // https://github.com/cosmos/cosmos-sdk/blob/v0.42.2/client/keys/add.go#L172-L174\n    const addressLhs = addresses_1.pubkeyToRawAddress(lhs);\n    const addressRhs = addresses_1.pubkeyToRawAddress(rhs);\n    return compareArrays(addressLhs, addressRhs);\n  });\n  return {\n    type: \"tendermint/PubKeyMultisigThreshold\",\n    value: {\n      threshold: uintThreshold.toString(),\n      pubkeys: outPubkeys\n    }\n  };\n}\n\nexports.createMultisigThresholdPubkey = createMultisigThresholdPubkey;","map":{"version":3,"sources":["../src/multisig.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,UAAA,GAAA,OAAA,CAAA,kBAAA,CAAA;;AACA,MAAA,MAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;AAEA,MAAA,WAAA,GAAA,OAAA,CAAA,aAAA,CAAA;AAGA;;;;;;;;;AAOA,SAAgB,aAAhB,CAA8B,CAA9B,EAA6C,CAA7C,EAA0D;AACxD,QAAM,IAAI,GAAG,UAAA,CAAA,KAAA,CAAM,CAAN,CAAb;AACA,QAAM,IAAI,GAAG,UAAA,CAAA,KAAA,CAAM,CAAN,CAAb;AACA,SAAO,IAAI,KAAK,IAAT,GAAgB,CAAhB,GAAoB,IAAI,GAAG,IAAP,GAAc,CAAC,CAAf,GAAmB,CAA9C;AACD;;AAJD,OAAA,CAAA,aAAA,GAAA,aAAA;;AAMA,SAAgB,6BAAhB,CACE,OADF,EAEE,SAFF,EAGE,MAAM,GAAG,KAHX,EAGgB;AAEd,QAAM,aAAa,GAAG,IAAI,MAAA,CAAA,MAAJ,CAAW,SAAX,CAAtB;;AACA,MAAI,aAAa,CAAC,QAAd,KAA2B,OAAO,CAAC,MAAvC,EAA+C;AAC7C,UAAM,IAAI,KAAJ,CAAU,iBAAiB,aAAa,CAAC,QAAd,EAAwB,+BAA+B,OAAO,CAAC,MAAM,EAAhG,CAAN;AACD;;AAED,QAAM,UAAU,GAAG,MAAM,GACrB,OADqB,GAErB,KAAK,CAAC,IAAN,CAAW,OAAX,EAAoB,IAApB,CAAyB,CAAC,GAAD,EAAM,GAAN,KAAa;AACpC;AACA,UAAM,UAAU,GAAG,WAAA,CAAA,kBAAA,CAAmB,GAAnB,CAAnB;AACA,UAAM,UAAU,GAAG,WAAA,CAAA,kBAAA,CAAmB,GAAnB,CAAnB;AACA,WAAO,aAAa,CAAC,UAAD,EAAa,UAAb,CAApB;AACD,GALD,CAFJ;AAQA,SAAO;AACL,IAAA,IAAI,EAAE,oCADD;AAEL,IAAA,KAAK,EAAE;AACL,MAAA,SAAS,EAAE,aAAa,CAAC,QAAd,EADN;AAEL,MAAA,OAAO,EAAE;AAFJ;AAFF,GAAP;AAOD;;AAzBD,OAAA,CAAA,6BAAA,GAAA,6BAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createMultisigThresholdPubkey = exports.compareArrays = void 0;\nconst encoding_1 = require(\"@cosmjs/encoding\");\nconst math_1 = require(\"@cosmjs/math\");\nconst addresses_1 = require(\"./addresses\");\n/**\n * Compare arrays lexicographically.\n *\n * Returns value < 0 if `a < b`.\n * Returns value > 0 if `a > b`.\n * Returns 0 if `a === b`.\n */\nfunction compareArrays(a, b) {\n    const aHex = encoding_1.toHex(a);\n    const bHex = encoding_1.toHex(b);\n    return aHex === bHex ? 0 : aHex < bHex ? -1 : 1;\n}\nexports.compareArrays = compareArrays;\nfunction createMultisigThresholdPubkey(pubkeys, threshold, nosort = false) {\n    const uintThreshold = new math_1.Uint53(threshold);\n    if (uintThreshold.toNumber() > pubkeys.length) {\n        throw new Error(`Threshold k = ${uintThreshold.toNumber()} exceeds number of keys n = ${pubkeys.length}`);\n    }\n    const outPubkeys = nosort\n        ? pubkeys\n        : Array.from(pubkeys).sort((lhs, rhs) => {\n            // https://github.com/cosmos/cosmos-sdk/blob/v0.42.2/client/keys/add.go#L172-L174\n            const addressLhs = addresses_1.pubkeyToRawAddress(lhs);\n            const addressRhs = addresses_1.pubkeyToRawAddress(rhs);\n            return compareArrays(addressLhs, addressRhs);\n        });\n    return {\n        type: \"tendermint/PubKeyMultisigThreshold\",\n        value: {\n            threshold: uintThreshold.toString(),\n            pubkeys: outPubkeys,\n        },\n    };\n}\nexports.createMultisigThresholdPubkey = createMultisigThresholdPubkey;\n//# sourceMappingURL=multisig.js.map"]},"metadata":{},"sourceType":"script"}