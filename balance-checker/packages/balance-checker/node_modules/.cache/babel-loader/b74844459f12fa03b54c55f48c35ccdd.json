{"ast":null,"code":"\"use strict\"; // See https://github.com/tendermint/tendermint/blob/f2ada0a604b4c0763bda2f64fac53d506d3beca7/docs/spec/blockchain/encoding.md#public-key-cryptography\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.pubkeyToAddress = exports.pubkeyToRawAddress = exports.rawSecp256k1PubkeyToRawAddress = exports.rawEd25519PubkeyToRawAddress = void 0;\n\nconst crypto_1 = require(\"@cosmjs/crypto\");\n\nconst encoding_1 = require(\"@cosmjs/encoding\");\n\nconst encoding_2 = require(\"./encoding\");\n\nconst pubkeys_1 = require(\"./pubkeys\");\n\nfunction rawEd25519PubkeyToRawAddress(pubkeyData) {\n  if (pubkeyData.length !== 32) {\n    throw new Error(`Invalid Ed25519 pubkey length: ${pubkeyData.length}`);\n  }\n\n  return crypto_1.sha256(pubkeyData).slice(0, 20);\n}\n\nexports.rawEd25519PubkeyToRawAddress = rawEd25519PubkeyToRawAddress;\n\nfunction rawSecp256k1PubkeyToRawAddress(pubkeyData) {\n  if (pubkeyData.length !== 33) {\n    throw new Error(`Invalid Secp256k1 pubkey length (compressed): ${pubkeyData.length}`);\n  }\n\n  return crypto_1.ripemd160(crypto_1.sha256(pubkeyData));\n}\n\nexports.rawSecp256k1PubkeyToRawAddress = rawSecp256k1PubkeyToRawAddress; // For secp256k1 this assumes we already have a compressed pubkey.\n\nfunction pubkeyToRawAddress(pubkey) {\n  if (pubkeys_1.isSecp256k1Pubkey(pubkey)) {\n    const pubkeyData = encoding_1.fromBase64(pubkey.value);\n    return rawSecp256k1PubkeyToRawAddress(pubkeyData);\n  } else if (pubkeys_1.isEd25519Pubkey(pubkey)) {\n    const pubkeyData = encoding_1.fromBase64(pubkey.value);\n    return rawEd25519PubkeyToRawAddress(pubkeyData);\n  } else if (pubkeys_1.isMultisigThresholdPubkey(pubkey)) {\n    // https://github.com/tendermint/tendermint/blob/38b401657e4ad7a7eeb3c30a3cbf512037df3740/crypto/multisig/threshold_pubkey.go#L71-L74\n    const pubkeyData = encoding_2.encodeAminoPubkey(pubkey);\n    return crypto_1.sha256(pubkeyData).slice(0, 20);\n  } else {\n    throw new Error(\"Unsupported public key type\");\n  }\n}\n\nexports.pubkeyToRawAddress = pubkeyToRawAddress;\n\nfunction pubkeyToAddress(pubkey, prefix) {\n  return encoding_1.Bech32.encode(prefix, pubkeyToRawAddress(pubkey));\n}\n\nexports.pubkeyToAddress = pubkeyToAddress;","map":{"version":3,"sources":["../src/addresses.ts"],"names":[],"mappings":"cAAA;;;;;;;AAEA,MAAA,QAAA,GAAA,OAAA,CAAA,gBAAA,CAAA;;AACA,MAAA,UAAA,GAAA,OAAA,CAAA,kBAAA,CAAA;;AAEA,MAAA,UAAA,GAAA,OAAA,CAAA,YAAA,CAAA;;AACA,MAAA,SAAA,GAAA,OAAA,CAAA,WAAA,CAAA;;AAEA,SAAgB,4BAAhB,CAA6C,UAA7C,EAAmE;AACjE,MAAI,UAAU,CAAC,MAAX,KAAsB,EAA1B,EAA8B;AAC5B,UAAM,IAAI,KAAJ,CAAU,kCAAkC,UAAU,CAAC,MAAM,EAA7D,CAAN;AACD;;AACD,SAAO,QAAA,CAAA,MAAA,CAAO,UAAP,EAAmB,KAAnB,CAAyB,CAAzB,EAA4B,EAA5B,CAAP;AACD;;AALD,OAAA,CAAA,4BAAA,GAAA,4BAAA;;AAOA,SAAgB,8BAAhB,CAA+C,UAA/C,EAAqE;AACnE,MAAI,UAAU,CAAC,MAAX,KAAsB,EAA1B,EAA8B;AAC5B,UAAM,IAAI,KAAJ,CAAU,iDAAiD,UAAU,CAAC,MAAM,EAA5E,CAAN;AACD;;AACD,SAAO,QAAA,CAAA,SAAA,CAAU,QAAA,CAAA,MAAA,CAAO,UAAP,CAAV,CAAP;AACD;;AALD,OAAA,CAAA,8BAAA,GAAA,8BAAA,C,CAOA;;AACA,SAAgB,kBAAhB,CAAmC,MAAnC,EAAiD;AAC/C,MAAI,SAAA,CAAA,iBAAA,CAAkB,MAAlB,CAAJ,EAA+B;AAC7B,UAAM,UAAU,GAAG,UAAA,CAAA,UAAA,CAAW,MAAM,CAAC,KAAlB,CAAnB;AACA,WAAO,8BAA8B,CAAC,UAAD,CAArC;AACD,GAHD,MAGO,IAAI,SAAA,CAAA,eAAA,CAAgB,MAAhB,CAAJ,EAA6B;AAClC,UAAM,UAAU,GAAG,UAAA,CAAA,UAAA,CAAW,MAAM,CAAC,KAAlB,CAAnB;AACA,WAAO,4BAA4B,CAAC,UAAD,CAAnC;AACD,GAHM,MAGA,IAAI,SAAA,CAAA,yBAAA,CAA0B,MAA1B,CAAJ,EAAuC;AAC5C;AACA,UAAM,UAAU,GAAG,UAAA,CAAA,iBAAA,CAAkB,MAAlB,CAAnB;AACA,WAAO,QAAA,CAAA,MAAA,CAAO,UAAP,EAAmB,KAAnB,CAAyB,CAAzB,EAA4B,EAA5B,CAAP;AACD,GAJM,MAIA;AACL,UAAM,IAAI,KAAJ,CAAU,6BAAV,CAAN;AACD;AACF;;AAdD,OAAA,CAAA,kBAAA,GAAA,kBAAA;;AAgBA,SAAgB,eAAhB,CAAgC,MAAhC,EAAgD,MAAhD,EAA8D;AAC5D,SAAO,UAAA,CAAA,MAAA,CAAO,MAAP,CAAc,MAAd,EAAsB,kBAAkB,CAAC,MAAD,CAAxC,CAAP;AACD;;AAFD,OAAA,CAAA,eAAA,GAAA,eAAA","sourceRoot":"","sourcesContent":["\"use strict\";\n// See https://github.com/tendermint/tendermint/blob/f2ada0a604b4c0763bda2f64fac53d506d3beca7/docs/spec/blockchain/encoding.md#public-key-cryptography\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.pubkeyToAddress = exports.pubkeyToRawAddress = exports.rawSecp256k1PubkeyToRawAddress = exports.rawEd25519PubkeyToRawAddress = void 0;\nconst crypto_1 = require(\"@cosmjs/crypto\");\nconst encoding_1 = require(\"@cosmjs/encoding\");\nconst encoding_2 = require(\"./encoding\");\nconst pubkeys_1 = require(\"./pubkeys\");\nfunction rawEd25519PubkeyToRawAddress(pubkeyData) {\n    if (pubkeyData.length !== 32) {\n        throw new Error(`Invalid Ed25519 pubkey length: ${pubkeyData.length}`);\n    }\n    return crypto_1.sha256(pubkeyData).slice(0, 20);\n}\nexports.rawEd25519PubkeyToRawAddress = rawEd25519PubkeyToRawAddress;\nfunction rawSecp256k1PubkeyToRawAddress(pubkeyData) {\n    if (pubkeyData.length !== 33) {\n        throw new Error(`Invalid Secp256k1 pubkey length (compressed): ${pubkeyData.length}`);\n    }\n    return crypto_1.ripemd160(crypto_1.sha256(pubkeyData));\n}\nexports.rawSecp256k1PubkeyToRawAddress = rawSecp256k1PubkeyToRawAddress;\n// For secp256k1 this assumes we already have a compressed pubkey.\nfunction pubkeyToRawAddress(pubkey) {\n    if (pubkeys_1.isSecp256k1Pubkey(pubkey)) {\n        const pubkeyData = encoding_1.fromBase64(pubkey.value);\n        return rawSecp256k1PubkeyToRawAddress(pubkeyData);\n    }\n    else if (pubkeys_1.isEd25519Pubkey(pubkey)) {\n        const pubkeyData = encoding_1.fromBase64(pubkey.value);\n        return rawEd25519PubkeyToRawAddress(pubkeyData);\n    }\n    else if (pubkeys_1.isMultisigThresholdPubkey(pubkey)) {\n        // https://github.com/tendermint/tendermint/blob/38b401657e4ad7a7eeb3c30a3cbf512037df3740/crypto/multisig/threshold_pubkey.go#L71-L74\n        const pubkeyData = encoding_2.encodeAminoPubkey(pubkey);\n        return crypto_1.sha256(pubkeyData).slice(0, 20);\n    }\n    else {\n        throw new Error(\"Unsupported public key type\");\n    }\n}\nexports.pubkeyToRawAddress = pubkeyToRawAddress;\nfunction pubkeyToAddress(pubkey, prefix) {\n    return encoding_1.Bech32.encode(prefix, pubkeyToRawAddress(pubkey));\n}\nexports.pubkeyToAddress = pubkeyToAddress;\n//# sourceMappingURL=addresses.js.map"]},"metadata":{},"sourceType":"script"}