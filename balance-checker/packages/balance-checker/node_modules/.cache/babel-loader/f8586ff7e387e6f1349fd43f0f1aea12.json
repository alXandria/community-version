{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.accountFromAny = void 0;\n\nconst math_1 = require(\"@cosmjs/math\");\n\nconst proto_signing_1 = require(\"@cosmjs/proto-signing\");\n\nconst utils_1 = require(\"@cosmjs/utils\");\n\nconst auth_1 = require(\"./codec/cosmos/auth/v1beta1/auth\");\n\nconst vesting_1 = require(\"./codec/cosmos/vesting/v1beta1/vesting\");\n\nfunction uint64FromProto(input) {\n  return math_1.Uint64.fromString(input.toString());\n}\n\nfunction accountFromBaseAccount(input) {\n  const {\n    address,\n    pubKey,\n    accountNumber,\n    sequence\n  } = input;\n  const pubkey = proto_signing_1.decodePubkey(pubKey);\n  return {\n    address: address,\n    pubkey: pubkey,\n    accountNumber: uint64FromProto(accountNumber).toNumber(),\n    sequence: uint64FromProto(sequence).toNumber()\n  };\n}\n/**\n * Takes an `Any` encoded account from the chain and extracts some common\n * `Account` information from it. This is supposed to support the most relevant\n * common Cosmos SDK account types. If you need support for exotic account types,\n * you'll need to write your own account decoder.\n */\n\n\nfunction accountFromAny(input) {\n  var _a, _b, _c, _d, _e, _f, _g;\n\n  const {\n    typeUrl,\n    value\n  } = input;\n\n  switch (typeUrl) {\n    // auth\n    case \"/cosmos.auth.v1beta1.BaseAccount\":\n      return accountFromBaseAccount(auth_1.BaseAccount.decode(value));\n\n    case \"/cosmos.auth.v1beta1.ModuleAccount\":\n      {\n        const baseAccount = auth_1.ModuleAccount.decode(value).baseAccount;\n        utils_1.assert(baseAccount);\n        return accountFromBaseAccount(baseAccount);\n      }\n    // vesting\n\n    case \"/cosmos.vesting.v1beta1.BaseVestingAccount\":\n      {\n        const baseAccount = (_a = vesting_1.BaseVestingAccount.decode(value)) === null || _a === void 0 ? void 0 : _a.baseAccount;\n        utils_1.assert(baseAccount);\n        return accountFromBaseAccount(baseAccount);\n      }\n\n    case \"/cosmos.vesting.v1beta1.ContinuousVestingAccount\":\n      {\n        const baseAccount = (_c = (_b = vesting_1.ContinuousVestingAccount.decode(value)) === null || _b === void 0 ? void 0 : _b.baseVestingAccount) === null || _c === void 0 ? void 0 : _c.baseAccount;\n        utils_1.assert(baseAccount);\n        return accountFromBaseAccount(baseAccount);\n      }\n\n    case \"/cosmos.vesting.v1beta1.DelayedVestingAccount\":\n      {\n        const baseAccount = (_e = (_d = vesting_1.DelayedVestingAccount.decode(value)) === null || _d === void 0 ? void 0 : _d.baseVestingAccount) === null || _e === void 0 ? void 0 : _e.baseAccount;\n        utils_1.assert(baseAccount);\n        return accountFromBaseAccount(baseAccount);\n      }\n\n    case \"/cosmos.vesting.v1beta1.PeriodicVestingAccount\":\n      {\n        const baseAccount = (_g = (_f = vesting_1.PeriodicVestingAccount.decode(value)) === null || _f === void 0 ? void 0 : _f.baseVestingAccount) === null || _g === void 0 ? void 0 : _g.baseAccount;\n        utils_1.assert(baseAccount);\n        return accountFromBaseAccount(baseAccount);\n      }\n\n    default:\n      throw new Error(`Unsupported type: '${typeUrl}'`);\n  }\n}\n\nexports.accountFromAny = accountFromAny;","map":{"version":3,"sources":["../src/accounts.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.accountFromAny = void 0;\nconst math_1 = require(\"@cosmjs/math\");\nconst proto_signing_1 = require(\"@cosmjs/proto-signing\");\nconst utils_1 = require(\"@cosmjs/utils\");\nconst auth_1 = require(\"./codec/cosmos/auth/v1beta1/auth\");\nconst vesting_1 = require(\"./codec/cosmos/vesting/v1beta1/vesting\");\nfunction uint64FromProto(input) {\n    return math_1.Uint64.fromString(input.toString());\n}\nfunction accountFromBaseAccount(input) {\n    const { address, pubKey, accountNumber, sequence } = input;\n    const pubkey = proto_signing_1.decodePubkey(pubKey);\n    return {\n        address: address,\n        pubkey: pubkey,\n        accountNumber: uint64FromProto(accountNumber).toNumber(),\n        sequence: uint64FromProto(sequence).toNumber(),\n    };\n}\n/**\n * Takes an `Any` encoded account from the chain and extracts some common\n * `Account` information from it. This is supposed to support the most relevant\n * common Cosmos SDK account types. If you need support for exotic account types,\n * you'll need to write your own account decoder.\n */\nfunction accountFromAny(input) {\n    var _a, _b, _c, _d, _e, _f, _g;\n    const { typeUrl, value } = input;\n    switch (typeUrl) {\n        // auth\n        case \"/cosmos.auth.v1beta1.BaseAccount\":\n            return accountFromBaseAccount(auth_1.BaseAccount.decode(value));\n        case \"/cosmos.auth.v1beta1.ModuleAccount\": {\n            const baseAccount = auth_1.ModuleAccount.decode(value).baseAccount;\n            utils_1.assert(baseAccount);\n            return accountFromBaseAccount(baseAccount);\n        }\n        // vesting\n        case \"/cosmos.vesting.v1beta1.BaseVestingAccount\": {\n            const baseAccount = (_a = vesting_1.BaseVestingAccount.decode(value)) === null || _a === void 0 ? void 0 : _a.baseAccount;\n            utils_1.assert(baseAccount);\n            return accountFromBaseAccount(baseAccount);\n        }\n        case \"/cosmos.vesting.v1beta1.ContinuousVestingAccount\": {\n            const baseAccount = (_c = (_b = vesting_1.ContinuousVestingAccount.decode(value)) === null || _b === void 0 ? void 0 : _b.baseVestingAccount) === null || _c === void 0 ? void 0 : _c.baseAccount;\n            utils_1.assert(baseAccount);\n            return accountFromBaseAccount(baseAccount);\n        }\n        case \"/cosmos.vesting.v1beta1.DelayedVestingAccount\": {\n            const baseAccount = (_e = (_d = vesting_1.DelayedVestingAccount.decode(value)) === null || _d === void 0 ? void 0 : _d.baseVestingAccount) === null || _e === void 0 ? void 0 : _e.baseAccount;\n            utils_1.assert(baseAccount);\n            return accountFromBaseAccount(baseAccount);\n        }\n        case \"/cosmos.vesting.v1beta1.PeriodicVestingAccount\": {\n            const baseAccount = (_g = (_f = vesting_1.PeriodicVestingAccount.decode(value)) === null || _f === void 0 ? void 0 : _f.baseVestingAccount) === null || _g === void 0 ? void 0 : _g.baseAccount;\n            utils_1.assert(baseAccount);\n            return accountFromBaseAccount(baseAccount);\n        }\n        default:\n            throw new Error(`Unsupported type: '${typeUrl}'`);\n    }\n}\nexports.accountFromAny = accountFromAny;\n//# sourceMappingURL=accounts.js.map"]},"metadata":{},"sourceType":"script"}