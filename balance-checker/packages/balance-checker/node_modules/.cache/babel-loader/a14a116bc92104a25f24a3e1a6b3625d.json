{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.encodeBlockId = exports.encodeVersion = exports.encodeBytes = exports.encodeTime = exports.encodeInt = exports.encodeString = exports.Integer = exports.dictionaryToStringMap = exports.may = exports.optional = exports.assertNotEmpty = exports.assertObject = exports.assertArray = exports.assertNumber = exports.assertString = exports.assertBoolean = exports.assertSet = void 0;\n\nconst encoding_1 = require(\"@cosmjs/encoding\");\n\nconst math_1 = require(\"@cosmjs/math\");\n/**\n * A runtime checker that ensures a given value is set (i.e. not undefined or null)\n *\n * This is used when you want to verify that data at runtime matches the expected type.\n */\n\n\nfunction assertSet(value) {\n  if (value === undefined) {\n    throw new Error(\"Value must not be undefined\");\n  }\n\n  if (value === null) {\n    throw new Error(\"Value must not be null\");\n  }\n\n  return value;\n}\n\nexports.assertSet = assertSet;\n/**\n * A runtime checker that ensures a given value is a boolean\n *\n * This is used when you want to verify that data at runtime matches the expected type.\n * This implies assertSet.\n */\n\nfunction assertBoolean(value) {\n  assertSet(value);\n\n  if (typeof value !== \"boolean\") {\n    throw new Error(\"Value must be a boolean\");\n  }\n\n  return value;\n}\n\nexports.assertBoolean = assertBoolean;\n/**\n * A runtime checker that ensures a given value is a string.\n *\n * This is used when you want to verify that data at runtime matches the expected type.\n * This implies assertSet.\n */\n\nfunction assertString(value) {\n  assertSet(value);\n\n  if (typeof value !== \"string\") {\n    throw new Error(\"Value must be a string\");\n  }\n\n  return value;\n}\n\nexports.assertString = assertString;\n/**\n * A runtime checker that ensures a given value is a number\n *\n * This is used when you want to verify that data at runtime matches the expected type.\n * This implies assertSet.\n */\n\nfunction assertNumber(value) {\n  assertSet(value);\n\n  if (typeof value !== \"number\") {\n    throw new Error(\"Value must be a number\");\n  }\n\n  return value;\n}\n\nexports.assertNumber = assertNumber;\n/**\n * A runtime checker that ensures a given value is an array\n *\n * This is used when you want to verify that data at runtime matches the expected type.\n * This implies assertSet.\n */\n\nfunction assertArray(value) {\n  assertSet(value);\n\n  if (!Array.isArray(value)) {\n    throw new Error(\"Value must be a an array\");\n  }\n\n  return value;\n}\n\nexports.assertArray = assertArray;\n/**\n * A runtime checker that ensures a given value is an object in the sense of JSON\n * (an unordered collection of keyâ€“value pairs where the keys are strings)\n *\n * This is used when you want to verify that data at runtime matches the expected type.\n * This implies assertSet.\n */\n\nfunction assertObject(value) {\n  assertSet(value);\n\n  if (typeof value !== \"object\") {\n    throw new Error(\"Value must be an object\");\n  } // Exclude special kind of objects like Array, Date or Uint8Array\n  // Object.prototype.toString() returns a specified value:\n  // http://www.ecma-international.org/ecma-262/7.0/index.html#sec-object.prototype.tostring\n\n\n  if (Object.prototype.toString.call(value) !== \"[object Object]\") {\n    throw new Error(\"Value must be a simple object\");\n  }\n\n  return value;\n}\n\nexports.assertObject = assertObject;\n/**\n * Throws an error if value matches the empty value for the\n * given type (array/string of length 0, number of value 0, ...)\n *\n * Otherwise returns the value.\n *\n * This implies assertSet\n */\n\nfunction assertNotEmpty(value) {\n  assertSet(value);\n\n  if (typeof value === \"number\" && value === 0) {\n    throw new Error(\"must provide a non-zero value\");\n  } else if (value.length === 0) {\n    throw new Error(\"must provide a non-empty value\");\n  }\n\n  return value;\n}\n\nexports.assertNotEmpty = assertNotEmpty; // optional uses the value or provides a default\n\nfunction optional(value, fallback) {\n  return value === undefined || value === null ? fallback : value;\n}\n\nexports.optional = optional; // may will run the transform if value is defined, otherwise returns undefined\n\nfunction may(transform, value) {\n  return value === undefined || value === null ? undefined : transform(value);\n}\n\nexports.may = may;\n\nfunction dictionaryToStringMap(obj) {\n  const out = new Map();\n\n  for (const key of Object.keys(obj)) {\n    const value = obj[key];\n\n    if (typeof value !== \"string\") {\n      throw new Error(\"Found dictionary value of type other than string\");\n    }\n\n    out.set(key, value);\n  }\n\n  return out;\n}\n\nexports.dictionaryToStringMap = dictionaryToStringMap;\n\nclass Integer {\n  static parse(input) {\n    const asInt = typeof input === \"number\" ? new math_1.Int53(input) : math_1.Int53.fromString(input);\n    return asInt.toNumber();\n  }\n\n  static encode(num) {\n    return new math_1.Int53(num).toString();\n  }\n\n}\n\nexports.Integer = Integer; // Encodings needed for hashing block headers\n// Several of these functions are inspired by https://github.com/nomic-io/js-tendermint/blob/tendermint-0.30/src/\n// See https://github.com/tendermint/go-amino/blob/v0.15.0/encoder.go#L193-L195\n\nfunction encodeString(s) {\n  const utf8 = encoding_1.toUtf8(s);\n  return Uint8Array.from([utf8.length, ...utf8]);\n}\n\nexports.encodeString = encodeString; // See https://github.com/tendermint/go-amino/blob/v0.15.0/encoder.go#L79-L87\n\nfunction encodeInt(n) {\n  // eslint-disable-next-line no-bitwise\n  return n >= 0x80 ? Uint8Array.from([n & 0xff | 0x80, ...encodeInt(n >> 7)]) : Uint8Array.from([n & 0xff]);\n}\n\nexports.encodeInt = encodeInt; // See https://github.com/tendermint/go-amino/blob/v0.15.0/encoder.go#L134-L178\n\nfunction encodeTime(time) {\n  const milliseconds = time.getTime();\n  const seconds = Math.floor(milliseconds / 1000);\n  const secondsArray = seconds ? [0x08, ...encodeInt(seconds)] : new Uint8Array();\n  const nanoseconds = (time.nanoseconds || 0) + milliseconds % 1000 * 1e6;\n  const nanosecondsArray = nanoseconds ? [0x10, ...encodeInt(nanoseconds)] : new Uint8Array();\n  return Uint8Array.from([...secondsArray, ...nanosecondsArray]);\n}\n\nexports.encodeTime = encodeTime; // See https://github.com/tendermint/go-amino/blob/v0.15.0/encoder.go#L180-L187\n\nfunction encodeBytes(bytes) {\n  // Since we're only dealing with short byte arrays we don't need a full VarBuffer implementation yet\n  if (bytes.length >= 0x80) throw new Error(\"Not implemented for byte arrays of length 128 or more\");\n  return bytes.length ? Uint8Array.from([bytes.length, ...bytes]) : new Uint8Array();\n}\n\nexports.encodeBytes = encodeBytes;\n\nfunction encodeVersion(version) {\n  const blockArray = version.block ? Uint8Array.from([0x08, ...encodeInt(version.block)]) : new Uint8Array();\n  const appArray = version.app ? Uint8Array.from([0x10, ...encodeInt(version.app)]) : new Uint8Array();\n  return Uint8Array.from([...blockArray, ...appArray]);\n}\n\nexports.encodeVersion = encodeVersion;\n\nfunction encodeBlockId(blockId) {\n  return Uint8Array.from([0x0a, blockId.hash.length, ...blockId.hash, 0x12, blockId.parts.hash.length + 4, 0x08, blockId.parts.total, 0x12, blockId.parts.hash.length, ...blockId.parts.hash]);\n}\n\nexports.encodeBlockId = encodeBlockId;","map":{"version":3,"sources":["../../src/tendermint34/encodings.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.encodeBlockId = exports.encodeVersion = exports.encodeBytes = exports.encodeTime = exports.encodeInt = exports.encodeString = exports.Integer = exports.dictionaryToStringMap = exports.may = exports.optional = exports.assertNotEmpty = exports.assertObject = exports.assertArray = exports.assertNumber = exports.assertString = exports.assertBoolean = exports.assertSet = void 0;\nconst encoding_1 = require(\"@cosmjs/encoding\");\nconst math_1 = require(\"@cosmjs/math\");\n/**\n * A runtime checker that ensures a given value is set (i.e. not undefined or null)\n *\n * This is used when you want to verify that data at runtime matches the expected type.\n */\nfunction assertSet(value) {\n    if (value === undefined) {\n        throw new Error(\"Value must not be undefined\");\n    }\n    if (value === null) {\n        throw new Error(\"Value must not be null\");\n    }\n    return value;\n}\nexports.assertSet = assertSet;\n/**\n * A runtime checker that ensures a given value is a boolean\n *\n * This is used when you want to verify that data at runtime matches the expected type.\n * This implies assertSet.\n */\nfunction assertBoolean(value) {\n    assertSet(value);\n    if (typeof value !== \"boolean\") {\n        throw new Error(\"Value must be a boolean\");\n    }\n    return value;\n}\nexports.assertBoolean = assertBoolean;\n/**\n * A runtime checker that ensures a given value is a string.\n *\n * This is used when you want to verify that data at runtime matches the expected type.\n * This implies assertSet.\n */\nfunction assertString(value) {\n    assertSet(value);\n    if (typeof value !== \"string\") {\n        throw new Error(\"Value must be a string\");\n    }\n    return value;\n}\nexports.assertString = assertString;\n/**\n * A runtime checker that ensures a given value is a number\n *\n * This is used when you want to verify that data at runtime matches the expected type.\n * This implies assertSet.\n */\nfunction assertNumber(value) {\n    assertSet(value);\n    if (typeof value !== \"number\") {\n        throw new Error(\"Value must be a number\");\n    }\n    return value;\n}\nexports.assertNumber = assertNumber;\n/**\n * A runtime checker that ensures a given value is an array\n *\n * This is used when you want to verify that data at runtime matches the expected type.\n * This implies assertSet.\n */\nfunction assertArray(value) {\n    assertSet(value);\n    if (!Array.isArray(value)) {\n        throw new Error(\"Value must be a an array\");\n    }\n    return value;\n}\nexports.assertArray = assertArray;\n/**\n * A runtime checker that ensures a given value is an object in the sense of JSON\n * (an unordered collection of keyâ€“value pairs where the keys are strings)\n *\n * This is used when you want to verify that data at runtime matches the expected type.\n * This implies assertSet.\n */\nfunction assertObject(value) {\n    assertSet(value);\n    if (typeof value !== \"object\") {\n        throw new Error(\"Value must be an object\");\n    }\n    // Exclude special kind of objects like Array, Date or Uint8Array\n    // Object.prototype.toString() returns a specified value:\n    // http://www.ecma-international.org/ecma-262/7.0/index.html#sec-object.prototype.tostring\n    if (Object.prototype.toString.call(value) !== \"[object Object]\") {\n        throw new Error(\"Value must be a simple object\");\n    }\n    return value;\n}\nexports.assertObject = assertObject;\n/**\n * Throws an error if value matches the empty value for the\n * given type (array/string of length 0, number of value 0, ...)\n *\n * Otherwise returns the value.\n *\n * This implies assertSet\n */\nfunction assertNotEmpty(value) {\n    assertSet(value);\n    if (typeof value === \"number\" && value === 0) {\n        throw new Error(\"must provide a non-zero value\");\n    }\n    else if (value.length === 0) {\n        throw new Error(\"must provide a non-empty value\");\n    }\n    return value;\n}\nexports.assertNotEmpty = assertNotEmpty;\n// optional uses the value or provides a default\nfunction optional(value, fallback) {\n    return value === undefined || value === null ? fallback : value;\n}\nexports.optional = optional;\n// may will run the transform if value is defined, otherwise returns undefined\nfunction may(transform, value) {\n    return value === undefined || value === null ? undefined : transform(value);\n}\nexports.may = may;\nfunction dictionaryToStringMap(obj) {\n    const out = new Map();\n    for (const key of Object.keys(obj)) {\n        const value = obj[key];\n        if (typeof value !== \"string\") {\n            throw new Error(\"Found dictionary value of type other than string\");\n        }\n        out.set(key, value);\n    }\n    return out;\n}\nexports.dictionaryToStringMap = dictionaryToStringMap;\nclass Integer {\n    static parse(input) {\n        const asInt = typeof input === \"number\" ? new math_1.Int53(input) : math_1.Int53.fromString(input);\n        return asInt.toNumber();\n    }\n    static encode(num) {\n        return new math_1.Int53(num).toString();\n    }\n}\nexports.Integer = Integer;\n// Encodings needed for hashing block headers\n// Several of these functions are inspired by https://github.com/nomic-io/js-tendermint/blob/tendermint-0.30/src/\n// See https://github.com/tendermint/go-amino/blob/v0.15.0/encoder.go#L193-L195\nfunction encodeString(s) {\n    const utf8 = encoding_1.toUtf8(s);\n    return Uint8Array.from([utf8.length, ...utf8]);\n}\nexports.encodeString = encodeString;\n// See https://github.com/tendermint/go-amino/blob/v0.15.0/encoder.go#L79-L87\nfunction encodeInt(n) {\n    // eslint-disable-next-line no-bitwise\n    return n >= 0x80 ? Uint8Array.from([(n & 0xff) | 0x80, ...encodeInt(n >> 7)]) : Uint8Array.from([n & 0xff]);\n}\nexports.encodeInt = encodeInt;\n// See https://github.com/tendermint/go-amino/blob/v0.15.0/encoder.go#L134-L178\nfunction encodeTime(time) {\n    const milliseconds = time.getTime();\n    const seconds = Math.floor(milliseconds / 1000);\n    const secondsArray = seconds ? [0x08, ...encodeInt(seconds)] : new Uint8Array();\n    const nanoseconds = (time.nanoseconds || 0) + (milliseconds % 1000) * 1e6;\n    const nanosecondsArray = nanoseconds ? [0x10, ...encodeInt(nanoseconds)] : new Uint8Array();\n    return Uint8Array.from([...secondsArray, ...nanosecondsArray]);\n}\nexports.encodeTime = encodeTime;\n// See https://github.com/tendermint/go-amino/blob/v0.15.0/encoder.go#L180-L187\nfunction encodeBytes(bytes) {\n    // Since we're only dealing with short byte arrays we don't need a full VarBuffer implementation yet\n    if (bytes.length >= 0x80)\n        throw new Error(\"Not implemented for byte arrays of length 128 or more\");\n    return bytes.length ? Uint8Array.from([bytes.length, ...bytes]) : new Uint8Array();\n}\nexports.encodeBytes = encodeBytes;\nfunction encodeVersion(version) {\n    const blockArray = version.block ? Uint8Array.from([0x08, ...encodeInt(version.block)]) : new Uint8Array();\n    const appArray = version.app ? Uint8Array.from([0x10, ...encodeInt(version.app)]) : new Uint8Array();\n    return Uint8Array.from([...blockArray, ...appArray]);\n}\nexports.encodeVersion = encodeVersion;\nfunction encodeBlockId(blockId) {\n    return Uint8Array.from([\n        0x0a,\n        blockId.hash.length,\n        ...blockId.hash,\n        0x12,\n        blockId.parts.hash.length + 4,\n        0x08,\n        blockId.parts.total,\n        0x12,\n        blockId.parts.hash.length,\n        ...blockId.parts.hash,\n    ]);\n}\nexports.encodeBlockId = encodeBlockId;\n//# sourceMappingURL=encodings.js.map"]},"metadata":{},"sourceType":"script"}