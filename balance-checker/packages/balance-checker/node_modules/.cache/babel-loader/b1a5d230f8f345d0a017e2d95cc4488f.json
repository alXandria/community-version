{"ast":null,"code":"const SemVer = require('../classes/semver');\n\nconst Range = require('../classes/range');\n\nconst gt = require('../functions/gt');\n\nconst minVersion = (range, loose) => {\n  range = new Range(range, loose);\n  let minver = new SemVer('0.0.0');\n\n  if (range.test(minver)) {\n    return minver;\n  }\n\n  minver = new SemVer('0.0.0-0');\n\n  if (range.test(minver)) {\n    return minver;\n  }\n\n  minver = null;\n\n  for (let i = 0; i < range.set.length; ++i) {\n    const comparators = range.set[i];\n    comparators.forEach(comparator => {\n      // Clone to avoid manipulating the comparator's semver object.\n      const compver = new SemVer(comparator.semver.version);\n\n      switch (comparator.operator) {\n        case '>':\n          if (compver.prerelease.length === 0) {\n            compver.patch++;\n          } else {\n            compver.prerelease.push(0);\n          }\n\n          compver.raw = compver.format();\n\n        /* fallthrough */\n\n        case '':\n        case '>=':\n          if (!minver || gt(minver, compver)) {\n            minver = compver;\n          }\n\n          break;\n\n        case '<':\n        case '<=':\n          /* Ignore maximum versions */\n          break;\n\n        /* istanbul ignore next */\n\n        default:\n          throw new Error(`Unexpected operation: ${comparator.operator}`);\n      }\n    });\n  }\n\n  if (minver && range.test(minver)) {\n    return minver;\n  }\n\n  return null;\n};\n\nmodule.exports = minVersion;","map":{"version":3,"sources":["/Users/makand/cosmwasm/dApps/node_modules/@cosmjs/ledger-amino/node_modules/semver/ranges/min-version.js"],"names":["SemVer","require","Range","gt","minVersion","range","loose","minver","test","i","set","length","comparators","forEach","comparator","compver","semver","version","operator","prerelease","patch","push","raw","format","Error","module","exports"],"mappings":"AAAA,MAAMA,MAAM,GAAGC,OAAO,CAAC,mBAAD,CAAtB;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,kBAAD,CAArB;;AACA,MAAME,EAAE,GAAGF,OAAO,CAAC,iBAAD,CAAlB;;AAEA,MAAMG,UAAU,GAAG,CAACC,KAAD,EAAQC,KAAR,KAAkB;AACnCD,EAAAA,KAAK,GAAG,IAAIH,KAAJ,CAAUG,KAAV,EAAiBC,KAAjB,CAAR;AAEA,MAAIC,MAAM,GAAG,IAAIP,MAAJ,CAAW,OAAX,CAAb;;AACA,MAAIK,KAAK,CAACG,IAAN,CAAWD,MAAX,CAAJ,EAAwB;AACtB,WAAOA,MAAP;AACD;;AAEDA,EAAAA,MAAM,GAAG,IAAIP,MAAJ,CAAW,SAAX,CAAT;;AACA,MAAIK,KAAK,CAACG,IAAN,CAAWD,MAAX,CAAJ,EAAwB;AACtB,WAAOA,MAAP;AACD;;AAEDA,EAAAA,MAAM,GAAG,IAAT;;AACA,OAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,KAAK,CAACK,GAAN,CAAUC,MAA9B,EAAsC,EAAEF,CAAxC,EAA2C;AACzC,UAAMG,WAAW,GAAGP,KAAK,CAACK,GAAN,CAAUD,CAAV,CAApB;AAEAG,IAAAA,WAAW,CAACC,OAAZ,CAAqBC,UAAD,IAAgB;AAClC;AACA,YAAMC,OAAO,GAAG,IAAIf,MAAJ,CAAWc,UAAU,CAACE,MAAX,CAAkBC,OAA7B,CAAhB;;AACA,cAAQH,UAAU,CAACI,QAAnB;AACE,aAAK,GAAL;AACE,cAAIH,OAAO,CAACI,UAAR,CAAmBR,MAAnB,KAA8B,CAAlC,EAAqC;AACnCI,YAAAA,OAAO,CAACK,KAAR;AACD,WAFD,MAEO;AACLL,YAAAA,OAAO,CAACI,UAAR,CAAmBE,IAAnB,CAAwB,CAAxB;AACD;;AACDN,UAAAA,OAAO,CAACO,GAAR,GAAcP,OAAO,CAACQ,MAAR,EAAd;;AACA;;AACF,aAAK,EAAL;AACA,aAAK,IAAL;AACE,cAAI,CAAChB,MAAD,IAAWJ,EAAE,CAACI,MAAD,EAASQ,OAAT,CAAjB,EAAoC;AAClCR,YAAAA,MAAM,GAAGQ,OAAT;AACD;;AACD;;AACF,aAAK,GAAL;AACA,aAAK,IAAL;AACE;AACA;;AACF;;AACA;AACE,gBAAM,IAAIS,KAAJ,CAAW,yBAAwBV,UAAU,CAACI,QAAS,EAAvD,CAAN;AArBJ;AAuBD,KA1BD;AA2BD;;AAED,MAAIX,MAAM,IAAIF,KAAK,CAACG,IAAN,CAAWD,MAAX,CAAd,EAAkC;AAChC,WAAOA,MAAP;AACD;;AAED,SAAO,IAAP;AACD,CAnDD;;AAoDAkB,MAAM,CAACC,OAAP,GAAiBtB,UAAjB","sourcesContent":["const SemVer = require('../classes/semver')\nconst Range = require('../classes/range')\nconst gt = require('../functions/gt')\n\nconst minVersion = (range, loose) => {\n  range = new Range(range, loose)\n\n  let minver = new SemVer('0.0.0')\n  if (range.test(minver)) {\n    return minver\n  }\n\n  minver = new SemVer('0.0.0-0')\n  if (range.test(minver)) {\n    return minver\n  }\n\n  minver = null\n  for (let i = 0; i < range.set.length; ++i) {\n    const comparators = range.set[i]\n\n    comparators.forEach((comparator) => {\n      // Clone to avoid manipulating the comparator's semver object.\n      const compver = new SemVer(comparator.semver.version)\n      switch (comparator.operator) {\n        case '>':\n          if (compver.prerelease.length === 0) {\n            compver.patch++\n          } else {\n            compver.prerelease.push(0)\n          }\n          compver.raw = compver.format()\n          /* fallthrough */\n        case '':\n        case '>=':\n          if (!minver || gt(minver, compver)) {\n            minver = compver\n          }\n          break\n        case '<':\n        case '<=':\n          /* Ignore maximum versions */\n          break\n        /* istanbul ignore next */\n        default:\n          throw new Error(`Unexpected operation: ${comparator.operator}`)\n      }\n    })\n  }\n\n  if (minver && range.test(minver)) {\n    return minver\n  }\n\n  return null\n}\nmodule.exports = minVersion\n"]},"metadata":{},"sourceType":"script"}