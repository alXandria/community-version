{"ast":null,"code":"const {\n  MAX_LENGTH\n} = require('../internal/constants');\n\nconst {\n  re,\n  t\n} = require('../internal/re');\n\nconst SemVer = require('../classes/semver');\n\nconst parse = (version, options) => {\n  if (!options || typeof options !== 'object') {\n    options = {\n      loose: !!options,\n      includePrerelease: false\n    };\n  }\n\n  if (version instanceof SemVer) {\n    return version;\n  }\n\n  if (typeof version !== 'string') {\n    return null;\n  }\n\n  if (version.length > MAX_LENGTH) {\n    return null;\n  }\n\n  const r = options.loose ? re[t.LOOSE] : re[t.FULL];\n\n  if (!r.test(version)) {\n    return null;\n  }\n\n  try {\n    return new SemVer(version, options);\n  } catch (er) {\n    return null;\n  }\n};\n\nmodule.exports = parse;","map":{"version":3,"sources":["/Users/makand/cosmwasm/dApps/node_modules/@cosmjs/ledger-amino/node_modules/semver/functions/parse.js"],"names":["MAX_LENGTH","require","re","t","SemVer","parse","version","options","loose","includePrerelease","length","r","LOOSE","FULL","test","er","module","exports"],"mappings":"AAAA,MAAM;AAACA,EAAAA;AAAD,IAAeC,OAAO,CAAC,uBAAD,CAA5B;;AACA,MAAM;AAAEC,EAAAA,EAAF;AAAMC,EAAAA;AAAN,IAAYF,OAAO,CAAC,gBAAD,CAAzB;;AACA,MAAMG,MAAM,GAAGH,OAAO,CAAC,mBAAD,CAAtB;;AAEA,MAAMI,KAAK,GAAG,CAACC,OAAD,EAAUC,OAAV,KAAsB;AAClC,MAAI,CAACA,OAAD,IAAY,OAAOA,OAAP,KAAmB,QAAnC,EAA6C;AAC3CA,IAAAA,OAAO,GAAG;AACRC,MAAAA,KAAK,EAAE,CAAC,CAACD,OADD;AAERE,MAAAA,iBAAiB,EAAE;AAFX,KAAV;AAID;;AAED,MAAIH,OAAO,YAAYF,MAAvB,EAA+B;AAC7B,WAAOE,OAAP;AACD;;AAED,MAAI,OAAOA,OAAP,KAAmB,QAAvB,EAAiC;AAC/B,WAAO,IAAP;AACD;;AAED,MAAIA,OAAO,CAACI,MAAR,GAAiBV,UAArB,EAAiC;AAC/B,WAAO,IAAP;AACD;;AAED,QAAMW,CAAC,GAAGJ,OAAO,CAACC,KAAR,GAAgBN,EAAE,CAACC,CAAC,CAACS,KAAH,CAAlB,GAA8BV,EAAE,CAACC,CAAC,CAACU,IAAH,CAA1C;;AACA,MAAI,CAACF,CAAC,CAACG,IAAF,CAAOR,OAAP,CAAL,EAAsB;AACpB,WAAO,IAAP;AACD;;AAED,MAAI;AACF,WAAO,IAAIF,MAAJ,CAAWE,OAAX,EAAoBC,OAApB,CAAP;AACD,GAFD,CAEE,OAAOQ,EAAP,EAAW;AACX,WAAO,IAAP;AACD;AACF,CA9BD;;AAgCAC,MAAM,CAACC,OAAP,GAAiBZ,KAAjB","sourcesContent":["const {MAX_LENGTH} = require('../internal/constants')\nconst { re, t } = require('../internal/re')\nconst SemVer = require('../classes/semver')\n\nconst parse = (version, options) => {\n  if (!options || typeof options !== 'object') {\n    options = {\n      loose: !!options,\n      includePrerelease: false\n    }\n  }\n\n  if (version instanceof SemVer) {\n    return version\n  }\n\n  if (typeof version !== 'string') {\n    return null\n  }\n\n  if (version.length > MAX_LENGTH) {\n    return null\n  }\n\n  const r = options.loose ? re[t.LOOSE] : re[t.FULL]\n  if (!r.test(version)) {\n    return null\n  }\n\n  try {\n    return new SemVer(version, options)\n  } catch (er) {\n    return null\n  }\n}\n\nmodule.exports = parse\n"]},"metadata":{},"sourceType":"script"}