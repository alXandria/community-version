{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.serializePathv1 = serializePathv1;\nexports.signSendChunkv1 = signSendChunkv1;\nexports.publicKeyv1 = publicKeyv1;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _common = require(\"./common\");\n\nfunction serializePathv1(path) {\n  if (path == null || path.length < 3) {\n    throw new Error(\"Invalid path.\");\n  }\n\n  if (path.length > 10) {\n    throw new Error(\"Invalid path. Length should be <= 10\");\n  }\n\n  var buf = Buffer.alloc(1 + 4 * path.length);\n  buf.writeUInt8(path.length, 0);\n\n  for (var i = 0; i < path.length; i += 1) {\n    var v = path[i];\n\n    if (i < 3) {\n      // eslint-disable-next-line no-bitwise\n      v |= 0x80000000; // Harden\n    }\n\n    buf.writeInt32LE(v, 1 + i * 4);\n  }\n\n  return buf;\n}\n\nfunction signSendChunkv1(_x, _x2, _x3, _x4) {\n  return _signSendChunkv.apply(this, arguments);\n}\n\nfunction _signSendChunkv() {\n  _signSendChunkv = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(app, chunkIdx, chunkNum, chunk) {\n    return _regenerator.default.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", app.transport.send(_common.CLA, _common.INS.SIGN_SECP256K1, chunkIdx, chunkNum, chunk, [_common.ERROR_CODE.NoError, 0x6984, 0x6a80]).then(function (response) {\n              var errorCodeData = response.slice(-2);\n              var returnCode = errorCodeData[0] * 256 + errorCodeData[1];\n              var errorMessage = (0, _common.errorCodeToString)(returnCode);\n\n              if (returnCode === 0x6a80 || returnCode === 0x6984) {\n                errorMessage = \"\".concat(errorMessage, \" : \").concat(response.slice(0, response.length - 2).toString(\"ascii\"));\n              }\n\n              var signature = null;\n\n              if (response.length > 2) {\n                signature = response.slice(0, response.length - 2);\n              }\n\n              return {\n                signature: signature,\n                return_code: returnCode,\n                error_message: errorMessage\n              };\n            }, _common.processErrorResponse));\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _signSendChunkv.apply(this, arguments);\n}\n\nfunction compressPublicKey(publicKey) {\n  if (publicKey.length !== 65) {\n    throw new Error(\"decompressed public key length should be 65 bytes\");\n  }\n\n  var y = publicKey.slice(33, 65); // eslint-disable-next-line no-bitwise\n\n  var z = Buffer.from([2 + (y[y.length - 1] & 1)]);\n  return Buffer.concat([z, publicKey.slice(1, 33)]);\n}\n\nfunction publicKeyv1(_x5, _x6) {\n  return _publicKeyv.apply(this, arguments);\n}\n\nfunction _publicKeyv() {\n  _publicKeyv = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2(app, data) {\n    return _regenerator.default.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            return _context2.abrupt(\"return\", app.transport.send(_common.CLA, _common.INS.INS_PUBLIC_KEY_SECP256K1, 0, 0, data, [_common.ERROR_CODE.NoError]).then(function (response) {\n              var errorCodeData = response.slice(-2);\n              var returnCode = errorCodeData[0] * 256 + errorCodeData[1];\n              var pk = Buffer.from(response.slice(0, 65));\n              return {\n                pk: pk,\n                compressed_pk: compressPublicKey(pk),\n                return_code: returnCode,\n                error_message: (0, _common.errorCodeToString)(returnCode)\n              };\n            }, _common.processErrorResponse));\n\n          case 1:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _publicKeyv.apply(this, arguments);\n}","map":{"version":3,"sources":["/Users/makand/cosmwasm/dApps/node_modules/ledger-cosmos-js/dist/helperV1.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","serializePathv1","signSendChunkv1","publicKeyv1","_regenerator","_asyncToGenerator2","_common","path","length","Error","buf","Buffer","alloc","writeUInt8","i","v","writeInt32LE","_x","_x2","_x3","_x4","_signSendChunkv","apply","arguments","default","mark","_callee","app","chunkIdx","chunkNum","chunk","wrap","_callee$","_context","prev","next","abrupt","transport","send","CLA","INS","SIGN_SECP256K1","ERROR_CODE","NoError","then","response","errorCodeData","slice","returnCode","errorMessage","errorCodeToString","concat","toString","signature","return_code","error_message","processErrorResponse","stop","compressPublicKey","publicKey","y","z","from","_x5","_x6","_publicKeyv","_callee2","data","_callee2$","_context2","INS_PUBLIC_KEY_SECP256K1","pk","compressed_pk"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.serializePathv1 = serializePathv1;\nexports.signSendChunkv1 = signSendChunkv1;\nexports.publicKeyv1 = publicKeyv1;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _common = require(\"./common\");\n\nfunction serializePathv1(path) {\n  if (path == null || path.length < 3) {\n    throw new Error(\"Invalid path.\");\n  }\n\n  if (path.length > 10) {\n    throw new Error(\"Invalid path. Length should be <= 10\");\n  }\n\n  var buf = Buffer.alloc(1 + 4 * path.length);\n  buf.writeUInt8(path.length, 0);\n\n  for (var i = 0; i < path.length; i += 1) {\n    var v = path[i];\n\n    if (i < 3) {\n      // eslint-disable-next-line no-bitwise\n      v |= 0x80000000; // Harden\n    }\n\n    buf.writeInt32LE(v, 1 + i * 4);\n  }\n\n  return buf;\n}\n\nfunction signSendChunkv1(_x, _x2, _x3, _x4) {\n  return _signSendChunkv.apply(this, arguments);\n}\n\nfunction _signSendChunkv() {\n  _signSendChunkv = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(app, chunkIdx, chunkNum, chunk) {\n    return _regenerator.default.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", app.transport.send(_common.CLA, _common.INS.SIGN_SECP256K1, chunkIdx, chunkNum, chunk, [_common.ERROR_CODE.NoError, 0x6984, 0x6a80]).then(function (response) {\n              var errorCodeData = response.slice(-2);\n              var returnCode = errorCodeData[0] * 256 + errorCodeData[1];\n              var errorMessage = (0, _common.errorCodeToString)(returnCode);\n\n              if (returnCode === 0x6a80 || returnCode === 0x6984) {\n                errorMessage = \"\".concat(errorMessage, \" : \").concat(response.slice(0, response.length - 2).toString(\"ascii\"));\n              }\n\n              var signature = null;\n\n              if (response.length > 2) {\n                signature = response.slice(0, response.length - 2);\n              }\n\n              return {\n                signature: signature,\n                return_code: returnCode,\n                error_message: errorMessage\n              };\n            }, _common.processErrorResponse));\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _signSendChunkv.apply(this, arguments);\n}\n\nfunction compressPublicKey(publicKey) {\n  if (publicKey.length !== 65) {\n    throw new Error(\"decompressed public key length should be 65 bytes\");\n  }\n\n  var y = publicKey.slice(33, 65); // eslint-disable-next-line no-bitwise\n\n  var z = Buffer.from([2 + (y[y.length - 1] & 1)]);\n  return Buffer.concat([z, publicKey.slice(1, 33)]);\n}\n\nfunction publicKeyv1(_x5, _x6) {\n  return _publicKeyv.apply(this, arguments);\n}\n\nfunction _publicKeyv() {\n  _publicKeyv = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2(app, data) {\n    return _regenerator.default.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            return _context2.abrupt(\"return\", app.transport.send(_common.CLA, _common.INS.INS_PUBLIC_KEY_SECP256K1, 0, 0, data, [_common.ERROR_CODE.NoError]).then(function (response) {\n              var errorCodeData = response.slice(-2);\n              var returnCode = errorCodeData[0] * 256 + errorCodeData[1];\n              var pk = Buffer.from(response.slice(0, 65));\n              return {\n                pk: pk,\n                compressed_pk: compressPublicKey(pk),\n                return_code: returnCode,\n                error_message: (0, _common.errorCodeToString)(returnCode)\n              };\n            }, _common.processErrorResponse));\n\n          case 1:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _publicKeyv.apply(this, arguments);\n}"]},"metadata":{},"sourceType":"script"}