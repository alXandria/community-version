{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.buildFeeTable = exports.GasPrice = void 0;\n\nconst amino_1 = require(\"@cosmjs/amino\");\n\nconst math_1 = require(\"@cosmjs/math\");\n/**\n * Denom checker for the Cosmos SDK 0.39 denom pattern\n * (https://github.com/cosmos/cosmos-sdk/blob/v0.39.3/types/coin.go#L597-L598).\n *\n * This is like a regexp but with helpful error messages.\n */\n\n\nfunction checkDenom(denom) {\n  if (denom.length < 3 || denom.length > 16) {\n    throw new Error(\"Denom must be between 3 and 16 characters\");\n  }\n\n  if (denom.match(/[^a-z0-9]/)) {\n    throw new Error(\"Denom must only contain lower case letters a-z and digits 0-9\");\n  }\n}\n/**\n * A gas price, i.e. the price of a single unit of gas. This is typically a fraction of\n * the smallest fee token unit, such as 0.012utoken.\n */\n\n\nclass GasPrice {\n  constructor(amount, denom) {\n    this.amount = amount;\n    this.denom = denom;\n  }\n  /**\n   * Parses a gas price formatted as `<amount><denom>`, e.g. `GasPrice.fromString(\"0.012utoken\")`.\n   *\n   * The denom must match the Cosmos SDK 0.39 pattern (https://github.com/cosmos/cosmos-sdk/blob/v0.39.3/types/coin.go#L597-L598).\n   * See `GasPrice` in @cosmjs/stargate for a more generic matcher.\n   */\n\n\n  static fromString(gasPrice) {\n    // Use Decimal.fromUserInput and checkDenom for detailed checks and helpful error messages\n    const matchResult = gasPrice.match(/^([0-9.]+)([a-z][a-z0-9]*)$/i);\n\n    if (!matchResult) {\n      throw new Error(\"Invalid gas price string\");\n    }\n\n    const [_, amount, denom] = matchResult;\n    checkDenom(denom);\n    const fractionalDigits = 18;\n    const decimalAmount = math_1.Decimal.fromUserInput(amount, fractionalDigits);\n    return new GasPrice(decimalAmount, denom);\n  }\n\n}\n\nexports.GasPrice = GasPrice;\n\nfunction calculateFee(gasLimit, {\n  denom,\n  amount: gasPriceAmount\n}) {\n  const amount = Math.ceil(gasPriceAmount.multiply(new math_1.Uint53(gasLimit)).toFloatApproximation());\n  return {\n    amount: amino_1.coins(amount, denom),\n    gas: gasLimit.toString()\n  };\n}\n\nfunction buildFeeTable(gasPrice, defaultGasLimits, gasLimits) {\n  return Object.entries(defaultGasLimits).reduce((feeTable, [type, defaultGasLimit]) => Object.assign(Object.assign({}, feeTable), {\n    [type]: calculateFee(gasLimits[type] || defaultGasLimit, gasPrice)\n  }), {});\n}\n\nexports.buildFeeTable = buildFeeTable;","map":{"version":3,"sources":["../src/fee.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,OAAA,GAAA,OAAA,CAAA,eAAA,CAAA;;AACA,MAAA,MAAA,GAAA,OAAA,CAAA,cAAA,CAAA;AAIA;;;;;;;;AAMA,SAAS,UAAT,CAAoB,KAApB,EAAiC;AAC/B,MAAI,KAAK,CAAC,MAAN,GAAe,CAAf,IAAoB,KAAK,CAAC,MAAN,GAAe,EAAvC,EAA2C;AACzC,UAAM,IAAI,KAAJ,CAAU,2CAAV,CAAN;AACD;;AACD,MAAI,KAAK,CAAC,KAAN,CAAY,WAAZ,CAAJ,EAA8B;AAC5B,UAAM,IAAI,KAAJ,CAAU,+DAAV,CAAN;AACD;AACF;AAED;;;;;;AAIA,MAAa,QAAb,CAAqB;AAInB,EAAA,WAAA,CAAmB,MAAnB,EAAoC,KAApC,EAAiD;AAC/C,SAAK,MAAL,GAAc,MAAd;AACA,SAAK,KAAL,GAAa,KAAb;AACD;AAED;;;;;;;;AAMO,SAAO,UAAP,CAAkB,QAAlB,EAAkC;AACvC;AACA,UAAM,WAAW,GAAG,QAAQ,CAAC,KAAT,CAAe,8BAAf,CAApB;;AACA,QAAI,CAAC,WAAL,EAAkB;AAChB,YAAM,IAAI,KAAJ,CAAU,0BAAV,CAAN;AACD;;AACD,UAAM,CAAC,CAAD,EAAI,MAAJ,EAAY,KAAZ,IAAqB,WAA3B;AACA,IAAA,UAAU,CAAC,KAAD,CAAV;AACA,UAAM,gBAAgB,GAAG,EAAzB;AACA,UAAM,aAAa,GAAG,MAAA,CAAA,OAAA,CAAQ,aAAR,CAAsB,MAAtB,EAA8B,gBAA9B,CAAtB;AACA,WAAO,IAAI,QAAJ,CAAa,aAAb,EAA4B,KAA5B,CAAP;AACD;;AA1BkB;;AAArB,OAAA,CAAA,QAAA,GAAA,QAAA;;AAiCA,SAAS,YAAT,CAAsB,QAAtB,EAAwC;AAAE,EAAA,KAAF;AAAS,EAAA,MAAM,EAAE;AAAjB,CAAxC,EAAmF;AACjF,QAAM,MAAM,GAAG,IAAI,CAAC,IAAL,CAAU,cAAc,CAAC,QAAf,CAAwB,IAAI,MAAA,CAAA,MAAJ,CAAW,QAAX,CAAxB,EAA8C,oBAA9C,EAAV,CAAf;AACA,SAAO;AACL,IAAA,MAAM,EAAE,OAAA,CAAA,KAAA,CAAM,MAAN,EAAc,KAAd,CADH;AAEL,IAAA,GAAG,EAAE,QAAQ,CAAC,QAAT;AAFA,GAAP;AAID;;AAED,SAAgB,aAAhB,CACE,QADF,EAEE,gBAFF,EAGE,SAHF,EAGkC;AAEhC,SAAO,MAAM,CAAC,OAAP,CAAe,gBAAf,EAAiC,MAAjC,CACL,CAAC,QAAD,EAAW,CAAC,IAAD,EAAO,eAAP,CAAX,KAAuC,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAClC,QADkC,CAAA,EAC1B;AACX,KAAC,IAAD,GAAQ,YAAY,CAAC,SAAS,CAAC,IAAD,CAAT,IAAmB,eAApB,EAAqC,QAArC;AADT,GAD0B,CADlC,EAKL,EALK,CAAP;AAOD;;AAZD,OAAA,CAAA,aAAA,GAAA,aAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.buildFeeTable = exports.GasPrice = void 0;\nconst amino_1 = require(\"@cosmjs/amino\");\nconst math_1 = require(\"@cosmjs/math\");\n/**\n * Denom checker for the Cosmos SDK 0.39 denom pattern\n * (https://github.com/cosmos/cosmos-sdk/blob/v0.39.3/types/coin.go#L597-L598).\n *\n * This is like a regexp but with helpful error messages.\n */\nfunction checkDenom(denom) {\n    if (denom.length < 3 || denom.length > 16) {\n        throw new Error(\"Denom must be between 3 and 16 characters\");\n    }\n    if (denom.match(/[^a-z0-9]/)) {\n        throw new Error(\"Denom must only contain lower case letters a-z and digits 0-9\");\n    }\n}\n/**\n * A gas price, i.e. the price of a single unit of gas. This is typically a fraction of\n * the smallest fee token unit, such as 0.012utoken.\n */\nclass GasPrice {\n    constructor(amount, denom) {\n        this.amount = amount;\n        this.denom = denom;\n    }\n    /**\n     * Parses a gas price formatted as `<amount><denom>`, e.g. `GasPrice.fromString(\"0.012utoken\")`.\n     *\n     * The denom must match the Cosmos SDK 0.39 pattern (https://github.com/cosmos/cosmos-sdk/blob/v0.39.3/types/coin.go#L597-L598).\n     * See `GasPrice` in @cosmjs/stargate for a more generic matcher.\n     */\n    static fromString(gasPrice) {\n        // Use Decimal.fromUserInput and checkDenom for detailed checks and helpful error messages\n        const matchResult = gasPrice.match(/^([0-9.]+)([a-z][a-z0-9]*)$/i);\n        if (!matchResult) {\n            throw new Error(\"Invalid gas price string\");\n        }\n        const [_, amount, denom] = matchResult;\n        checkDenom(denom);\n        const fractionalDigits = 18;\n        const decimalAmount = math_1.Decimal.fromUserInput(amount, fractionalDigits);\n        return new GasPrice(decimalAmount, denom);\n    }\n}\nexports.GasPrice = GasPrice;\nfunction calculateFee(gasLimit, { denom, amount: gasPriceAmount }) {\n    const amount = Math.ceil(gasPriceAmount.multiply(new math_1.Uint53(gasLimit)).toFloatApproximation());\n    return {\n        amount: amino_1.coins(amount, denom),\n        gas: gasLimit.toString(),\n    };\n}\nfunction buildFeeTable(gasPrice, defaultGasLimits, gasLimits) {\n    return Object.entries(defaultGasLimits).reduce((feeTable, [type, defaultGasLimit]) => (Object.assign(Object.assign({}, feeTable), { [type]: calculateFee(gasLimits[type] || defaultGasLimit, gasPrice) })), {});\n}\nexports.buildFeeTable = buildFeeTable;\n//# sourceMappingURL=fee.js.map"]},"metadata":{},"sourceType":"script"}