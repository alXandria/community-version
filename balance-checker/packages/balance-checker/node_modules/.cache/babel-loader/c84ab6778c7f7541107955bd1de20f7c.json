{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isWrappedStdTx = exports.makeStdTx = exports.isStdTx = void 0;\n\nfunction isStdTx(txValue) {\n  const {\n    memo,\n    msg,\n    fee,\n    signatures\n  } = txValue;\n  return typeof memo === \"string\" && Array.isArray(msg) && typeof fee === \"object\" && Array.isArray(signatures);\n}\n\nexports.isStdTx = isStdTx;\n\nfunction makeStdTx(content, signatures) {\n  return {\n    msg: content.msgs,\n    fee: content.fee,\n    memo: content.memo,\n    signatures: Array.isArray(signatures) ? signatures : [signatures]\n  };\n}\n\nexports.makeStdTx = makeStdTx;\n\nfunction isWrappedStdTx(wrapped) {\n  return wrapped.type === \"cosmos-sdk/StdTx\" && isStdTx(wrapped.value);\n}\n\nexports.isWrappedStdTx = isWrappedStdTx;","map":{"version":3,"sources":["../src/tx.ts"],"names":[],"mappings":";;;;;;;AAcA,SAAgB,OAAhB,CAAwB,OAAxB,EAAwC;AACtC,QAAM;AAAE,IAAA,IAAF;AAAQ,IAAA,GAAR;AAAa,IAAA,GAAb;AAAkB,IAAA;AAAlB,MAAiC,OAAvC;AACA,SACE,OAAO,IAAP,KAAgB,QAAhB,IAA4B,KAAK,CAAC,OAAN,CAAc,GAAd,CAA5B,IAAkD,OAAO,GAAP,KAAe,QAAjE,IAA6E,KAAK,CAAC,OAAN,CAAc,UAAd,CAD/E;AAGD;;AALD,OAAA,CAAA,OAAA,GAAA,OAAA;;AAOA,SAAgB,SAAhB,CACE,OADF,EAEE,UAFF,EAEoD;AAElD,SAAO;AACL,IAAA,GAAG,EAAE,OAAO,CAAC,IADR;AAEL,IAAA,GAAG,EAAE,OAAO,CAAC,GAFR;AAGL,IAAA,IAAI,EAAE,OAAO,CAAC,IAHT;AAIL,IAAA,UAAU,EAAE,KAAK,CAAC,OAAN,CAAc,UAAd,IAA4B,UAA5B,GAAyC,CAAC,UAAD;AAJhD,GAAP;AAMD;;AAVD,OAAA,CAAA,SAAA,GAAA,SAAA;;AA4BA,SAAgB,cAAhB,CAA+B,OAA/B,EAAiD;AAC/C,SAAQ,OAAwB,CAAC,IAAzB,KAAkC,kBAAlC,IAAwD,OAAO,CAAC,OAAO,CAAC,KAAT,CAAvE;AACD;;AAFD,OAAA,CAAA,cAAA,GAAA,cAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isWrappedStdTx = exports.makeStdTx = exports.isStdTx = void 0;\nfunction isStdTx(txValue) {\n    const { memo, msg, fee, signatures } = txValue;\n    return (typeof memo === \"string\" && Array.isArray(msg) && typeof fee === \"object\" && Array.isArray(signatures));\n}\nexports.isStdTx = isStdTx;\nfunction makeStdTx(content, signatures) {\n    return {\n        msg: content.msgs,\n        fee: content.fee,\n        memo: content.memo,\n        signatures: Array.isArray(signatures) ? signatures : [signatures],\n    };\n}\nexports.makeStdTx = makeStdTx;\nfunction isWrappedStdTx(wrapped) {\n    return wrapped.type === \"cosmos-sdk/StdTx\" && isStdTx(wrapped.value);\n}\nexports.isWrappedStdTx = isWrappedStdTx;\n//# sourceMappingURL=tx.js.map"]},"metadata":{},"sourceType":"script"}