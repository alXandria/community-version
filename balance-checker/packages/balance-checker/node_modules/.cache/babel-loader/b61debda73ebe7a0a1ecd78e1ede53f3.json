{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.HttpClient = void 0;\n\nconst json_rpc_1 = require(\"@cosmjs/json-rpc\");\n\nconst axios_1 = __importDefault(require(\"axios\"));\n\nconst rpcclient_1 = require(\"./rpcclient\");\n\nfunction filterBadStatus(res) {\n  if (res.status >= 400) {\n    throw new Error(`Bad status on response: ${res.status}`);\n  }\n\n  return res;\n}\n/**\n * Helper to work around missing CORS support in Tendermint (https://github.com/tendermint/tendermint/pull/2800)\n *\n * For some reason, fetch does not complain about missing server-side CORS support.\n */\n\n\nasync function http(method, url, request) {\n  if (typeof fetch !== \"undefined\") {\n    const body = request ? JSON.stringify(request) : undefined;\n    return fetch(url, {\n      method: method,\n      body: body\n    }).then(filterBadStatus).then(res => res.json());\n  } else {\n    return axios_1.default.request({\n      url: url,\n      method: method,\n      data: request\n    }).then(res => res.data);\n  }\n}\n\nclass HttpClient {\n  constructor(url = \"http://localhost:46657\") {\n    // accept host.name:port and assume http protocol\n    this.url = rpcclient_1.hasProtocol(url) ? url : \"http://\" + url;\n  }\n\n  disconnect() {// nothing to be done\n  }\n\n  async execute(request) {\n    const response = json_rpc_1.parseJsonRpcResponse(await http(\"POST\", this.url, request));\n\n    if (json_rpc_1.isJsonRpcErrorResponse(response)) {\n      throw new Error(JSON.stringify(response.error));\n    }\n\n    return response;\n  }\n\n}\n\nexports.HttpClient = HttpClient;","map":{"version":3,"sources":["../../src/rpcclients/httpclient.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,MAAA,UAAA,GAAA,OAAA,CAAA,kBAAA,CAAA;;AAMA,MAAA,OAAA,GAAA,eAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AAEA,MAAA,WAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AAMA,SAAS,eAAT,CAAyB,GAAzB,EAAiC;AAC/B,MAAI,GAAG,CAAC,MAAJ,IAAc,GAAlB,EAAuB;AACrB,UAAM,IAAI,KAAJ,CAAU,2BAA2B,GAAG,CAAC,MAAM,EAA/C,CAAN;AACD;;AACD,SAAO,GAAP;AACD;AAED;;;;;;;AAKA,eAAe,IAAf,CAAoB,MAApB,EAAoC,GAApC,EAAiD,OAAjD,EAA8D;AAC5D,MAAI,OAAO,KAAP,KAAiB,WAArB,EAAkC;AAChC,UAAM,IAAI,GAAG,OAAO,GAAG,IAAI,CAAC,SAAL,CAAe,OAAf,CAAH,GAA6B,SAAjD;AACA,WAAO,KAAK,CAAC,GAAD,EAAM;AAAE,MAAA,MAAM,EAAE,MAAV;AAAkB,MAAA,IAAI,EAAE;AAAxB,KAAN,CAAL,CACJ,IADI,CACC,eADD,EAEJ,IAFI,CAEE,GAAD,IAAc,GAAG,CAAC,IAAJ,EAFf,CAAP;AAGD,GALD,MAKO;AACL,WAAO,OAAA,CAAA,OAAA,CAAM,OAAN,CAAc;AAAE,MAAA,GAAG,EAAE,GAAP;AAAY,MAAA,MAAM,EAAE,MAApB;AAA4B,MAAA,IAAI,EAAE;AAAlC,KAAd,EAA2D,IAA3D,CAAiE,GAAD,IAAS,GAAG,CAAC,IAA7E,CAAP;AACD;AACF;;AAED,MAAa,UAAb,CAAuB;AAGrB,EAAA,WAAA,CAAmB,GAAG,GAAG,wBAAzB,EAAiD;AAC/C;AACA,SAAK,GAAL,GAAW,WAAA,CAAA,WAAA,CAAY,GAAZ,IAAmB,GAAnB,GAAyB,YAAY,GAAhD;AACD;;AAEM,EAAA,UAAU,GAAA,CACf;AACD;;AAEM,QAAM,OAAN,CAAc,OAAd,EAAqC;AAC1C,UAAM,QAAQ,GAAG,UAAA,CAAA,oBAAA,CAAqB,MAAM,IAAI,CAAC,MAAD,EAAS,KAAK,GAAd,EAAmB,OAAnB,CAA/B,CAAjB;;AACA,QAAI,UAAA,CAAA,sBAAA,CAAuB,QAAvB,CAAJ,EAAsC;AACpC,YAAM,IAAI,KAAJ,CAAU,IAAI,CAAC,SAAL,CAAe,QAAQ,CAAC,KAAxB,CAAV,CAAN;AACD;;AACD,WAAO,QAAP;AACD;;AAlBoB;;AAAvB,OAAA,CAAA,UAAA,GAAA,UAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.HttpClient = void 0;\nconst json_rpc_1 = require(\"@cosmjs/json-rpc\");\nconst axios_1 = __importDefault(require(\"axios\"));\nconst rpcclient_1 = require(\"./rpcclient\");\nfunction filterBadStatus(res) {\n    if (res.status >= 400) {\n        throw new Error(`Bad status on response: ${res.status}`);\n    }\n    return res;\n}\n/**\n * Helper to work around missing CORS support in Tendermint (https://github.com/tendermint/tendermint/pull/2800)\n *\n * For some reason, fetch does not complain about missing server-side CORS support.\n */\nasync function http(method, url, request) {\n    if (typeof fetch !== \"undefined\") {\n        const body = request ? JSON.stringify(request) : undefined;\n        return fetch(url, { method: method, body: body })\n            .then(filterBadStatus)\n            .then((res) => res.json());\n    }\n    else {\n        return axios_1.default.request({ url: url, method: method, data: request }).then((res) => res.data);\n    }\n}\nclass HttpClient {\n    constructor(url = \"http://localhost:46657\") {\n        // accept host.name:port and assume http protocol\n        this.url = rpcclient_1.hasProtocol(url) ? url : \"http://\" + url;\n    }\n    disconnect() {\n        // nothing to be done\n    }\n    async execute(request) {\n        const response = json_rpc_1.parseJsonRpcResponse(await http(\"POST\", this.url, request));\n        if (json_rpc_1.isJsonRpcErrorResponse(response)) {\n            throw new Error(JSON.stringify(response.error));\n        }\n        return response;\n    }\n}\nexports.HttpClient = HttpClient;\n//# sourceMappingURL=httpclient.js.map"]},"metadata":{},"sourceType":"script"}