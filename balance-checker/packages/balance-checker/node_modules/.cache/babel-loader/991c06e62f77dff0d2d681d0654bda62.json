{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SignatureDescriptor_Data_Multi = exports.SignatureDescriptor_Data_Single = exports.SignatureDescriptor_Data = exports.SignatureDescriptor = exports.SignatureDescriptors = exports.signModeToJSON = exports.signModeFromJSON = exports.SignMode = exports.protobufPackage = void 0;\n/* eslint-disable */\n\nconst long_1 = __importDefault(require(\"long\"));\n\nconst minimal_1 = __importDefault(require(\"protobufjs/minimal\"));\n\nconst any_1 = require(\"../../../../google/protobuf/any\");\n\nconst multisig_1 = require(\"../../../../cosmos/crypto/multisig/v1beta1/multisig\");\n\nexports.protobufPackage = \"cosmos.tx.signing.v1beta1\";\n/** SignMode represents a signing mode with its own security guarantees. */\n\nvar SignMode;\n\n(function (SignMode) {\n  /**\n   * SIGN_MODE_UNSPECIFIED - SIGN_MODE_UNSPECIFIED specifies an unknown signing mode and will be\n   * rejected\n   */\n  SignMode[SignMode[\"SIGN_MODE_UNSPECIFIED\"] = 0] = \"SIGN_MODE_UNSPECIFIED\";\n  /**\n   * SIGN_MODE_DIRECT - SIGN_MODE_DIRECT specifies a signing mode which uses SignDoc and is\n   * verified with raw bytes from Tx\n   */\n\n  SignMode[SignMode[\"SIGN_MODE_DIRECT\"] = 1] = \"SIGN_MODE_DIRECT\";\n  /**\n   * SIGN_MODE_TEXTUAL - SIGN_MODE_TEXTUAL is a future signing mode that will verify some\n   * human-readable textual representation on top of the binary representation\n   * from SIGN_MODE_DIRECT\n   */\n\n  SignMode[SignMode[\"SIGN_MODE_TEXTUAL\"] = 2] = \"SIGN_MODE_TEXTUAL\";\n  /**\n   * SIGN_MODE_LEGACY_AMINO_JSON - SIGN_MODE_LEGACY_AMINO_JSON is a backwards compatibility mode which uses\n   * Amino JSON and will be removed in the future\n   */\n\n  SignMode[SignMode[\"SIGN_MODE_LEGACY_AMINO_JSON\"] = 127] = \"SIGN_MODE_LEGACY_AMINO_JSON\";\n  SignMode[SignMode[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(SignMode = exports.SignMode || (exports.SignMode = {}));\n\nfunction signModeFromJSON(object) {\n  switch (object) {\n    case 0:\n    case \"SIGN_MODE_UNSPECIFIED\":\n      return SignMode.SIGN_MODE_UNSPECIFIED;\n\n    case 1:\n    case \"SIGN_MODE_DIRECT\":\n      return SignMode.SIGN_MODE_DIRECT;\n\n    case 2:\n    case \"SIGN_MODE_TEXTUAL\":\n      return SignMode.SIGN_MODE_TEXTUAL;\n\n    case 127:\n    case \"SIGN_MODE_LEGACY_AMINO_JSON\":\n      return SignMode.SIGN_MODE_LEGACY_AMINO_JSON;\n\n    case -1:\n    case \"UNRECOGNIZED\":\n    default:\n      return SignMode.UNRECOGNIZED;\n  }\n}\n\nexports.signModeFromJSON = signModeFromJSON;\n\nfunction signModeToJSON(object) {\n  switch (object) {\n    case SignMode.SIGN_MODE_UNSPECIFIED:\n      return \"SIGN_MODE_UNSPECIFIED\";\n\n    case SignMode.SIGN_MODE_DIRECT:\n      return \"SIGN_MODE_DIRECT\";\n\n    case SignMode.SIGN_MODE_TEXTUAL:\n      return \"SIGN_MODE_TEXTUAL\";\n\n    case SignMode.SIGN_MODE_LEGACY_AMINO_JSON:\n      return \"SIGN_MODE_LEGACY_AMINO_JSON\";\n\n    default:\n      return \"UNKNOWN\";\n  }\n}\n\nexports.signModeToJSON = signModeToJSON;\nconst baseSignatureDescriptors = {};\nexports.SignatureDescriptors = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    for (const v of message.signatures) {\n      exports.SignatureDescriptor.encode(v, writer.uint32(10).fork()).ldelim();\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseSignatureDescriptors);\n    message.signatures = [];\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.signatures.push(exports.SignatureDescriptor.decode(reader, reader.uint32()));\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseSignatureDescriptors);\n    message.signatures = [];\n\n    if (object.signatures !== undefined && object.signatures !== null) {\n      for (const e of object.signatures) {\n        message.signatures.push(exports.SignatureDescriptor.fromJSON(e));\n      }\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n\n    if (message.signatures) {\n      obj.signatures = message.signatures.map(e => e ? exports.SignatureDescriptor.toJSON(e) : undefined);\n    } else {\n      obj.signatures = [];\n    }\n\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseSignatureDescriptors);\n    message.signatures = [];\n\n    if (object.signatures !== undefined && object.signatures !== null) {\n      for (const e of object.signatures) {\n        message.signatures.push(exports.SignatureDescriptor.fromPartial(e));\n      }\n    }\n\n    return message;\n  }\n\n};\nconst baseSignatureDescriptor = {\n  sequence: long_1.default.UZERO\n};\nexports.SignatureDescriptor = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.publicKey !== undefined) {\n      any_1.Any.encode(message.publicKey, writer.uint32(10).fork()).ldelim();\n    }\n\n    if (message.data !== undefined) {\n      exports.SignatureDescriptor_Data.encode(message.data, writer.uint32(18).fork()).ldelim();\n    }\n\n    if (!message.sequence.isZero()) {\n      writer.uint32(24).uint64(message.sequence);\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseSignatureDescriptor);\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.publicKey = any_1.Any.decode(reader, reader.uint32());\n          break;\n\n        case 2:\n          message.data = exports.SignatureDescriptor_Data.decode(reader, reader.uint32());\n          break;\n\n        case 3:\n          message.sequence = reader.uint64();\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseSignatureDescriptor);\n\n    if (object.publicKey !== undefined && object.publicKey !== null) {\n      message.publicKey = any_1.Any.fromJSON(object.publicKey);\n    } else {\n      message.publicKey = undefined;\n    }\n\n    if (object.data !== undefined && object.data !== null) {\n      message.data = exports.SignatureDescriptor_Data.fromJSON(object.data);\n    } else {\n      message.data = undefined;\n    }\n\n    if (object.sequence !== undefined && object.sequence !== null) {\n      message.sequence = long_1.default.fromString(object.sequence);\n    } else {\n      message.sequence = long_1.default.UZERO;\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.publicKey !== undefined && (obj.publicKey = message.publicKey ? any_1.Any.toJSON(message.publicKey) : undefined);\n    message.data !== undefined && (obj.data = message.data ? exports.SignatureDescriptor_Data.toJSON(message.data) : undefined);\n    message.sequence !== undefined && (obj.sequence = (message.sequence || long_1.default.UZERO).toString());\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseSignatureDescriptor);\n\n    if (object.publicKey !== undefined && object.publicKey !== null) {\n      message.publicKey = any_1.Any.fromPartial(object.publicKey);\n    } else {\n      message.publicKey = undefined;\n    }\n\n    if (object.data !== undefined && object.data !== null) {\n      message.data = exports.SignatureDescriptor_Data.fromPartial(object.data);\n    } else {\n      message.data = undefined;\n    }\n\n    if (object.sequence !== undefined && object.sequence !== null) {\n      message.sequence = object.sequence;\n    } else {\n      message.sequence = long_1.default.UZERO;\n    }\n\n    return message;\n  }\n\n};\nconst baseSignatureDescriptor_Data = {};\nexports.SignatureDescriptor_Data = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.single !== undefined) {\n      exports.SignatureDescriptor_Data_Single.encode(message.single, writer.uint32(10).fork()).ldelim();\n    }\n\n    if (message.multi !== undefined) {\n      exports.SignatureDescriptor_Data_Multi.encode(message.multi, writer.uint32(18).fork()).ldelim();\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseSignatureDescriptor_Data);\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.single = exports.SignatureDescriptor_Data_Single.decode(reader, reader.uint32());\n          break;\n\n        case 2:\n          message.multi = exports.SignatureDescriptor_Data_Multi.decode(reader, reader.uint32());\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseSignatureDescriptor_Data);\n\n    if (object.single !== undefined && object.single !== null) {\n      message.single = exports.SignatureDescriptor_Data_Single.fromJSON(object.single);\n    } else {\n      message.single = undefined;\n    }\n\n    if (object.multi !== undefined && object.multi !== null) {\n      message.multi = exports.SignatureDescriptor_Data_Multi.fromJSON(object.multi);\n    } else {\n      message.multi = undefined;\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.single !== undefined && (obj.single = message.single ? exports.SignatureDescriptor_Data_Single.toJSON(message.single) : undefined);\n    message.multi !== undefined && (obj.multi = message.multi ? exports.SignatureDescriptor_Data_Multi.toJSON(message.multi) : undefined);\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseSignatureDescriptor_Data);\n\n    if (object.single !== undefined && object.single !== null) {\n      message.single = exports.SignatureDescriptor_Data_Single.fromPartial(object.single);\n    } else {\n      message.single = undefined;\n    }\n\n    if (object.multi !== undefined && object.multi !== null) {\n      message.multi = exports.SignatureDescriptor_Data_Multi.fromPartial(object.multi);\n    } else {\n      message.multi = undefined;\n    }\n\n    return message;\n  }\n\n};\nconst baseSignatureDescriptor_Data_Single = {\n  mode: 0\n};\nexports.SignatureDescriptor_Data_Single = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.mode !== 0) {\n      writer.uint32(8).int32(message.mode);\n    }\n\n    if (message.signature.length !== 0) {\n      writer.uint32(18).bytes(message.signature);\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseSignatureDescriptor_Data_Single);\n    message.signature = new Uint8Array();\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.mode = reader.int32();\n          break;\n\n        case 2:\n          message.signature = reader.bytes();\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseSignatureDescriptor_Data_Single);\n    message.signature = new Uint8Array();\n\n    if (object.mode !== undefined && object.mode !== null) {\n      message.mode = signModeFromJSON(object.mode);\n    } else {\n      message.mode = 0;\n    }\n\n    if (object.signature !== undefined && object.signature !== null) {\n      message.signature = bytesFromBase64(object.signature);\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.mode !== undefined && (obj.mode = signModeToJSON(message.mode));\n    message.signature !== undefined && (obj.signature = base64FromBytes(message.signature !== undefined ? message.signature : new Uint8Array()));\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseSignatureDescriptor_Data_Single);\n\n    if (object.mode !== undefined && object.mode !== null) {\n      message.mode = object.mode;\n    } else {\n      message.mode = 0;\n    }\n\n    if (object.signature !== undefined && object.signature !== null) {\n      message.signature = object.signature;\n    } else {\n      message.signature = new Uint8Array();\n    }\n\n    return message;\n  }\n\n};\nconst baseSignatureDescriptor_Data_Multi = {};\nexports.SignatureDescriptor_Data_Multi = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.bitarray !== undefined) {\n      multisig_1.CompactBitArray.encode(message.bitarray, writer.uint32(10).fork()).ldelim();\n    }\n\n    for (const v of message.signatures) {\n      exports.SignatureDescriptor_Data.encode(v, writer.uint32(18).fork()).ldelim();\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseSignatureDescriptor_Data_Multi);\n    message.signatures = [];\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.bitarray = multisig_1.CompactBitArray.decode(reader, reader.uint32());\n          break;\n\n        case 2:\n          message.signatures.push(exports.SignatureDescriptor_Data.decode(reader, reader.uint32()));\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseSignatureDescriptor_Data_Multi);\n    message.signatures = [];\n\n    if (object.bitarray !== undefined && object.bitarray !== null) {\n      message.bitarray = multisig_1.CompactBitArray.fromJSON(object.bitarray);\n    } else {\n      message.bitarray = undefined;\n    }\n\n    if (object.signatures !== undefined && object.signatures !== null) {\n      for (const e of object.signatures) {\n        message.signatures.push(exports.SignatureDescriptor_Data.fromJSON(e));\n      }\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.bitarray !== undefined && (obj.bitarray = message.bitarray ? multisig_1.CompactBitArray.toJSON(message.bitarray) : undefined);\n\n    if (message.signatures) {\n      obj.signatures = message.signatures.map(e => e ? exports.SignatureDescriptor_Data.toJSON(e) : undefined);\n    } else {\n      obj.signatures = [];\n    }\n\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseSignatureDescriptor_Data_Multi);\n    message.signatures = [];\n\n    if (object.bitarray !== undefined && object.bitarray !== null) {\n      message.bitarray = multisig_1.CompactBitArray.fromPartial(object.bitarray);\n    } else {\n      message.bitarray = undefined;\n    }\n\n    if (object.signatures !== undefined && object.signatures !== null) {\n      for (const e of object.signatures) {\n        message.signatures.push(exports.SignatureDescriptor_Data.fromPartial(e));\n      }\n    }\n\n    return message;\n  }\n\n};\n\nvar globalThis = (() => {\n  if (typeof globalThis !== \"undefined\") return globalThis;\n  if (typeof self !== \"undefined\") return self;\n  if (typeof window !== \"undefined\") return window;\n  if (typeof global !== \"undefined\") return global;\n  throw \"Unable to locate global object\";\n})();\n\nconst atob = globalThis.atob || (b64 => globalThis.Buffer.from(b64, \"base64\").toString(\"binary\"));\n\nfunction bytesFromBase64(b64) {\n  const bin = atob(b64);\n  const arr = new Uint8Array(bin.length);\n\n  for (let i = 0; i < bin.length; ++i) {\n    arr[i] = bin.charCodeAt(i);\n  }\n\n  return arr;\n}\n\nconst btoa = globalThis.btoa || (bin => globalThis.Buffer.from(bin, \"binary\").toString(\"base64\"));\n\nfunction base64FromBytes(arr) {\n  const bin = [];\n\n  for (let i = 0; i < arr.byteLength; ++i) {\n    bin.push(String.fromCharCode(arr[i]));\n  }\n\n  return btoa(bin.join(\"\"));\n}\n\nif (minimal_1.default.util.Long !== long_1.default) {\n  minimal_1.default.util.Long = long_1.default;\n  minimal_1.default.configure();\n}","map":{"version":3,"sources":["../../../../../../src/codec/cosmos/tx/signing/v1beta1/signing.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SignatureDescriptor_Data_Multi = exports.SignatureDescriptor_Data_Single = exports.SignatureDescriptor_Data = exports.SignatureDescriptor = exports.SignatureDescriptors = exports.signModeToJSON = exports.signModeFromJSON = exports.SignMode = exports.protobufPackage = void 0;\n/* eslint-disable */\nconst long_1 = __importDefault(require(\"long\"));\nconst minimal_1 = __importDefault(require(\"protobufjs/minimal\"));\nconst any_1 = require(\"../../../../google/protobuf/any\");\nconst multisig_1 = require(\"../../../../cosmos/crypto/multisig/v1beta1/multisig\");\nexports.protobufPackage = \"cosmos.tx.signing.v1beta1\";\n/** SignMode represents a signing mode with its own security guarantees. */\nvar SignMode;\n(function (SignMode) {\n    /**\n     * SIGN_MODE_UNSPECIFIED - SIGN_MODE_UNSPECIFIED specifies an unknown signing mode and will be\n     * rejected\n     */\n    SignMode[SignMode[\"SIGN_MODE_UNSPECIFIED\"] = 0] = \"SIGN_MODE_UNSPECIFIED\";\n    /**\n     * SIGN_MODE_DIRECT - SIGN_MODE_DIRECT specifies a signing mode which uses SignDoc and is\n     * verified with raw bytes from Tx\n     */\n    SignMode[SignMode[\"SIGN_MODE_DIRECT\"] = 1] = \"SIGN_MODE_DIRECT\";\n    /**\n     * SIGN_MODE_TEXTUAL - SIGN_MODE_TEXTUAL is a future signing mode that will verify some\n     * human-readable textual representation on top of the binary representation\n     * from SIGN_MODE_DIRECT\n     */\n    SignMode[SignMode[\"SIGN_MODE_TEXTUAL\"] = 2] = \"SIGN_MODE_TEXTUAL\";\n    /**\n     * SIGN_MODE_LEGACY_AMINO_JSON - SIGN_MODE_LEGACY_AMINO_JSON is a backwards compatibility mode which uses\n     * Amino JSON and will be removed in the future\n     */\n    SignMode[SignMode[\"SIGN_MODE_LEGACY_AMINO_JSON\"] = 127] = \"SIGN_MODE_LEGACY_AMINO_JSON\";\n    SignMode[SignMode[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(SignMode = exports.SignMode || (exports.SignMode = {}));\nfunction signModeFromJSON(object) {\n    switch (object) {\n        case 0:\n        case \"SIGN_MODE_UNSPECIFIED\":\n            return SignMode.SIGN_MODE_UNSPECIFIED;\n        case 1:\n        case \"SIGN_MODE_DIRECT\":\n            return SignMode.SIGN_MODE_DIRECT;\n        case 2:\n        case \"SIGN_MODE_TEXTUAL\":\n            return SignMode.SIGN_MODE_TEXTUAL;\n        case 127:\n        case \"SIGN_MODE_LEGACY_AMINO_JSON\":\n            return SignMode.SIGN_MODE_LEGACY_AMINO_JSON;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return SignMode.UNRECOGNIZED;\n    }\n}\nexports.signModeFromJSON = signModeFromJSON;\nfunction signModeToJSON(object) {\n    switch (object) {\n        case SignMode.SIGN_MODE_UNSPECIFIED:\n            return \"SIGN_MODE_UNSPECIFIED\";\n        case SignMode.SIGN_MODE_DIRECT:\n            return \"SIGN_MODE_DIRECT\";\n        case SignMode.SIGN_MODE_TEXTUAL:\n            return \"SIGN_MODE_TEXTUAL\";\n        case SignMode.SIGN_MODE_LEGACY_AMINO_JSON:\n            return \"SIGN_MODE_LEGACY_AMINO_JSON\";\n        default:\n            return \"UNKNOWN\";\n    }\n}\nexports.signModeToJSON = signModeToJSON;\nconst baseSignatureDescriptors = {};\nexports.SignatureDescriptors = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        for (const v of message.signatures) {\n            exports.SignatureDescriptor.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseSignatureDescriptors);\n        message.signatures = [];\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.signatures.push(exports.SignatureDescriptor.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseSignatureDescriptors);\n        message.signatures = [];\n        if (object.signatures !== undefined && object.signatures !== null) {\n            for (const e of object.signatures) {\n                message.signatures.push(exports.SignatureDescriptor.fromJSON(e));\n            }\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.signatures) {\n            obj.signatures = message.signatures.map((e) => (e ? exports.SignatureDescriptor.toJSON(e) : undefined));\n        }\n        else {\n            obj.signatures = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseSignatureDescriptors);\n        message.signatures = [];\n        if (object.signatures !== undefined && object.signatures !== null) {\n            for (const e of object.signatures) {\n                message.signatures.push(exports.SignatureDescriptor.fromPartial(e));\n            }\n        }\n        return message;\n    },\n};\nconst baseSignatureDescriptor = { sequence: long_1.default.UZERO };\nexports.SignatureDescriptor = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.publicKey !== undefined) {\n            any_1.Any.encode(message.publicKey, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.data !== undefined) {\n            exports.SignatureDescriptor_Data.encode(message.data, writer.uint32(18).fork()).ldelim();\n        }\n        if (!message.sequence.isZero()) {\n            writer.uint32(24).uint64(message.sequence);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseSignatureDescriptor);\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.publicKey = any_1.Any.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.data = exports.SignatureDescriptor_Data.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.sequence = reader.uint64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseSignatureDescriptor);\n        if (object.publicKey !== undefined && object.publicKey !== null) {\n            message.publicKey = any_1.Any.fromJSON(object.publicKey);\n        }\n        else {\n            message.publicKey = undefined;\n        }\n        if (object.data !== undefined && object.data !== null) {\n            message.data = exports.SignatureDescriptor_Data.fromJSON(object.data);\n        }\n        else {\n            message.data = undefined;\n        }\n        if (object.sequence !== undefined && object.sequence !== null) {\n            message.sequence = long_1.default.fromString(object.sequence);\n        }\n        else {\n            message.sequence = long_1.default.UZERO;\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.publicKey !== undefined &&\n            (obj.publicKey = message.publicKey ? any_1.Any.toJSON(message.publicKey) : undefined);\n        message.data !== undefined &&\n            (obj.data = message.data ? exports.SignatureDescriptor_Data.toJSON(message.data) : undefined);\n        message.sequence !== undefined && (obj.sequence = (message.sequence || long_1.default.UZERO).toString());\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseSignatureDescriptor);\n        if (object.publicKey !== undefined && object.publicKey !== null) {\n            message.publicKey = any_1.Any.fromPartial(object.publicKey);\n        }\n        else {\n            message.publicKey = undefined;\n        }\n        if (object.data !== undefined && object.data !== null) {\n            message.data = exports.SignatureDescriptor_Data.fromPartial(object.data);\n        }\n        else {\n            message.data = undefined;\n        }\n        if (object.sequence !== undefined && object.sequence !== null) {\n            message.sequence = object.sequence;\n        }\n        else {\n            message.sequence = long_1.default.UZERO;\n        }\n        return message;\n    },\n};\nconst baseSignatureDescriptor_Data = {};\nexports.SignatureDescriptor_Data = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.single !== undefined) {\n            exports.SignatureDescriptor_Data_Single.encode(message.single, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.multi !== undefined) {\n            exports.SignatureDescriptor_Data_Multi.encode(message.multi, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseSignatureDescriptor_Data);\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.single = exports.SignatureDescriptor_Data_Single.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.multi = exports.SignatureDescriptor_Data_Multi.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseSignatureDescriptor_Data);\n        if (object.single !== undefined && object.single !== null) {\n            message.single = exports.SignatureDescriptor_Data_Single.fromJSON(object.single);\n        }\n        else {\n            message.single = undefined;\n        }\n        if (object.multi !== undefined && object.multi !== null) {\n            message.multi = exports.SignatureDescriptor_Data_Multi.fromJSON(object.multi);\n        }\n        else {\n            message.multi = undefined;\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.single !== undefined &&\n            (obj.single = message.single ? exports.SignatureDescriptor_Data_Single.toJSON(message.single) : undefined);\n        message.multi !== undefined &&\n            (obj.multi = message.multi ? exports.SignatureDescriptor_Data_Multi.toJSON(message.multi) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseSignatureDescriptor_Data);\n        if (object.single !== undefined && object.single !== null) {\n            message.single = exports.SignatureDescriptor_Data_Single.fromPartial(object.single);\n        }\n        else {\n            message.single = undefined;\n        }\n        if (object.multi !== undefined && object.multi !== null) {\n            message.multi = exports.SignatureDescriptor_Data_Multi.fromPartial(object.multi);\n        }\n        else {\n            message.multi = undefined;\n        }\n        return message;\n    },\n};\nconst baseSignatureDescriptor_Data_Single = { mode: 0 };\nexports.SignatureDescriptor_Data_Single = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.mode !== 0) {\n            writer.uint32(8).int32(message.mode);\n        }\n        if (message.signature.length !== 0) {\n            writer.uint32(18).bytes(message.signature);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseSignatureDescriptor_Data_Single);\n        message.signature = new Uint8Array();\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.mode = reader.int32();\n                    break;\n                case 2:\n                    message.signature = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseSignatureDescriptor_Data_Single);\n        message.signature = new Uint8Array();\n        if (object.mode !== undefined && object.mode !== null) {\n            message.mode = signModeFromJSON(object.mode);\n        }\n        else {\n            message.mode = 0;\n        }\n        if (object.signature !== undefined && object.signature !== null) {\n            message.signature = bytesFromBase64(object.signature);\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.mode !== undefined && (obj.mode = signModeToJSON(message.mode));\n        message.signature !== undefined &&\n            (obj.signature = base64FromBytes(message.signature !== undefined ? message.signature : new Uint8Array()));\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseSignatureDescriptor_Data_Single);\n        if (object.mode !== undefined && object.mode !== null) {\n            message.mode = object.mode;\n        }\n        else {\n            message.mode = 0;\n        }\n        if (object.signature !== undefined && object.signature !== null) {\n            message.signature = object.signature;\n        }\n        else {\n            message.signature = new Uint8Array();\n        }\n        return message;\n    },\n};\nconst baseSignatureDescriptor_Data_Multi = {};\nexports.SignatureDescriptor_Data_Multi = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.bitarray !== undefined) {\n            multisig_1.CompactBitArray.encode(message.bitarray, writer.uint32(10).fork()).ldelim();\n        }\n        for (const v of message.signatures) {\n            exports.SignatureDescriptor_Data.encode(v, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseSignatureDescriptor_Data_Multi);\n        message.signatures = [];\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.bitarray = multisig_1.CompactBitArray.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.signatures.push(exports.SignatureDescriptor_Data.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseSignatureDescriptor_Data_Multi);\n        message.signatures = [];\n        if (object.bitarray !== undefined && object.bitarray !== null) {\n            message.bitarray = multisig_1.CompactBitArray.fromJSON(object.bitarray);\n        }\n        else {\n            message.bitarray = undefined;\n        }\n        if (object.signatures !== undefined && object.signatures !== null) {\n            for (const e of object.signatures) {\n                message.signatures.push(exports.SignatureDescriptor_Data.fromJSON(e));\n            }\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.bitarray !== undefined &&\n            (obj.bitarray = message.bitarray ? multisig_1.CompactBitArray.toJSON(message.bitarray) : undefined);\n        if (message.signatures) {\n            obj.signatures = message.signatures.map((e) => (e ? exports.SignatureDescriptor_Data.toJSON(e) : undefined));\n        }\n        else {\n            obj.signatures = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseSignatureDescriptor_Data_Multi);\n        message.signatures = [];\n        if (object.bitarray !== undefined && object.bitarray !== null) {\n            message.bitarray = multisig_1.CompactBitArray.fromPartial(object.bitarray);\n        }\n        else {\n            message.bitarray = undefined;\n        }\n        if (object.signatures !== undefined && object.signatures !== null) {\n            for (const e of object.signatures) {\n                message.signatures.push(exports.SignatureDescriptor_Data.fromPartial(e));\n            }\n        }\n        return message;\n    },\n};\nvar globalThis = (() => {\n    if (typeof globalThis !== \"undefined\")\n        return globalThis;\n    if (typeof self !== \"undefined\")\n        return self;\n    if (typeof window !== \"undefined\")\n        return window;\n    if (typeof global !== \"undefined\")\n        return global;\n    throw \"Unable to locate global object\";\n})();\nconst atob = globalThis.atob || ((b64) => globalThis.Buffer.from(b64, \"base64\").toString(\"binary\"));\nfunction bytesFromBase64(b64) {\n    const bin = atob(b64);\n    const arr = new Uint8Array(bin.length);\n    for (let i = 0; i < bin.length; ++i) {\n        arr[i] = bin.charCodeAt(i);\n    }\n    return arr;\n}\nconst btoa = globalThis.btoa || ((bin) => globalThis.Buffer.from(bin, \"binary\").toString(\"base64\"));\nfunction base64FromBytes(arr) {\n    const bin = [];\n    for (let i = 0; i < arr.byteLength; ++i) {\n        bin.push(String.fromCharCode(arr[i]));\n    }\n    return btoa(bin.join(\"\"));\n}\nif (minimal_1.default.util.Long !== long_1.default) {\n    minimal_1.default.util.Long = long_1.default;\n    minimal_1.default.configure();\n}\n//# sourceMappingURL=signing.js.map"]},"metadata":{},"sourceType":"script"}