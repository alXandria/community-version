{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SigningStargateClient = exports.defaultRegistryTypes = exports.defaultGasLimits = exports.defaultGasPrice = void 0;\n\nconst amino_1 = require(\"@cosmjs/amino\");\n\nconst encoding_1 = require(\"@cosmjs/encoding\");\n\nconst math_1 = require(\"@cosmjs/math\");\n\nconst proto_signing_1 = require(\"@cosmjs/proto-signing\");\n\nconst tendermint_rpc_1 = require(\"@cosmjs/tendermint-rpc\");\n\nconst utils_1 = require(\"@cosmjs/utils\");\n\nconst long_1 = __importDefault(require(\"long\"));\n\nconst aminotypes_1 = require(\"./aminotypes\");\n\nconst tx_1 = require(\"./codec/cosmos/bank/v1beta1/tx\");\n\nconst tx_2 = require(\"./codec/cosmos/distribution/v1beta1/tx\");\n\nconst tx_3 = require(\"./codec/cosmos/staking/v1beta1/tx\");\n\nconst signing_1 = require(\"./codec/cosmos/tx/signing/v1beta1/signing\");\n\nconst tx_4 = require(\"./codec/cosmos/tx/v1beta1/tx\");\n\nconst tx_5 = require(\"./codec/ibc/applications/transfer/v1/tx\");\n\nconst tx_6 = require(\"./codec/ibc/core/channel/v1/tx\");\n\nconst tx_7 = require(\"./codec/ibc/core/client/v1/tx\");\n\nconst tx_8 = require(\"./codec/ibc/core/connection/v1/tx\");\n\nconst fee_1 = require(\"./fee\");\n\nconst stargateclient_1 = require(\"./stargateclient\");\n\nexports.defaultGasPrice = fee_1.GasPrice.fromString(\"0.025ucosm\");\nexports.defaultGasLimits = {\n  send: 80000,\n  delegate: 160000,\n  transfer: 160000,\n  undelegate: 160000,\n  withdraw: 160000\n};\nexports.defaultRegistryTypes = [[\"/cosmos.bank.v1beta1.MsgMultiSend\", tx_1.MsgMultiSend], [\"/cosmos.distribution.v1beta1.MsgFundCommunityPool\", tx_2.MsgFundCommunityPool], [\"/cosmos.distribution.v1beta1.MsgSetWithdrawAddress\", tx_2.MsgSetWithdrawAddress], [\"/cosmos.distribution.v1beta1.MsgWithdrawDelegatorReward\", tx_2.MsgWithdrawDelegatorReward], [\"/cosmos.distribution.v1beta1.MsgWithdrawValidatorCommission\", tx_2.MsgWithdrawValidatorCommission], [\"/cosmos.staking.v1beta1.MsgBeginRedelegate\", tx_3.MsgBeginRedelegate], [\"/cosmos.staking.v1beta1.MsgCreateValidator\", tx_3.MsgCreateValidator], [\"/cosmos.staking.v1beta1.MsgDelegate\", tx_3.MsgDelegate], [\"/cosmos.staking.v1beta1.MsgEditValidator\", tx_3.MsgEditValidator], [\"/cosmos.staking.v1beta1.MsgUndelegate\", tx_3.MsgUndelegate], [\"/ibc.core.channel.v1.MsgChannelOpenInit\", tx_6.MsgChannelOpenInit], [\"/ibc.core.channel.v1.MsgChannelOpenTry\", tx_6.MsgChannelOpenTry], [\"/ibc.core.channel.v1.MsgChannelOpenAck\", tx_6.MsgChannelOpenAck], [\"/ibc.core.channel.v1.MsgChannelOpenConfirm\", tx_6.MsgChannelOpenConfirm], [\"/ibc.core.channel.v1.MsgChannelCloseInit\", tx_6.MsgChannelCloseInit], [\"/ibc.core.channel.v1.MsgChannelCloseConfirm\", tx_6.MsgChannelCloseConfirm], [\"/ibc.core.channel.v1.MsgRecvPacket\", tx_6.MsgRecvPacket], [\"/ibc.core.channel.v1.MsgTimeout \", tx_6.MsgTimeout], [\"/ibc.core.channel.v1.MsgTimeoutOnClose\", tx_6.MsgTimeoutOnClose], [\"/ibc.core.channel.v1.MsgAcknowledgement\", tx_6.MsgAcknowledgement], [\"/ibc.core.client.v1.MsgCreateClient\", tx_7.MsgCreateClient], [\"/ibc.core.client.v1.MsgUpdateClient\", tx_7.MsgUpdateClient], [\"/ibc.core.client.v1.MsgUpgradeClient\", tx_7.MsgUpgradeClient], [\"/ibc.core.client.v1.MsgSubmitMisbehaviour\", tx_7.MsgSubmitMisbehaviour], [\"/ibc.core.connection.v1.MsgConnectionOpenInit\", tx_8.MsgConnectionOpenInit], [\"/ibc.core.connection.v1.MsgConnectionOpenTry\", tx_8.MsgConnectionOpenTry], [\"/ibc.core.connection.v1.MsgConnectionOpenAck\", tx_8.MsgConnectionOpenAck], [\"/ibc.core.connection.v1.MsgConnectionOpenConfirm\", tx_8.MsgConnectionOpenConfirm], [\"/ibc.applications.transfer.v1.MsgTransfer\", tx_5.MsgTransfer]];\n\nfunction createDefaultRegistry() {\n  return new proto_signing_1.Registry(exports.defaultRegistryTypes);\n}\n\nclass SigningStargateClient extends stargateclient_1.StargateClient {\n  constructor(tmClient, signer, options) {\n    super(tmClient);\n    const {\n      registry = createDefaultRegistry(),\n      aminoTypes = new aminotypes_1.AminoTypes({\n        prefix: options.prefix\n      }),\n      gasPrice = exports.defaultGasPrice,\n      gasLimits = {}\n    } = options;\n    this.fees = fee_1.buildFeeTable(gasPrice, exports.defaultGasLimits, gasLimits);\n    this.registry = registry;\n    this.aminoTypes = aminoTypes;\n    this.signer = signer;\n    this.broadcastTimeoutMs = options.broadcastTimeoutMs;\n    this.broadcastPollIntervalMs = options.broadcastPollIntervalMs;\n  }\n\n  static async connectWithSigner(endpoint, signer, options = {}) {\n    const tmClient = await tendermint_rpc_1.Tendermint34Client.connect(endpoint);\n    return new SigningStargateClient(tmClient, signer, options);\n  }\n  /**\n   * Creates a client in offline mode.\n   *\n   * This should only be used in niche cases where you know exactly what you're doing,\n   * e.g. when building an offline signing application.\n   *\n   * When you try to use online functionality with such a signer, an\n   * exception will be raised.\n   */\n\n\n  static async offline(signer, options = {}) {\n    return new SigningStargateClient(undefined, signer, options);\n  }\n\n  async sendTokens(senderAddress, recipientAddress, amount, memo = \"\") {\n    const sendMsg = {\n      typeUrl: \"/cosmos.bank.v1beta1.MsgSend\",\n      value: {\n        fromAddress: senderAddress,\n        toAddress: recipientAddress,\n        amount: [...amount]\n      }\n    };\n    return this.signAndBroadcast(senderAddress, [sendMsg], this.fees.send, memo);\n  }\n\n  async delegateTokens(delegatorAddress, validatorAddress, amount, memo = \"\") {\n    const delegateMsg = {\n      typeUrl: \"/cosmos.staking.v1beta1.MsgDelegate\",\n      value: tx_3.MsgDelegate.fromPartial({\n        delegatorAddress: delegatorAddress,\n        validatorAddress: validatorAddress,\n        amount: amount\n      })\n    };\n    return this.signAndBroadcast(delegatorAddress, [delegateMsg], this.fees.delegate, memo);\n  }\n\n  async undelegateTokens(delegatorAddress, validatorAddress, amount, memo = \"\") {\n    const undelegateMsg = {\n      typeUrl: \"/cosmos.staking.v1beta1.MsgUndelegate\",\n      value: tx_3.MsgUndelegate.fromPartial({\n        delegatorAddress: delegatorAddress,\n        validatorAddress: validatorAddress,\n        amount: amount\n      })\n    };\n    return this.signAndBroadcast(delegatorAddress, [undelegateMsg], this.fees.undelegate, memo);\n  }\n\n  async withdrawRewards(delegatorAddress, validatorAddress, memo = \"\") {\n    const withdrawMsg = {\n      typeUrl: \"/cosmos.distribution.v1beta1.MsgWithdrawDelegatorReward\",\n      value: tx_2.MsgWithdrawDelegatorReward.fromPartial({\n        delegatorAddress: delegatorAddress,\n        validatorAddress: validatorAddress\n      })\n    };\n    return this.signAndBroadcast(delegatorAddress, [withdrawMsg], this.fees.withdraw, memo);\n  }\n\n  async sendIbcTokens(senderAddress, recipientAddress, transferAmount, sourcePort, sourceChannel, timeoutHeight,\n  /** timeout in seconds */\n  timeoutTimestamp, memo = \"\") {\n    const timeoutTimestampNanoseconds = timeoutTimestamp ? long_1.default.fromNumber(timeoutTimestamp).multiply(1000000000) : undefined;\n    const transferMsg = {\n      typeUrl: \"/ibc.applications.transfer.v1.MsgTransfer\",\n      value: tx_5.MsgTransfer.fromPartial({\n        sourcePort: sourcePort,\n        sourceChannel: sourceChannel,\n        sender: senderAddress,\n        receiver: recipientAddress,\n        token: transferAmount,\n        timeoutHeight: timeoutHeight,\n        timeoutTimestamp: timeoutTimestampNanoseconds\n      })\n    };\n    return this.signAndBroadcast(senderAddress, [transferMsg], this.fees.transfer, memo);\n  }\n\n  async signAndBroadcast(signerAddress, messages, fee, memo = \"\") {\n    const txRaw = await this.sign(signerAddress, messages, fee, memo);\n    const txBytes = tx_4.TxRaw.encode(txRaw).finish();\n    return this.broadcastTx(txBytes, this.broadcastTimeoutMs, this.broadcastPollIntervalMs);\n  }\n  /**\n   * Gets account number and sequence from the API, creates a sign doc,\n   * creates a single signature and assembles the signed transaction.\n   *\n   * The sign mode (SIGN_MODE_DIRECT or SIGN_MODE_LEGACY_AMINO_JSON) is determined by this client's signer.\n   *\n   * You can pass signer data (account number, sequence and chain ID) explicitly instead of querying them\n   * from the chain. This is needed when signing for a multisig account, but it also allows for offline signing\n   * (See the SigningStargateClient.offline constructor).\n   */\n\n\n  async sign(signerAddress, messages, fee, memo, explicitSignerData) {\n    let signerData;\n\n    if (explicitSignerData) {\n      signerData = explicitSignerData;\n    } else {\n      const {\n        accountNumber,\n        sequence\n      } = await this.getSequence(signerAddress);\n      const chainId = await this.getChainId();\n      signerData = {\n        accountNumber: accountNumber,\n        sequence: sequence,\n        chainId: chainId\n      };\n    }\n\n    return proto_signing_1.isOfflineDirectSigner(this.signer) ? this.signDirect(signerAddress, messages, fee, memo, signerData) : this.signAmino(signerAddress, messages, fee, memo, signerData);\n  }\n\n  async signAmino(signerAddress, messages, fee, memo, {\n    accountNumber,\n    sequence,\n    chainId\n  }) {\n    utils_1.assert(!proto_signing_1.isOfflineDirectSigner(this.signer));\n    const accountFromSigner = (await this.signer.getAccounts()).find(account => account.address === signerAddress);\n\n    if (!accountFromSigner) {\n      throw new Error(\"Failed to retrieve account from signer\");\n    }\n\n    const pubkey = proto_signing_1.encodePubkey(amino_1.encodeSecp256k1Pubkey(accountFromSigner.pubkey));\n    const signMode = signing_1.SignMode.SIGN_MODE_LEGACY_AMINO_JSON;\n    const msgs = messages.map(msg => this.aminoTypes.toAmino(msg));\n    const signDoc = amino_1.makeSignDoc(msgs, fee, chainId, memo, accountNumber, sequence);\n    const {\n      signature,\n      signed\n    } = await this.signer.signAmino(signerAddress, signDoc);\n    const signedTxBody = {\n      messages: signed.msgs.map(msg => this.aminoTypes.fromAmino(msg)),\n      memo: signed.memo\n    };\n    const signedTxBodyEncodeObject = {\n      typeUrl: \"/cosmos.tx.v1beta1.TxBody\",\n      value: signedTxBody\n    };\n    const signedTxBodyBytes = this.registry.encode(signedTxBodyEncodeObject);\n    const signedGasLimit = math_1.Int53.fromString(signed.fee.gas).toNumber();\n    const signedSequence = math_1.Int53.fromString(signed.sequence).toNumber();\n    const signedAuthInfoBytes = proto_signing_1.makeAuthInfoBytes([pubkey], signed.fee.amount, signedGasLimit, signedSequence, signMode);\n    return tx_4.TxRaw.fromPartial({\n      bodyBytes: signedTxBodyBytes,\n      authInfoBytes: signedAuthInfoBytes,\n      signatures: [encoding_1.fromBase64(signature.signature)]\n    });\n  }\n\n  async signDirect(signerAddress, messages, fee, memo, {\n    accountNumber,\n    sequence,\n    chainId\n  }) {\n    utils_1.assert(proto_signing_1.isOfflineDirectSigner(this.signer));\n    const accountFromSigner = (await this.signer.getAccounts()).find(account => account.address === signerAddress);\n\n    if (!accountFromSigner) {\n      throw new Error(\"Failed to retrieve account from signer\");\n    }\n\n    const pubkey = proto_signing_1.encodePubkey(amino_1.encodeSecp256k1Pubkey(accountFromSigner.pubkey));\n    const txBodyEncodeObject = {\n      typeUrl: \"/cosmos.tx.v1beta1.TxBody\",\n      value: {\n        messages: messages,\n        memo: memo\n      }\n    };\n    const txBodyBytes = this.registry.encode(txBodyEncodeObject);\n    const gasLimit = math_1.Int53.fromString(fee.gas).toNumber();\n    const authInfoBytes = proto_signing_1.makeAuthInfoBytes([pubkey], fee.amount, gasLimit, sequence);\n    const signDoc = proto_signing_1.makeSignDoc(txBodyBytes, authInfoBytes, chainId, accountNumber);\n    const {\n      signature,\n      signed\n    } = await this.signer.signDirect(signerAddress, signDoc);\n    return tx_4.TxRaw.fromPartial({\n      bodyBytes: signed.bodyBytes,\n      authInfoBytes: signed.authInfoBytes,\n      signatures: [encoding_1.fromBase64(signature.signature)]\n    });\n  }\n\n}\n\nexports.SigningStargateClient = SigningStargateClient;","map":{"version":3,"sources":["../src/signingstargateclient.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SigningStargateClient = exports.defaultRegistryTypes = exports.defaultGasLimits = exports.defaultGasPrice = void 0;\nconst amino_1 = require(\"@cosmjs/amino\");\nconst encoding_1 = require(\"@cosmjs/encoding\");\nconst math_1 = require(\"@cosmjs/math\");\nconst proto_signing_1 = require(\"@cosmjs/proto-signing\");\nconst tendermint_rpc_1 = require(\"@cosmjs/tendermint-rpc\");\nconst utils_1 = require(\"@cosmjs/utils\");\nconst long_1 = __importDefault(require(\"long\"));\nconst aminotypes_1 = require(\"./aminotypes\");\nconst tx_1 = require(\"./codec/cosmos/bank/v1beta1/tx\");\nconst tx_2 = require(\"./codec/cosmos/distribution/v1beta1/tx\");\nconst tx_3 = require(\"./codec/cosmos/staking/v1beta1/tx\");\nconst signing_1 = require(\"./codec/cosmos/tx/signing/v1beta1/signing\");\nconst tx_4 = require(\"./codec/cosmos/tx/v1beta1/tx\");\nconst tx_5 = require(\"./codec/ibc/applications/transfer/v1/tx\");\nconst tx_6 = require(\"./codec/ibc/core/channel/v1/tx\");\nconst tx_7 = require(\"./codec/ibc/core/client/v1/tx\");\nconst tx_8 = require(\"./codec/ibc/core/connection/v1/tx\");\nconst fee_1 = require(\"./fee\");\nconst stargateclient_1 = require(\"./stargateclient\");\nexports.defaultGasPrice = fee_1.GasPrice.fromString(\"0.025ucosm\");\nexports.defaultGasLimits = {\n    send: 80000,\n    delegate: 160000,\n    transfer: 160000,\n    undelegate: 160000,\n    withdraw: 160000,\n};\nexports.defaultRegistryTypes = [\n    [\"/cosmos.bank.v1beta1.MsgMultiSend\", tx_1.MsgMultiSend],\n    [\"/cosmos.distribution.v1beta1.MsgFundCommunityPool\", tx_2.MsgFundCommunityPool],\n    [\"/cosmos.distribution.v1beta1.MsgSetWithdrawAddress\", tx_2.MsgSetWithdrawAddress],\n    [\"/cosmos.distribution.v1beta1.MsgWithdrawDelegatorReward\", tx_2.MsgWithdrawDelegatorReward],\n    [\"/cosmos.distribution.v1beta1.MsgWithdrawValidatorCommission\", tx_2.MsgWithdrawValidatorCommission],\n    [\"/cosmos.staking.v1beta1.MsgBeginRedelegate\", tx_3.MsgBeginRedelegate],\n    [\"/cosmos.staking.v1beta1.MsgCreateValidator\", tx_3.MsgCreateValidator],\n    [\"/cosmos.staking.v1beta1.MsgDelegate\", tx_3.MsgDelegate],\n    [\"/cosmos.staking.v1beta1.MsgEditValidator\", tx_3.MsgEditValidator],\n    [\"/cosmos.staking.v1beta1.MsgUndelegate\", tx_3.MsgUndelegate],\n    [\"/ibc.core.channel.v1.MsgChannelOpenInit\", tx_6.MsgChannelOpenInit],\n    [\"/ibc.core.channel.v1.MsgChannelOpenTry\", tx_6.MsgChannelOpenTry],\n    [\"/ibc.core.channel.v1.MsgChannelOpenAck\", tx_6.MsgChannelOpenAck],\n    [\"/ibc.core.channel.v1.MsgChannelOpenConfirm\", tx_6.MsgChannelOpenConfirm],\n    [\"/ibc.core.channel.v1.MsgChannelCloseInit\", tx_6.MsgChannelCloseInit],\n    [\"/ibc.core.channel.v1.MsgChannelCloseConfirm\", tx_6.MsgChannelCloseConfirm],\n    [\"/ibc.core.channel.v1.MsgRecvPacket\", tx_6.MsgRecvPacket],\n    [\"/ibc.core.channel.v1.MsgTimeout \", tx_6.MsgTimeout],\n    [\"/ibc.core.channel.v1.MsgTimeoutOnClose\", tx_6.MsgTimeoutOnClose],\n    [\"/ibc.core.channel.v1.MsgAcknowledgement\", tx_6.MsgAcknowledgement],\n    [\"/ibc.core.client.v1.MsgCreateClient\", tx_7.MsgCreateClient],\n    [\"/ibc.core.client.v1.MsgUpdateClient\", tx_7.MsgUpdateClient],\n    [\"/ibc.core.client.v1.MsgUpgradeClient\", tx_7.MsgUpgradeClient],\n    [\"/ibc.core.client.v1.MsgSubmitMisbehaviour\", tx_7.MsgSubmitMisbehaviour],\n    [\"/ibc.core.connection.v1.MsgConnectionOpenInit\", tx_8.MsgConnectionOpenInit],\n    [\"/ibc.core.connection.v1.MsgConnectionOpenTry\", tx_8.MsgConnectionOpenTry],\n    [\"/ibc.core.connection.v1.MsgConnectionOpenAck\", tx_8.MsgConnectionOpenAck],\n    [\"/ibc.core.connection.v1.MsgConnectionOpenConfirm\", tx_8.MsgConnectionOpenConfirm],\n    [\"/ibc.applications.transfer.v1.MsgTransfer\", tx_5.MsgTransfer],\n];\nfunction createDefaultRegistry() {\n    return new proto_signing_1.Registry(exports.defaultRegistryTypes);\n}\nclass SigningStargateClient extends stargateclient_1.StargateClient {\n    constructor(tmClient, signer, options) {\n        super(tmClient);\n        const { registry = createDefaultRegistry(), aminoTypes = new aminotypes_1.AminoTypes({ prefix: options.prefix }), gasPrice = exports.defaultGasPrice, gasLimits = {}, } = options;\n        this.fees = fee_1.buildFeeTable(gasPrice, exports.defaultGasLimits, gasLimits);\n        this.registry = registry;\n        this.aminoTypes = aminoTypes;\n        this.signer = signer;\n        this.broadcastTimeoutMs = options.broadcastTimeoutMs;\n        this.broadcastPollIntervalMs = options.broadcastPollIntervalMs;\n    }\n    static async connectWithSigner(endpoint, signer, options = {}) {\n        const tmClient = await tendermint_rpc_1.Tendermint34Client.connect(endpoint);\n        return new SigningStargateClient(tmClient, signer, options);\n    }\n    /**\n     * Creates a client in offline mode.\n     *\n     * This should only be used in niche cases where you know exactly what you're doing,\n     * e.g. when building an offline signing application.\n     *\n     * When you try to use online functionality with such a signer, an\n     * exception will be raised.\n     */\n    static async offline(signer, options = {}) {\n        return new SigningStargateClient(undefined, signer, options);\n    }\n    async sendTokens(senderAddress, recipientAddress, amount, memo = \"\") {\n        const sendMsg = {\n            typeUrl: \"/cosmos.bank.v1beta1.MsgSend\",\n            value: {\n                fromAddress: senderAddress,\n                toAddress: recipientAddress,\n                amount: [...amount],\n            },\n        };\n        return this.signAndBroadcast(senderAddress, [sendMsg], this.fees.send, memo);\n    }\n    async delegateTokens(delegatorAddress, validatorAddress, amount, memo = \"\") {\n        const delegateMsg = {\n            typeUrl: \"/cosmos.staking.v1beta1.MsgDelegate\",\n            value: tx_3.MsgDelegate.fromPartial({\n                delegatorAddress: delegatorAddress,\n                validatorAddress: validatorAddress,\n                amount: amount,\n            }),\n        };\n        return this.signAndBroadcast(delegatorAddress, [delegateMsg], this.fees.delegate, memo);\n    }\n    async undelegateTokens(delegatorAddress, validatorAddress, amount, memo = \"\") {\n        const undelegateMsg = {\n            typeUrl: \"/cosmos.staking.v1beta1.MsgUndelegate\",\n            value: tx_3.MsgUndelegate.fromPartial({\n                delegatorAddress: delegatorAddress,\n                validatorAddress: validatorAddress,\n                amount: amount,\n            }),\n        };\n        return this.signAndBroadcast(delegatorAddress, [undelegateMsg], this.fees.undelegate, memo);\n    }\n    async withdrawRewards(delegatorAddress, validatorAddress, memo = \"\") {\n        const withdrawMsg = {\n            typeUrl: \"/cosmos.distribution.v1beta1.MsgWithdrawDelegatorReward\",\n            value: tx_2.MsgWithdrawDelegatorReward.fromPartial({\n                delegatorAddress: delegatorAddress,\n                validatorAddress: validatorAddress,\n            }),\n        };\n        return this.signAndBroadcast(delegatorAddress, [withdrawMsg], this.fees.withdraw, memo);\n    }\n    async sendIbcTokens(senderAddress, recipientAddress, transferAmount, sourcePort, sourceChannel, timeoutHeight, \n    /** timeout in seconds */\n    timeoutTimestamp, memo = \"\") {\n        const timeoutTimestampNanoseconds = timeoutTimestamp\n            ? long_1.default.fromNumber(timeoutTimestamp).multiply(1000000000)\n            : undefined;\n        const transferMsg = {\n            typeUrl: \"/ibc.applications.transfer.v1.MsgTransfer\",\n            value: tx_5.MsgTransfer.fromPartial({\n                sourcePort: sourcePort,\n                sourceChannel: sourceChannel,\n                sender: senderAddress,\n                receiver: recipientAddress,\n                token: transferAmount,\n                timeoutHeight: timeoutHeight,\n                timeoutTimestamp: timeoutTimestampNanoseconds,\n            }),\n        };\n        return this.signAndBroadcast(senderAddress, [transferMsg], this.fees.transfer, memo);\n    }\n    async signAndBroadcast(signerAddress, messages, fee, memo = \"\") {\n        const txRaw = await this.sign(signerAddress, messages, fee, memo);\n        const txBytes = tx_4.TxRaw.encode(txRaw).finish();\n        return this.broadcastTx(txBytes, this.broadcastTimeoutMs, this.broadcastPollIntervalMs);\n    }\n    /**\n     * Gets account number and sequence from the API, creates a sign doc,\n     * creates a single signature and assembles the signed transaction.\n     *\n     * The sign mode (SIGN_MODE_DIRECT or SIGN_MODE_LEGACY_AMINO_JSON) is determined by this client's signer.\n     *\n     * You can pass signer data (account number, sequence and chain ID) explicitly instead of querying them\n     * from the chain. This is needed when signing for a multisig account, but it also allows for offline signing\n     * (See the SigningStargateClient.offline constructor).\n     */\n    async sign(signerAddress, messages, fee, memo, explicitSignerData) {\n        let signerData;\n        if (explicitSignerData) {\n            signerData = explicitSignerData;\n        }\n        else {\n            const { accountNumber, sequence } = await this.getSequence(signerAddress);\n            const chainId = await this.getChainId();\n            signerData = {\n                accountNumber: accountNumber,\n                sequence: sequence,\n                chainId: chainId,\n            };\n        }\n        return proto_signing_1.isOfflineDirectSigner(this.signer)\n            ? this.signDirect(signerAddress, messages, fee, memo, signerData)\n            : this.signAmino(signerAddress, messages, fee, memo, signerData);\n    }\n    async signAmino(signerAddress, messages, fee, memo, { accountNumber, sequence, chainId }) {\n        utils_1.assert(!proto_signing_1.isOfflineDirectSigner(this.signer));\n        const accountFromSigner = (await this.signer.getAccounts()).find((account) => account.address === signerAddress);\n        if (!accountFromSigner) {\n            throw new Error(\"Failed to retrieve account from signer\");\n        }\n        const pubkey = proto_signing_1.encodePubkey(amino_1.encodeSecp256k1Pubkey(accountFromSigner.pubkey));\n        const signMode = signing_1.SignMode.SIGN_MODE_LEGACY_AMINO_JSON;\n        const msgs = messages.map((msg) => this.aminoTypes.toAmino(msg));\n        const signDoc = amino_1.makeSignDoc(msgs, fee, chainId, memo, accountNumber, sequence);\n        const { signature, signed } = await this.signer.signAmino(signerAddress, signDoc);\n        const signedTxBody = {\n            messages: signed.msgs.map((msg) => this.aminoTypes.fromAmino(msg)),\n            memo: signed.memo,\n        };\n        const signedTxBodyEncodeObject = {\n            typeUrl: \"/cosmos.tx.v1beta1.TxBody\",\n            value: signedTxBody,\n        };\n        const signedTxBodyBytes = this.registry.encode(signedTxBodyEncodeObject);\n        const signedGasLimit = math_1.Int53.fromString(signed.fee.gas).toNumber();\n        const signedSequence = math_1.Int53.fromString(signed.sequence).toNumber();\n        const signedAuthInfoBytes = proto_signing_1.makeAuthInfoBytes([pubkey], signed.fee.amount, signedGasLimit, signedSequence, signMode);\n        return tx_4.TxRaw.fromPartial({\n            bodyBytes: signedTxBodyBytes,\n            authInfoBytes: signedAuthInfoBytes,\n            signatures: [encoding_1.fromBase64(signature.signature)],\n        });\n    }\n    async signDirect(signerAddress, messages, fee, memo, { accountNumber, sequence, chainId }) {\n        utils_1.assert(proto_signing_1.isOfflineDirectSigner(this.signer));\n        const accountFromSigner = (await this.signer.getAccounts()).find((account) => account.address === signerAddress);\n        if (!accountFromSigner) {\n            throw new Error(\"Failed to retrieve account from signer\");\n        }\n        const pubkey = proto_signing_1.encodePubkey(amino_1.encodeSecp256k1Pubkey(accountFromSigner.pubkey));\n        const txBodyEncodeObject = {\n            typeUrl: \"/cosmos.tx.v1beta1.TxBody\",\n            value: {\n                messages: messages,\n                memo: memo,\n            },\n        };\n        const txBodyBytes = this.registry.encode(txBodyEncodeObject);\n        const gasLimit = math_1.Int53.fromString(fee.gas).toNumber();\n        const authInfoBytes = proto_signing_1.makeAuthInfoBytes([pubkey], fee.amount, gasLimit, sequence);\n        const signDoc = proto_signing_1.makeSignDoc(txBodyBytes, authInfoBytes, chainId, accountNumber);\n        const { signature, signed } = await this.signer.signDirect(signerAddress, signDoc);\n        return tx_4.TxRaw.fromPartial({\n            bodyBytes: signed.bodyBytes,\n            authInfoBytes: signed.authInfoBytes,\n            signatures: [encoding_1.fromBase64(signature.signature)],\n        });\n    }\n}\nexports.SigningStargateClient = SigningStargateClient;\n//# sourceMappingURL=signingstargateclient.js.map"]},"metadata":{},"sourceType":"script"}