{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setupAuthExtension = void 0;\n\nconst query_1 = require(\"../codec/cosmos/auth/v1beta1/query\");\n\nconst any_1 = require(\"../codec/google/protobuf/any\");\n\nconst utils_1 = require(\"./utils\");\n\nfunction setupAuthExtension(base) {\n  const rpc = utils_1.createProtobufRpcClient(base); // Use this service to get easy typed access to query methods\n  // This cannot be used for proof verification\n\n  const queryService = new query_1.QueryClientImpl(rpc);\n  return {\n    auth: {\n      account: async address => {\n        const {\n          account\n        } = await queryService.Account({\n          address: address\n        });\n        return account !== null && account !== void 0 ? account : null;\n      },\n      verified: {\n        account: async address => {\n          // https://github.com/cosmos/cosmos-sdk/blob/8cab43c8120fec5200c3459cbf4a92017bb6f287/x/auth/types/keys.go#L29-L32\n          const key = Uint8Array.from([0x01, ...utils_1.toAccAddress(address)]);\n          const responseData = await base.queryVerified(\"acc\", key);\n          if (responseData.length === 0) return null;\n          return any_1.Any.decode(responseData);\n        }\n      }\n    }\n  };\n}\n\nexports.setupAuthExtension = setupAuthExtension;","map":{"version":3,"sources":["../../src/queries/auth.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,OAAA,GAAA,OAAA,CAAA,oCAAA,CAAA;;AACA,MAAA,KAAA,GAAA,OAAA,CAAA,8BAAA,CAAA;;AAEA,MAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AAyBA,SAAgB,kBAAhB,CAAmC,IAAnC,EAAoD;AAClD,QAAM,GAAG,GAAG,OAAA,CAAA,uBAAA,CAAwB,IAAxB,CAAZ,CADkD,CAElD;AACA;;AACA,QAAM,YAAY,GAAG,IAAI,OAAA,CAAA,eAAJ,CAAoB,GAApB,CAArB;AAEA,SAAO;AACL,IAAA,IAAI,EAAE;AACJ,MAAA,OAAO,EAAE,MAAO,OAAP,IAA0B;AACjC,cAAM;AAAE,UAAA;AAAF,YAAc,MAAM,YAAY,CAAC,OAAb,CAAqB;AAAE,UAAA,OAAO,EAAE;AAAX,SAArB,CAA1B;AACA,eAAO,OAAO,KAAA,IAAP,IAAA,OAAO,KAAA,KAAA,CAAP,GAAA,OAAA,GAAW,IAAlB;AACD,OAJG;AAKJ,MAAA,QAAQ,EAAE;AACR,QAAA,OAAO,EAAE,MAAO,OAAP,IAA0B;AACjC;AACA,gBAAM,GAAG,GAAG,UAAU,CAAC,IAAX,CAAgB,CAAC,IAAD,EAAO,GAAG,OAAA,CAAA,YAAA,CAAa,OAAb,CAAV,CAAhB,CAAZ;AACA,gBAAM,YAAY,GAAG,MAAM,IAAI,CAAC,aAAL,CAAmB,KAAnB,EAA0B,GAA1B,CAA3B;AACA,cAAI,YAAY,CAAC,MAAb,KAAwB,CAA5B,EAA+B,OAAO,IAAP;AAC/B,iBAAO,KAAA,CAAA,GAAA,CAAI,MAAJ,CAAW,YAAX,CAAP;AACD;AAPO;AALN;AADD,GAAP;AAiBD;;AAvBD,OAAA,CAAA,kBAAA,GAAA,kBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.setupAuthExtension = void 0;\nconst query_1 = require(\"../codec/cosmos/auth/v1beta1/query\");\nconst any_1 = require(\"../codec/google/protobuf/any\");\nconst utils_1 = require(\"./utils\");\nfunction setupAuthExtension(base) {\n    const rpc = utils_1.createProtobufRpcClient(base);\n    // Use this service to get easy typed access to query methods\n    // This cannot be used for proof verification\n    const queryService = new query_1.QueryClientImpl(rpc);\n    return {\n        auth: {\n            account: async (address) => {\n                const { account } = await queryService.Account({ address: address });\n                return account !== null && account !== void 0 ? account : null;\n            },\n            verified: {\n                account: async (address) => {\n                    // https://github.com/cosmos/cosmos-sdk/blob/8cab43c8120fec5200c3459cbf4a92017bb6f287/x/auth/types/keys.go#L29-L32\n                    const key = Uint8Array.from([0x01, ...utils_1.toAccAddress(address)]);\n                    const responseData = await base.queryVerified(\"acc\", key);\n                    if (responseData.length === 0)\n                        return null;\n                    return any_1.Any.decode(responseData);\n                },\n            },\n        },\n    };\n}\nexports.setupAuthExtension = setupAuthExtension;\n//# sourceMappingURL=auth.js.map"]},"metadata":{},"sourceType":"script"}