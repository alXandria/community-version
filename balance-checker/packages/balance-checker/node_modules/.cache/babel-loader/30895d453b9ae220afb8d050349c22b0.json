{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodePubkey = exports.encodePubkey = void 0;\n/* eslint-disable @typescript-eslint/naming-convention */\n\nconst amino_1 = require(\"@cosmjs/amino\");\n\nconst encoding_1 = require(\"@cosmjs/encoding\");\n\nconst math_1 = require(\"@cosmjs/math\");\n\nconst keys_1 = require(\"./codec/cosmos/crypto/multisig/keys\");\n\nconst keys_2 = require(\"./codec/cosmos/crypto/secp256k1/keys\");\n\nconst any_1 = require(\"./codec/google/protobuf/any\");\n\nfunction encodePubkey(pubkey) {\n  if (amino_1.isSecp256k1Pubkey(pubkey)) {\n    const pubkeyProto = keys_2.PubKey.fromPartial({\n      key: encoding_1.fromBase64(pubkey.value)\n    });\n    return any_1.Any.fromPartial({\n      typeUrl: \"/cosmos.crypto.secp256k1.PubKey\",\n      value: Uint8Array.from(keys_2.PubKey.encode(pubkeyProto).finish())\n    });\n  } else if (amino_1.isMultisigThresholdPubkey(pubkey)) {\n    const pubkeyProto = keys_1.LegacyAminoPubKey.fromPartial({\n      threshold: math_1.Uint53.fromString(pubkey.value.threshold).toNumber(),\n      publicKeys: pubkey.value.pubkeys.map(encodePubkey)\n    });\n    return any_1.Any.fromPartial({\n      typeUrl: \"/cosmos.crypto.multisig.LegacyAminoPubKey\",\n      value: Uint8Array.from(keys_1.LegacyAminoPubKey.encode(pubkeyProto).finish())\n    });\n  } else {\n    throw new Error(`Pubkey type ${pubkey.type} not recognized`);\n  }\n}\n\nexports.encodePubkey = encodePubkey;\n\nfunction decodeSinglePubkey(pubkey) {\n  switch (pubkey.typeUrl) {\n    case \"/cosmos.crypto.secp256k1.PubKey\":\n      {\n        const {\n          key\n        } = keys_2.PubKey.decode(pubkey.value);\n        return amino_1.encodeSecp256k1Pubkey(key);\n      }\n\n    default:\n      throw new Error(`Pubkey type_url ${pubkey.typeUrl} not recognized as single public key type`);\n  }\n}\n\nfunction decodePubkey(pubkey) {\n  if (!pubkey || !pubkey.value) {\n    return null;\n  }\n\n  switch (pubkey.typeUrl) {\n    case \"/cosmos.crypto.secp256k1.PubKey\":\n      {\n        return decodeSinglePubkey(pubkey);\n      }\n\n    case \"/cosmos.crypto.multisig.LegacyAminoPubKey\":\n      {\n        const {\n          threshold,\n          publicKeys\n        } = keys_1.LegacyAminoPubKey.decode(pubkey.value);\n        const out = {\n          type: \"tendermint/PubKeyMultisigThreshold\",\n          value: {\n            threshold: threshold.toString(),\n            pubkeys: publicKeys.map(decodeSinglePubkey)\n          }\n        };\n        return out;\n      }\n\n    default:\n      throw new Error(`Pubkey type_url ${pubkey.typeUrl} not recognized`);\n  }\n}\n\nexports.decodePubkey = decodePubkey;","map":{"version":3,"sources":["../src/pubkey.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.decodePubkey = exports.encodePubkey = void 0;\n/* eslint-disable @typescript-eslint/naming-convention */\nconst amino_1 = require(\"@cosmjs/amino\");\nconst encoding_1 = require(\"@cosmjs/encoding\");\nconst math_1 = require(\"@cosmjs/math\");\nconst keys_1 = require(\"./codec/cosmos/crypto/multisig/keys\");\nconst keys_2 = require(\"./codec/cosmos/crypto/secp256k1/keys\");\nconst any_1 = require(\"./codec/google/protobuf/any\");\nfunction encodePubkey(pubkey) {\n    if (amino_1.isSecp256k1Pubkey(pubkey)) {\n        const pubkeyProto = keys_2.PubKey.fromPartial({\n            key: encoding_1.fromBase64(pubkey.value),\n        });\n        return any_1.Any.fromPartial({\n            typeUrl: \"/cosmos.crypto.secp256k1.PubKey\",\n            value: Uint8Array.from(keys_2.PubKey.encode(pubkeyProto).finish()),\n        });\n    }\n    else if (amino_1.isMultisigThresholdPubkey(pubkey)) {\n        const pubkeyProto = keys_1.LegacyAminoPubKey.fromPartial({\n            threshold: math_1.Uint53.fromString(pubkey.value.threshold).toNumber(),\n            publicKeys: pubkey.value.pubkeys.map(encodePubkey),\n        });\n        return any_1.Any.fromPartial({\n            typeUrl: \"/cosmos.crypto.multisig.LegacyAminoPubKey\",\n            value: Uint8Array.from(keys_1.LegacyAminoPubKey.encode(pubkeyProto).finish()),\n        });\n    }\n    else {\n        throw new Error(`Pubkey type ${pubkey.type} not recognized`);\n    }\n}\nexports.encodePubkey = encodePubkey;\nfunction decodeSinglePubkey(pubkey) {\n    switch (pubkey.typeUrl) {\n        case \"/cosmos.crypto.secp256k1.PubKey\": {\n            const { key } = keys_2.PubKey.decode(pubkey.value);\n            return amino_1.encodeSecp256k1Pubkey(key);\n        }\n        default:\n            throw new Error(`Pubkey type_url ${pubkey.typeUrl} not recognized as single public key type`);\n    }\n}\nfunction decodePubkey(pubkey) {\n    if (!pubkey || !pubkey.value) {\n        return null;\n    }\n    switch (pubkey.typeUrl) {\n        case \"/cosmos.crypto.secp256k1.PubKey\": {\n            return decodeSinglePubkey(pubkey);\n        }\n        case \"/cosmos.crypto.multisig.LegacyAminoPubKey\": {\n            const { threshold, publicKeys } = keys_1.LegacyAminoPubKey.decode(pubkey.value);\n            const out = {\n                type: \"tendermint/PubKeyMultisigThreshold\",\n                value: {\n                    threshold: threshold.toString(),\n                    pubkeys: publicKeys.map(decodeSinglePubkey),\n                },\n            };\n            return out;\n        }\n        default:\n            throw new Error(`Pubkey type_url ${pubkey.typeUrl} not recognized`);\n    }\n}\nexports.decodePubkey = decodePubkey;\n//# sourceMappingURL=pubkey.js.map"]},"metadata":{},"sourceType":"script"}