{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.adaptorForVersion = exports.adaptor34 = exports.adaptor33 = void 0;\n\nconst v0_33_1 = require(\"./v0-33\");\n/**\n * Adaptor for Tendermint 0.33.\n *\n * Use this to skip auto-detection:\n *\n * ```\n * import { adaptor33, Client as TendermintClient } from \"@cosmjs/tendermint-rpc\";\n * // ...\n * const client = await TendermintClient.connect(url, adaptor33);\n * ```\n */\n\n\nexports.adaptor33 = v0_33_1.v0_33;\n/**\n * Adaptor for Tendermint 0.34.\n *\n * Use this to skip auto-detection:\n *\n * ```\n * import { adaptor34, Client as TendermintClient } from \"@cosmjs/tendermint-rpc\";\n * // ...\n * const client = await TendermintClient.connect(url, adaptor34);\n * ```\n */\n\nexports.adaptor34 = v0_33_1.v0_33; // With this alias we can swap out the implementation without affecting caller code.\n\n/**\n * Returns an Adaptor implementation for a given tendermint version.\n * Throws when version is not supported.\n *\n * @param version full Tendermint version string, e.g. \"0.20.1\"\n */\n\nfunction adaptorForVersion(_version) {\n  // Note: In some cases, Tendermint 0.34 returns an empty version value.\n  // This supports 0.33 and 0.34 now, no matter which version you provide.\n  // Very soon this function becomes obsolete (https://github.com/cosmos/cosmjs/issues/789).\n  return v0_33_1.v0_33;\n}\n\nexports.adaptorForVersion = adaptorForVersion;","map":{"version":3,"sources":["../../../src/legacy/adaptors/index.ts"],"names":[],"mappings":";;;;;;;AAEA,MAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;AAEA;;;;;;;;;;;;;AAWa,OAAA,CAAA,SAAA,GAAY,OAAA,CAAA,KAAZ;AAEb;;;;;;;;;;;;AAWa,OAAA,CAAA,SAAA,GAAY,OAAA,CAAA,KAAZ,C,CAAmB;;AAEhC;;;;;;;AAMA,SAAgB,iBAAhB,CAAkC,QAAlC,EAAkD;AAChD;AACA;AACA;AACA,SAAO,OAAA,CAAA,KAAP;AACD;;AALD,OAAA,CAAA,iBAAA,GAAA,iBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.adaptorForVersion = exports.adaptor34 = exports.adaptor33 = void 0;\nconst v0_33_1 = require(\"./v0-33\");\n/**\n * Adaptor for Tendermint 0.33.\n *\n * Use this to skip auto-detection:\n *\n * ```\n * import { adaptor33, Client as TendermintClient } from \"@cosmjs/tendermint-rpc\";\n * // ...\n * const client = await TendermintClient.connect(url, adaptor33);\n * ```\n */\nexports.adaptor33 = v0_33_1.v0_33;\n/**\n * Adaptor for Tendermint 0.34.\n *\n * Use this to skip auto-detection:\n *\n * ```\n * import { adaptor34, Client as TendermintClient } from \"@cosmjs/tendermint-rpc\";\n * // ...\n * const client = await TendermintClient.connect(url, adaptor34);\n * ```\n */\nexports.adaptor34 = v0_33_1.v0_33; // With this alias we can swap out the implementation without affecting caller code.\n/**\n * Returns an Adaptor implementation for a given tendermint version.\n * Throws when version is not supported.\n *\n * @param version full Tendermint version string, e.g. \"0.20.1\"\n */\nfunction adaptorForVersion(_version) {\n    // Note: In some cases, Tendermint 0.34 returns an empty version value.\n    // This supports 0.33 and 0.34 now, no matter which version you provide.\n    // Very soon this function becomes obsolete (https://github.com/cosmos/cosmjs/issues/789).\n    return v0_33_1.v0_33;\n}\nexports.adaptorForVersion = adaptorForVersion;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}