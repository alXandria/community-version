{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Tendermint34Client = void 0;\n\nconst jsonrpc_1 = require(\"../jsonrpc\");\n\nconst rpcclients_1 = require(\"../rpcclients\");\n\nconst adaptors_1 = require(\"./adaptors\");\n\nconst requests = __importStar(require(\"./requests\"));\n\nclass Tendermint34Client {\n  /**\n   * Use `Client.connect` or `Client.create` to create an instance.\n   */\n  constructor(client) {\n    this.client = client;\n    this.p = adaptors_1.adaptor34.params;\n    this.r = adaptors_1.adaptor34.responses;\n  }\n  /**\n   * Creates a new Tendermint client for the given endpoint.\n   *\n   * Uses HTTP when the URL schema is http or https. Uses WebSockets otherwise.\n   *\n   * If the adaptor is not set an auto-detection is attempted.\n   */\n\n\n  static async connect(url) {\n    const useHttp = url.startsWith(\"http://\") || url.startsWith(\"https://\");\n    const rpcClient = useHttp ? new rpcclients_1.HttpClient(url) : new rpcclients_1.WebsocketClient(url);\n    return Tendermint34Client.create(rpcClient);\n  }\n  /**\n   * Creates a new Tendermint client given an RPC client.\n   *\n   * If the adaptor is not set an auto-detection is attempted.\n   */\n\n\n  static async create(rpcClient) {\n    // For some very strange reason I don't understand, tests start to fail on some systems\n    // (our CI) when skipping the status call before doing other queries. Sleeping a little\n    // while did not help. Thus we query the version as a way to say \"hi\" to the backend,\n    // even in cases where we don't use the result.\n    const _version = await this.detectVersion(rpcClient);\n\n    return new Tendermint34Client(rpcClient);\n  }\n\n  static async detectVersion(client) {\n    const req = jsonrpc_1.createJsonRpcRequest(requests.Method.Status);\n    const response = await client.execute(req);\n    const result = response.result;\n\n    if (!result || !result.node_info) {\n      throw new Error(\"Unrecognized format for status response\");\n    }\n\n    const version = result.node_info.version;\n\n    if (typeof version !== \"string\") {\n      throw new Error(\"Unrecognized version format: must be string\");\n    }\n\n    return version;\n  }\n\n  disconnect() {\n    this.client.disconnect();\n  }\n\n  async abciInfo() {\n    const query = {\n      method: requests.Method.AbciInfo\n    };\n    return this.doCall(query, this.p.encodeAbciInfo, this.r.decodeAbciInfo);\n  }\n\n  async abciQuery(params) {\n    const query = {\n      params: params,\n      method: requests.Method.AbciQuery\n    };\n    return this.doCall(query, this.p.encodeAbciQuery, this.r.decodeAbciQuery);\n  }\n\n  async block(height) {\n    const query = {\n      method: requests.Method.Block,\n      params: {\n        height: height\n      }\n    };\n    return this.doCall(query, this.p.encodeBlock, this.r.decodeBlock);\n  }\n\n  async blockResults(height) {\n    const query = {\n      method: requests.Method.BlockResults,\n      params: {\n        height: height\n      }\n    };\n    return this.doCall(query, this.p.encodeBlockResults, this.r.decodeBlockResults);\n  }\n  /**\n   * Search for events that are in a block.\n   *\n   * NOTE\n   * This method will error on any node that is running a Tendermint version lower than 0.34.9.\n   *\n   * @see https://docs.tendermint.com/master/rpc/#/Info/block_search\n   */\n\n\n  async blockSearch(params) {\n    const query = {\n      params: params,\n      method: requests.Method.BlockSearch\n    };\n    const resp = await this.doCall(query, this.p.encodeBlockSearch, this.r.decodeBlockSearch);\n    return Object.assign(Object.assign({}, resp), {\n      // make sure we sort by height, as tendermint may be sorting by string value of the height\n      blocks: [...resp.blocks].sort((a, b) => a.block.header.height - b.block.header.height)\n    });\n  } // this should paginate through all blockSearch options to ensure it returns all results.\n  // starts with page 1 or whatever was provided (eg. to start on page 7)\n  //\n  // NOTE\n  // This method will error on any node that is running a Tendermint version lower than 0.34.9.\n\n\n  async blockSearchAll(params) {\n    let page = params.page || 1;\n    const blocks = [];\n    let done = false;\n\n    while (!done) {\n      const resp = await this.blockSearch(Object.assign(Object.assign({}, params), {\n        page: page\n      }));\n      blocks.push(...resp.blocks);\n\n      if (blocks.length < resp.totalCount) {\n        page++;\n      } else {\n        done = true;\n      }\n    } // make sure we sort by height, as tendermint may be sorting by string value of the height\n    // and the earlier items may be in a higher page than the later items\n\n\n    blocks.sort((a, b) => a.block.header.height - b.block.header.height);\n    return {\n      totalCount: blocks.length,\n      blocks: blocks\n    };\n  }\n  /**\n   * Queries block headers filtered by minHeight <= height <= maxHeight.\n   *\n   * @param minHeight The minimum height to be included in the result. Defaults to 0.\n   * @param maxHeight The maximum height to be included in the result. Defaults to infinity.\n   */\n\n\n  async blockchain(minHeight, maxHeight) {\n    const query = {\n      method: requests.Method.Blockchain,\n      params: {\n        minHeight: minHeight,\n        maxHeight: maxHeight\n      }\n    };\n    return this.doCall(query, this.p.encodeBlockchain, this.r.decodeBlockchain);\n  }\n  /**\n   * Broadcast transaction to mempool and wait for response\n   *\n   * @see https://docs.tendermint.com/master/rpc/#/Tx/broadcast_tx_sync\n   */\n\n\n  async broadcastTxSync(params) {\n    const query = {\n      params: params,\n      method: requests.Method.BroadcastTxSync\n    };\n    return this.doCall(query, this.p.encodeBroadcastTx, this.r.decodeBroadcastTxSync);\n  }\n  /**\n   * Broadcast transaction to mempool and do not wait for result\n   *\n   * @see https://docs.tendermint.com/master/rpc/#/Tx/broadcast_tx_async\n   */\n\n\n  async broadcastTxAsync(params) {\n    const query = {\n      params: params,\n      method: requests.Method.BroadcastTxAsync\n    };\n    return this.doCall(query, this.p.encodeBroadcastTx, this.r.decodeBroadcastTxAsync);\n  }\n  /**\n   * Broadcast transaction to mempool and wait for block\n   *\n   * @see https://docs.tendermint.com/master/rpc/#/Tx/broadcast_tx_commit\n   */\n\n\n  async broadcastTxCommit(params) {\n    const query = {\n      params: params,\n      method: requests.Method.BroadcastTxCommit\n    };\n    return this.doCall(query, this.p.encodeBroadcastTx, this.r.decodeBroadcastTxCommit);\n  }\n\n  async commit(height) {\n    const query = {\n      method: requests.Method.Commit,\n      params: {\n        height: height\n      }\n    };\n    return this.doCall(query, this.p.encodeCommit, this.r.decodeCommit);\n  }\n\n  async genesis() {\n    const query = {\n      method: requests.Method.Genesis\n    };\n    return this.doCall(query, this.p.encodeGenesis, this.r.decodeGenesis);\n  }\n\n  async health() {\n    const query = {\n      method: requests.Method.Health\n    };\n    return this.doCall(query, this.p.encodeHealth, this.r.decodeHealth);\n  }\n\n  async status() {\n    const query = {\n      method: requests.Method.Status\n    };\n    return this.doCall(query, this.p.encodeStatus, this.r.decodeStatus);\n  }\n\n  subscribeNewBlock() {\n    const request = {\n      method: requests.Method.Subscribe,\n      query: {\n        type: requests.SubscriptionEventType.NewBlock\n      }\n    };\n    return this.subscribe(request, this.r.decodeNewBlockEvent);\n  }\n\n  subscribeNewBlockHeader() {\n    const request = {\n      method: requests.Method.Subscribe,\n      query: {\n        type: requests.SubscriptionEventType.NewBlockHeader\n      }\n    };\n    return this.subscribe(request, this.r.decodeNewBlockHeaderEvent);\n  }\n\n  subscribeTx(query) {\n    const request = {\n      method: requests.Method.Subscribe,\n      query: {\n        type: requests.SubscriptionEventType.Tx,\n        raw: query\n      }\n    };\n    return this.subscribe(request, this.r.decodeTxEvent);\n  }\n  /**\n   * Get a single transaction by hash\n   *\n   * @see https://docs.tendermint.com/master/rpc/#/Info/tx\n   */\n\n\n  async tx(params) {\n    const query = {\n      params: params,\n      method: requests.Method.Tx\n    };\n    return this.doCall(query, this.p.encodeTx, this.r.decodeTx);\n  }\n  /**\n   * Search for transactions that are in a block\n   *\n   * @see https://docs.tendermint.com/master/rpc/#/Info/tx_search\n   */\n\n\n  async txSearch(params) {\n    const query = {\n      params: params,\n      method: requests.Method.TxSearch\n    };\n    const resp = await this.doCall(query, this.p.encodeTxSearch, this.r.decodeTxSearch);\n    return Object.assign(Object.assign({}, resp), {\n      // make sure we sort by height, as tendermint may be sorting by string value of the height\n      txs: [...resp.txs].sort((a, b) => a.height - b.height)\n    });\n  } // this should paginate through all txSearch options to ensure it returns all results.\n  // starts with page 1 or whatever was provided (eg. to start on page 7)\n\n\n  async txSearchAll(params) {\n    let page = params.page || 1;\n    const txs = [];\n    let done = false;\n\n    while (!done) {\n      const resp = await this.txSearch(Object.assign(Object.assign({}, params), {\n        page: page\n      }));\n      txs.push(...resp.txs);\n\n      if (txs.length < resp.totalCount) {\n        page++;\n      } else {\n        done = true;\n      }\n    } // make sure we sort by height, as tendermint may be sorting by string value of the height\n    // and the earlier items may be in a higher page than the later items\n\n\n    txs.sort((a, b) => a.height - b.height);\n    return {\n      totalCount: txs.length,\n      txs: txs\n    };\n  }\n\n  async validators(params) {\n    const query = {\n      method: requests.Method.Validators,\n      params: params\n    };\n    return this.doCall(query, this.p.encodeValidators, this.r.decodeValidators);\n  }\n\n  async validatorsAll(height) {\n    const validators = [];\n    let page = 1;\n    let done = false;\n    let blockHeight = height;\n\n    while (!done) {\n      const response = await this.validators({\n        per_page: 50,\n        height: blockHeight,\n        page: page\n      });\n      validators.push(...response.validators);\n      blockHeight = blockHeight || response.blockHeight;\n\n      if (validators.length < response.total) {\n        page++;\n      } else {\n        done = true;\n      }\n    }\n\n    return {\n      // NOTE: Default value is for type safety but this should always be set\n      blockHeight: blockHeight !== null && blockHeight !== void 0 ? blockHeight : 0,\n      count: validators.length,\n      total: validators.length,\n      validators: validators\n    };\n  } // doCall is a helper to handle the encode/call/decode logic\n\n\n  async doCall(request, encode, decode) {\n    const req = encode(request);\n    const result = await this.client.execute(req);\n    return decode(result);\n  }\n\n  subscribe(request, decode) {\n    if (!rpcclients_1.instanceOfRpcStreamingClient(this.client)) {\n      throw new Error(\"This RPC client type cannot subscribe to events\");\n    }\n\n    const req = this.p.encodeSubscribe(request);\n    const eventStream = this.client.listen(req);\n    return eventStream.map(event => {\n      return decode(event);\n    });\n  }\n\n}\n\nexports.Tendermint34Client = Tendermint34Client;","map":{"version":3,"sources":["../../src/tendermint34/tendermint34client.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Tendermint34Client = void 0;\nconst jsonrpc_1 = require(\"../jsonrpc\");\nconst rpcclients_1 = require(\"../rpcclients\");\nconst adaptors_1 = require(\"./adaptors\");\nconst requests = __importStar(require(\"./requests\"));\nclass Tendermint34Client {\n    /**\n     * Use `Client.connect` or `Client.create` to create an instance.\n     */\n    constructor(client) {\n        this.client = client;\n        this.p = adaptors_1.adaptor34.params;\n        this.r = adaptors_1.adaptor34.responses;\n    }\n    /**\n     * Creates a new Tendermint client for the given endpoint.\n     *\n     * Uses HTTP when the URL schema is http or https. Uses WebSockets otherwise.\n     *\n     * If the adaptor is not set an auto-detection is attempted.\n     */\n    static async connect(url) {\n        const useHttp = url.startsWith(\"http://\") || url.startsWith(\"https://\");\n        const rpcClient = useHttp ? new rpcclients_1.HttpClient(url) : new rpcclients_1.WebsocketClient(url);\n        return Tendermint34Client.create(rpcClient);\n    }\n    /**\n     * Creates a new Tendermint client given an RPC client.\n     *\n     * If the adaptor is not set an auto-detection is attempted.\n     */\n    static async create(rpcClient) {\n        // For some very strange reason I don't understand, tests start to fail on some systems\n        // (our CI) when skipping the status call before doing other queries. Sleeping a little\n        // while did not help. Thus we query the version as a way to say \"hi\" to the backend,\n        // even in cases where we don't use the result.\n        const _version = await this.detectVersion(rpcClient);\n        return new Tendermint34Client(rpcClient);\n    }\n    static async detectVersion(client) {\n        const req = jsonrpc_1.createJsonRpcRequest(requests.Method.Status);\n        const response = await client.execute(req);\n        const result = response.result;\n        if (!result || !result.node_info) {\n            throw new Error(\"Unrecognized format for status response\");\n        }\n        const version = result.node_info.version;\n        if (typeof version !== \"string\") {\n            throw new Error(\"Unrecognized version format: must be string\");\n        }\n        return version;\n    }\n    disconnect() {\n        this.client.disconnect();\n    }\n    async abciInfo() {\n        const query = { method: requests.Method.AbciInfo };\n        return this.doCall(query, this.p.encodeAbciInfo, this.r.decodeAbciInfo);\n    }\n    async abciQuery(params) {\n        const query = { params: params, method: requests.Method.AbciQuery };\n        return this.doCall(query, this.p.encodeAbciQuery, this.r.decodeAbciQuery);\n    }\n    async block(height) {\n        const query = { method: requests.Method.Block, params: { height: height } };\n        return this.doCall(query, this.p.encodeBlock, this.r.decodeBlock);\n    }\n    async blockResults(height) {\n        const query = {\n            method: requests.Method.BlockResults,\n            params: { height: height },\n        };\n        return this.doCall(query, this.p.encodeBlockResults, this.r.decodeBlockResults);\n    }\n    /**\n     * Search for events that are in a block.\n     *\n     * NOTE\n     * This method will error on any node that is running a Tendermint version lower than 0.34.9.\n     *\n     * @see https://docs.tendermint.com/master/rpc/#/Info/block_search\n     */\n    async blockSearch(params) {\n        const query = { params: params, method: requests.Method.BlockSearch };\n        const resp = await this.doCall(query, this.p.encodeBlockSearch, this.r.decodeBlockSearch);\n        return Object.assign(Object.assign({}, resp), { \n            // make sure we sort by height, as tendermint may be sorting by string value of the height\n            blocks: [...resp.blocks].sort((a, b) => a.block.header.height - b.block.header.height) });\n    }\n    // this should paginate through all blockSearch options to ensure it returns all results.\n    // starts with page 1 or whatever was provided (eg. to start on page 7)\n    //\n    // NOTE\n    // This method will error on any node that is running a Tendermint version lower than 0.34.9.\n    async blockSearchAll(params) {\n        let page = params.page || 1;\n        const blocks = [];\n        let done = false;\n        while (!done) {\n            const resp = await this.blockSearch(Object.assign(Object.assign({}, params), { page: page }));\n            blocks.push(...resp.blocks);\n            if (blocks.length < resp.totalCount) {\n                page++;\n            }\n            else {\n                done = true;\n            }\n        }\n        // make sure we sort by height, as tendermint may be sorting by string value of the height\n        // and the earlier items may be in a higher page than the later items\n        blocks.sort((a, b) => a.block.header.height - b.block.header.height);\n        return {\n            totalCount: blocks.length,\n            blocks: blocks,\n        };\n    }\n    /**\n     * Queries block headers filtered by minHeight <= height <= maxHeight.\n     *\n     * @param minHeight The minimum height to be included in the result. Defaults to 0.\n     * @param maxHeight The maximum height to be included in the result. Defaults to infinity.\n     */\n    async blockchain(minHeight, maxHeight) {\n        const query = {\n            method: requests.Method.Blockchain,\n            params: {\n                minHeight: minHeight,\n                maxHeight: maxHeight,\n            },\n        };\n        return this.doCall(query, this.p.encodeBlockchain, this.r.decodeBlockchain);\n    }\n    /**\n     * Broadcast transaction to mempool and wait for response\n     *\n     * @see https://docs.tendermint.com/master/rpc/#/Tx/broadcast_tx_sync\n     */\n    async broadcastTxSync(params) {\n        const query = { params: params, method: requests.Method.BroadcastTxSync };\n        return this.doCall(query, this.p.encodeBroadcastTx, this.r.decodeBroadcastTxSync);\n    }\n    /**\n     * Broadcast transaction to mempool and do not wait for result\n     *\n     * @see https://docs.tendermint.com/master/rpc/#/Tx/broadcast_tx_async\n     */\n    async broadcastTxAsync(params) {\n        const query = { params: params, method: requests.Method.BroadcastTxAsync };\n        return this.doCall(query, this.p.encodeBroadcastTx, this.r.decodeBroadcastTxAsync);\n    }\n    /**\n     * Broadcast transaction to mempool and wait for block\n     *\n     * @see https://docs.tendermint.com/master/rpc/#/Tx/broadcast_tx_commit\n     */\n    async broadcastTxCommit(params) {\n        const query = { params: params, method: requests.Method.BroadcastTxCommit };\n        return this.doCall(query, this.p.encodeBroadcastTx, this.r.decodeBroadcastTxCommit);\n    }\n    async commit(height) {\n        const query = { method: requests.Method.Commit, params: { height: height } };\n        return this.doCall(query, this.p.encodeCommit, this.r.decodeCommit);\n    }\n    async genesis() {\n        const query = { method: requests.Method.Genesis };\n        return this.doCall(query, this.p.encodeGenesis, this.r.decodeGenesis);\n    }\n    async health() {\n        const query = { method: requests.Method.Health };\n        return this.doCall(query, this.p.encodeHealth, this.r.decodeHealth);\n    }\n    async status() {\n        const query = { method: requests.Method.Status };\n        return this.doCall(query, this.p.encodeStatus, this.r.decodeStatus);\n    }\n    subscribeNewBlock() {\n        const request = {\n            method: requests.Method.Subscribe,\n            query: { type: requests.SubscriptionEventType.NewBlock },\n        };\n        return this.subscribe(request, this.r.decodeNewBlockEvent);\n    }\n    subscribeNewBlockHeader() {\n        const request = {\n            method: requests.Method.Subscribe,\n            query: { type: requests.SubscriptionEventType.NewBlockHeader },\n        };\n        return this.subscribe(request, this.r.decodeNewBlockHeaderEvent);\n    }\n    subscribeTx(query) {\n        const request = {\n            method: requests.Method.Subscribe,\n            query: {\n                type: requests.SubscriptionEventType.Tx,\n                raw: query,\n            },\n        };\n        return this.subscribe(request, this.r.decodeTxEvent);\n    }\n    /**\n     * Get a single transaction by hash\n     *\n     * @see https://docs.tendermint.com/master/rpc/#/Info/tx\n     */\n    async tx(params) {\n        const query = { params: params, method: requests.Method.Tx };\n        return this.doCall(query, this.p.encodeTx, this.r.decodeTx);\n    }\n    /**\n     * Search for transactions that are in a block\n     *\n     * @see https://docs.tendermint.com/master/rpc/#/Info/tx_search\n     */\n    async txSearch(params) {\n        const query = { params: params, method: requests.Method.TxSearch };\n        const resp = await this.doCall(query, this.p.encodeTxSearch, this.r.decodeTxSearch);\n        return Object.assign(Object.assign({}, resp), { \n            // make sure we sort by height, as tendermint may be sorting by string value of the height\n            txs: [...resp.txs].sort((a, b) => a.height - b.height) });\n    }\n    // this should paginate through all txSearch options to ensure it returns all results.\n    // starts with page 1 or whatever was provided (eg. to start on page 7)\n    async txSearchAll(params) {\n        let page = params.page || 1;\n        const txs = [];\n        let done = false;\n        while (!done) {\n            const resp = await this.txSearch(Object.assign(Object.assign({}, params), { page: page }));\n            txs.push(...resp.txs);\n            if (txs.length < resp.totalCount) {\n                page++;\n            }\n            else {\n                done = true;\n            }\n        }\n        // make sure we sort by height, as tendermint may be sorting by string value of the height\n        // and the earlier items may be in a higher page than the later items\n        txs.sort((a, b) => a.height - b.height);\n        return {\n            totalCount: txs.length,\n            txs: txs,\n        };\n    }\n    async validators(params) {\n        const query = {\n            method: requests.Method.Validators,\n            params: params,\n        };\n        return this.doCall(query, this.p.encodeValidators, this.r.decodeValidators);\n    }\n    async validatorsAll(height) {\n        const validators = [];\n        let page = 1;\n        let done = false;\n        let blockHeight = height;\n        while (!done) {\n            const response = await this.validators({\n                per_page: 50,\n                height: blockHeight,\n                page: page,\n            });\n            validators.push(...response.validators);\n            blockHeight = blockHeight || response.blockHeight;\n            if (validators.length < response.total) {\n                page++;\n            }\n            else {\n                done = true;\n            }\n        }\n        return {\n            // NOTE: Default value is for type safety but this should always be set\n            blockHeight: blockHeight !== null && blockHeight !== void 0 ? blockHeight : 0,\n            count: validators.length,\n            total: validators.length,\n            validators: validators,\n        };\n    }\n    // doCall is a helper to handle the encode/call/decode logic\n    async doCall(request, encode, decode) {\n        const req = encode(request);\n        const result = await this.client.execute(req);\n        return decode(result);\n    }\n    subscribe(request, decode) {\n        if (!rpcclients_1.instanceOfRpcStreamingClient(this.client)) {\n            throw new Error(\"This RPC client type cannot subscribe to events\");\n        }\n        const req = this.p.encodeSubscribe(request);\n        const eventStream = this.client.listen(req);\n        return eventStream.map((event) => {\n            return decode(event);\n        });\n    }\n}\nexports.Tendermint34Client = Tendermint34Client;\n//# sourceMappingURL=tendermint34client.js.map"]},"metadata":{},"sourceType":"script"}