{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setupBankExtension = void 0;\n/* eslint-disable @typescript-eslint/naming-convention */\n\nconst encoding_1 = require(\"@cosmjs/encoding\");\n\nconst utils_1 = require(\"@cosmjs/utils\");\n\nconst query_1 = require(\"../codec/cosmos/bank/v1beta1/query\");\n\nconst coin_1 = require(\"../codec/cosmos/base/v1beta1/coin\");\n\nconst utils_2 = require(\"./utils\");\n\nfunction setupBankExtension(base) {\n  const rpc = utils_2.createProtobufRpcClient(base); // Use this service to get easy typed access to query methods\n  // This cannot be used for proof verification\n\n  const queryService = new query_1.QueryClientImpl(rpc);\n  return {\n    bank: {\n      balance: async (address, denom) => {\n        const {\n          balance\n        } = await queryService.Balance({\n          address: address,\n          denom: denom\n        });\n        utils_1.assert(balance);\n        return balance;\n      },\n      allBalances: async address => {\n        const {\n          balances\n        } = await queryService.AllBalances({\n          address: address\n        });\n        return balances;\n      },\n      totalSupply: async () => {\n        const {\n          supply\n        } = await queryService.TotalSupply({});\n        return supply;\n      },\n      supplyOf: async denom => {\n        const {\n          amount\n        } = await queryService.SupplyOf({\n          denom: denom\n        });\n        utils_1.assert(amount);\n        return amount;\n      },\n      verified: {\n        balance: async (address, denom) => {\n          // balance key is a bit tricker, using some prefix stores\n          // https://github.com/cosmwasm/cosmos-sdk/blob/80f7ff62f79777a487d0c7a53c64b0f7e43c47b9/x/bank/keeper/view.go#L74-L77\n          // (\"balances\", binAddress, denom)\n          // it seem like prefix stores just do a dumb concat with the keys (no tricks to avoid overlap)\n          // https://github.com/cosmos/cosmos-sdk/blob/2879c0702c87dc9dd828a8c42b9224dc054e28ad/store/prefix/store.go#L61-L64\n          // https://github.com/cosmos/cosmos-sdk/blob/2879c0702c87dc9dd828a8c42b9224dc054e28ad/store/prefix/store.go#L37-L43\n          const key = Uint8Array.from([...encoding_1.toAscii(\"balances\"), ...utils_2.toAccAddress(address), ...encoding_1.toAscii(denom)]);\n          const responseData = await base.queryVerified(\"bank\", key);\n          return responseData.length ? coin_1.Coin.decode(responseData) : null;\n        }\n      }\n    }\n  };\n}\n\nexports.setupBankExtension = setupBankExtension;","map":{"version":3,"sources":["../../src/queries/bank.ts"],"names":[],"mappings":";;;;;;AAAA;;AACA,MAAA,UAAA,GAAA,OAAA,CAAA,kBAAA,CAAA;;AACA,MAAA,OAAA,GAAA,OAAA,CAAA,eAAA,CAAA;;AAEA,MAAA,OAAA,GAAA,OAAA,CAAA,oCAAA,CAAA;;AACA,MAAA,MAAA,GAAA,OAAA,CAAA,mCAAA,CAAA;;AAEA,MAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AAcA,SAAgB,kBAAhB,CAAmC,IAAnC,EAAoD;AAClD,QAAM,GAAG,GAAG,OAAA,CAAA,uBAAA,CAAwB,IAAxB,CAAZ,CADkD,CAElD;AACA;;AACA,QAAM,YAAY,GAAG,IAAI,OAAA,CAAA,eAAJ,CAAoB,GAApB,CAArB;AAEA,SAAO;AACL,IAAA,IAAI,EAAE;AACJ,MAAA,OAAO,EAAE,OAAO,OAAP,EAAwB,KAAxB,KAAyC;AAChD,cAAM;AAAE,UAAA;AAAF,YAAc,MAAM,YAAY,CAAC,OAAb,CAAqB;AAAE,UAAA,OAAO,EAAE,OAAX;AAAoB,UAAA,KAAK,EAAE;AAA3B,SAArB,CAA1B;AACA,QAAA,OAAA,CAAA,MAAA,CAAO,OAAP;AACA,eAAO,OAAP;AACD,OALG;AAMJ,MAAA,WAAW,EAAE,MAAO,OAAP,IAA0B;AACrC,cAAM;AAAE,UAAA;AAAF,YAAe,MAAM,YAAY,CAAC,WAAb,CAAyB;AAAE,UAAA,OAAO,EAAE;AAAX,SAAzB,CAA3B;AACA,eAAO,QAAP;AACD,OATG;AAUJ,MAAA,WAAW,EAAE,YAAW;AACtB,cAAM;AAAE,UAAA;AAAF,YAAa,MAAM,YAAY,CAAC,WAAb,CAAyB,EAAzB,CAAzB;AACA,eAAO,MAAP;AACD,OAbG;AAcJ,MAAA,QAAQ,EAAE,MAAO,KAAP,IAAwB;AAChC,cAAM;AAAE,UAAA;AAAF,YAAa,MAAM,YAAY,CAAC,QAAb,CAAsB;AAAE,UAAA,KAAK,EAAE;AAAT,SAAtB,CAAzB;AACA,QAAA,OAAA,CAAA,MAAA,CAAO,MAAP;AACA,eAAO,MAAP;AACD,OAlBG;AAmBJ,MAAA,QAAQ,EAAE;AACR,QAAA,OAAO,EAAE,OAAO,OAAP,EAAwB,KAAxB,KAAyC;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,gBAAM,GAAG,GAAG,UAAU,CAAC,IAAX,CAAgB,CAAC,GAAG,UAAA,CAAA,OAAA,CAAQ,UAAR,CAAJ,EAAyB,GAAG,OAAA,CAAA,YAAA,CAAa,OAAb,CAA5B,EAAmD,GAAG,UAAA,CAAA,OAAA,CAAQ,KAAR,CAAtD,CAAhB,CAAZ;AACA,gBAAM,YAAY,GAAG,MAAM,IAAI,CAAC,aAAL,CAAmB,MAAnB,EAA2B,GAA3B,CAA3B;AACA,iBAAO,YAAY,CAAC,MAAb,GAAsB,MAAA,CAAA,IAAA,CAAK,MAAL,CAAY,YAAZ,CAAtB,GAAkD,IAAzD;AACD;AAXO;AAnBN;AADD,GAAP;AAmCD;;AAzCD,OAAA,CAAA,kBAAA,GAAA,kBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.setupBankExtension = void 0;\n/* eslint-disable @typescript-eslint/naming-convention */\nconst encoding_1 = require(\"@cosmjs/encoding\");\nconst utils_1 = require(\"@cosmjs/utils\");\nconst query_1 = require(\"../codec/cosmos/bank/v1beta1/query\");\nconst coin_1 = require(\"../codec/cosmos/base/v1beta1/coin\");\nconst utils_2 = require(\"./utils\");\nfunction setupBankExtension(base) {\n    const rpc = utils_2.createProtobufRpcClient(base);\n    // Use this service to get easy typed access to query methods\n    // This cannot be used for proof verification\n    const queryService = new query_1.QueryClientImpl(rpc);\n    return {\n        bank: {\n            balance: async (address, denom) => {\n                const { balance } = await queryService.Balance({ address: address, denom: denom });\n                utils_1.assert(balance);\n                return balance;\n            },\n            allBalances: async (address) => {\n                const { balances } = await queryService.AllBalances({ address: address });\n                return balances;\n            },\n            totalSupply: async () => {\n                const { supply } = await queryService.TotalSupply({});\n                return supply;\n            },\n            supplyOf: async (denom) => {\n                const { amount } = await queryService.SupplyOf({ denom: denom });\n                utils_1.assert(amount);\n                return amount;\n            },\n            verified: {\n                balance: async (address, denom) => {\n                    // balance key is a bit tricker, using some prefix stores\n                    // https://github.com/cosmwasm/cosmos-sdk/blob/80f7ff62f79777a487d0c7a53c64b0f7e43c47b9/x/bank/keeper/view.go#L74-L77\n                    // (\"balances\", binAddress, denom)\n                    // it seem like prefix stores just do a dumb concat with the keys (no tricks to avoid overlap)\n                    // https://github.com/cosmos/cosmos-sdk/blob/2879c0702c87dc9dd828a8c42b9224dc054e28ad/store/prefix/store.go#L61-L64\n                    // https://github.com/cosmos/cosmos-sdk/blob/2879c0702c87dc9dd828a8c42b9224dc054e28ad/store/prefix/store.go#L37-L43\n                    const key = Uint8Array.from([...encoding_1.toAscii(\"balances\"), ...utils_2.toAccAddress(address), ...encoding_1.toAscii(denom)]);\n                    const responseData = await base.queryVerified(\"bank\", key);\n                    return responseData.length ? coin_1.Coin.decode(responseData) : null;\n                },\n            },\n        },\n    };\n}\nexports.setupBankExtension = setupBankExtension;\n//# sourceMappingURL=bank.js.map"]},"metadata":{},"sourceType":"script"}