{"ast":null,"code":"/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n\"use strict\";\n\nvar $protobuf = require(\"protobufjs/minimal\"); // Common aliases\n\n\nvar $Reader = $protobuf.Reader,\n    $Writer = $protobuf.Writer,\n    $util = $protobuf.util; // Exported root namespace\n\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\n$root.ics23 = function () {\n  /**\n   * Namespace ics23.\n   * @exports ics23\n   * @namespace\n   */\n  var ics23 = {};\n  /**\n   * HashOp enum.\n   * @name ics23.HashOp\n   * @enum {string}\n   * @property {number} NO_HASH=0 NO_HASH value\n   * @property {number} SHA256=1 SHA256 value\n   * @property {number} SHA512=2 SHA512 value\n   * @property {number} KECCAK=3 KECCAK value\n   * @property {number} RIPEMD160=4 RIPEMD160 value\n   * @property {number} BITCOIN=5 BITCOIN value\n   */\n\n  ics23.HashOp = function () {\n    var valuesById = {},\n        values = Object.create(valuesById);\n    values[valuesById[0] = \"NO_HASH\"] = 0;\n    values[valuesById[1] = \"SHA256\"] = 1;\n    values[valuesById[2] = \"SHA512\"] = 2;\n    values[valuesById[3] = \"KECCAK\"] = 3;\n    values[valuesById[4] = \"RIPEMD160\"] = 4;\n    values[valuesById[5] = \"BITCOIN\"] = 5;\n    return values;\n  }();\n  /**\n   * LengthOp defines how to process the key and value of the LeafOp\n   * to include length information. After encoding the length with the given\n   * algorithm, the length will be prepended to the key and value bytes.\n   * (Each one with it's own encoded length)\n   * @name ics23.LengthOp\n   * @enum {string}\n   * @property {number} NO_PREFIX=0 NO_PREFIX value\n   * @property {number} VAR_PROTO=1 VAR_PROTO value\n   * @property {number} VAR_RLP=2 VAR_RLP value\n   * @property {number} FIXED32_BIG=3 FIXED32_BIG value\n   * @property {number} FIXED32_LITTLE=4 FIXED32_LITTLE value\n   * @property {number} FIXED64_BIG=5 FIXED64_BIG value\n   * @property {number} FIXED64_LITTLE=6 FIXED64_LITTLE value\n   * @property {number} REQUIRE_32_BYTES=7 REQUIRE_32_BYTES value\n   * @property {number} REQUIRE_64_BYTES=8 REQUIRE_64_BYTES value\n   */\n\n\n  ics23.LengthOp = function () {\n    var valuesById = {},\n        values = Object.create(valuesById);\n    values[valuesById[0] = \"NO_PREFIX\"] = 0;\n    values[valuesById[1] = \"VAR_PROTO\"] = 1;\n    values[valuesById[2] = \"VAR_RLP\"] = 2;\n    values[valuesById[3] = \"FIXED32_BIG\"] = 3;\n    values[valuesById[4] = \"FIXED32_LITTLE\"] = 4;\n    values[valuesById[5] = \"FIXED64_BIG\"] = 5;\n    values[valuesById[6] = \"FIXED64_LITTLE\"] = 6;\n    values[valuesById[7] = \"REQUIRE_32_BYTES\"] = 7;\n    values[valuesById[8] = \"REQUIRE_64_BYTES\"] = 8;\n    return values;\n  }();\n\n  ics23.ExistenceProof = function () {\n    /**\n     * Properties of an ExistenceProof.\n     * @memberof ics23\n     * @interface IExistenceProof\n     * @property {Uint8Array|null} [key] ExistenceProof key\n     * @property {Uint8Array|null} [value] ExistenceProof value\n     * @property {ics23.ILeafOp|null} [leaf] ExistenceProof leaf\n     * @property {Array.<ics23.IInnerOp>|null} [path] ExistenceProof path\n     */\n\n    /**\n     * Constructs a new ExistenceProof.\n     * @memberof ics23\n     * @classdesc ExistenceProof takes a key and a value and a set of steps to perform on it.\n     * The result of peforming all these steps will provide a \"root hash\", which can\n     * be compared to the value in a header.\n     * \n     * Since it is computationally infeasible to produce a hash collission for any of the used\n     * cryptographic hash functions, if someone can provide a series of operations to transform\n     * a given key and value into a root hash that matches some trusted root, these key and values\n     * must be in the referenced merkle tree.\n     * \n     * The only possible issue is maliablity in LeafOp, such as providing extra prefix data,\n     * which should be controlled by a spec. Eg. with lengthOp as NONE,\n     * prefix = FOO, key = BAR, value = CHOICE\n     * and\n     * prefix = F, key = OOBAR, value = CHOICE\n     * would produce the same value.\n     * \n     * With LengthOp this is tricker but not impossible. Which is why the \"leafPrefixEqual\" field\n     * in the ProofSpec is valuable to prevent this mutability. And why all trees should\n     * length-prefix the data before hashing it.\n     * @implements IExistenceProof\n     * @constructor\n     * @param {ics23.IExistenceProof=} [properties] Properties to set\n     */\n    function ExistenceProof(properties) {\n      this.path = [];\n      if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n    /**\n     * ExistenceProof key.\n     * @member {Uint8Array} key\n     * @memberof ics23.ExistenceProof\n     * @instance\n     */\n\n\n    ExistenceProof.prototype.key = $util.newBuffer([]);\n    /**\n     * ExistenceProof value.\n     * @member {Uint8Array} value\n     * @memberof ics23.ExistenceProof\n     * @instance\n     */\n\n    ExistenceProof.prototype.value = $util.newBuffer([]);\n    /**\n     * ExistenceProof leaf.\n     * @member {ics23.ILeafOp|null|undefined} leaf\n     * @memberof ics23.ExistenceProof\n     * @instance\n     */\n\n    ExistenceProof.prototype.leaf = null;\n    /**\n     * ExistenceProof path.\n     * @member {Array.<ics23.IInnerOp>} path\n     * @memberof ics23.ExistenceProof\n     * @instance\n     */\n\n    ExistenceProof.prototype.path = $util.emptyArray;\n    /**\n     * Creates a new ExistenceProof instance using the specified properties.\n     * @function create\n     * @memberof ics23.ExistenceProof\n     * @static\n     * @param {ics23.IExistenceProof=} [properties] Properties to set\n     * @returns {ics23.ExistenceProof} ExistenceProof instance\n     */\n\n    ExistenceProof.create = function create(properties) {\n      return new ExistenceProof(properties);\n    };\n    /**\n     * Encodes the specified ExistenceProof message. Does not implicitly {@link ics23.ExistenceProof.verify|verify} messages.\n     * @function encode\n     * @memberof ics23.ExistenceProof\n     * @static\n     * @param {ics23.IExistenceProof} message ExistenceProof message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n\n\n    ExistenceProof.encode = function encode(message, writer) {\n      if (!writer) writer = $Writer.create();\n      if (message.key != null && message.hasOwnProperty(\"key\")) writer.uint32(\n      /* id 1, wireType 2 =*/\n      10).bytes(message.key);\n      if (message.value != null && message.hasOwnProperty(\"value\")) writer.uint32(\n      /* id 2, wireType 2 =*/\n      18).bytes(message.value);\n      if (message.leaf != null && message.hasOwnProperty(\"leaf\")) $root.ics23.LeafOp.encode(message.leaf, writer.uint32(\n      /* id 3, wireType 2 =*/\n      26).fork()).ldelim();\n      if (message.path != null && message.path.length) for (var i = 0; i < message.path.length; ++i) $root.ics23.InnerOp.encode(message.path[i], writer.uint32(\n      /* id 4, wireType 2 =*/\n      34).fork()).ldelim();\n      return writer;\n    };\n    /**\n     * Encodes the specified ExistenceProof message, length delimited. Does not implicitly {@link ics23.ExistenceProof.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ics23.ExistenceProof\n     * @static\n     * @param {ics23.IExistenceProof} message ExistenceProof message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n\n\n    ExistenceProof.encodeDelimited = function encodeDelimited(message, writer) {\n      return this.encode(message, writer).ldelim();\n    };\n    /**\n     * Decodes an ExistenceProof message from the specified reader or buffer.\n     * @function decode\n     * @memberof ics23.ExistenceProof\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ics23.ExistenceProof} ExistenceProof\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n\n\n    ExistenceProof.decode = function decode(reader, length) {\n      if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n      var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.ics23.ExistenceProof();\n\n      while (reader.pos < end) {\n        var tag = reader.uint32();\n\n        switch (tag >>> 3) {\n          case 1:\n            message.key = reader.bytes();\n            break;\n\n          case 2:\n            message.value = reader.bytes();\n            break;\n\n          case 3:\n            message.leaf = $root.ics23.LeafOp.decode(reader, reader.uint32());\n            break;\n\n          case 4:\n            if (!(message.path && message.path.length)) message.path = [];\n            message.path.push($root.ics23.InnerOp.decode(reader, reader.uint32()));\n            break;\n\n          default:\n            reader.skipType(tag & 7);\n            break;\n        }\n      }\n\n      return message;\n    };\n    /**\n     * Decodes an ExistenceProof message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ics23.ExistenceProof\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ics23.ExistenceProof} ExistenceProof\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n\n\n    ExistenceProof.decodeDelimited = function decodeDelimited(reader) {\n      if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n      return this.decode(reader, reader.uint32());\n    };\n    /**\n     * Verifies an ExistenceProof message.\n     * @function verify\n     * @memberof ics23.ExistenceProof\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n\n\n    ExistenceProof.verify = function verify(message) {\n      if (typeof message !== \"object\" || message === null) return \"object expected\";\n      if (message.key != null && message.hasOwnProperty(\"key\")) if (!(message.key && typeof message.key.length === \"number\" || $util.isString(message.key))) return \"key: buffer expected\";\n      if (message.value != null && message.hasOwnProperty(\"value\")) if (!(message.value && typeof message.value.length === \"number\" || $util.isString(message.value))) return \"value: buffer expected\";\n\n      if (message.leaf != null && message.hasOwnProperty(\"leaf\")) {\n        var error = $root.ics23.LeafOp.verify(message.leaf);\n        if (error) return \"leaf.\" + error;\n      }\n\n      if (message.path != null && message.hasOwnProperty(\"path\")) {\n        if (!Array.isArray(message.path)) return \"path: array expected\";\n\n        for (var i = 0; i < message.path.length; ++i) {\n          var error = $root.ics23.InnerOp.verify(message.path[i]);\n          if (error) return \"path.\" + error;\n        }\n      }\n\n      return null;\n    };\n    /**\n     * Creates an ExistenceProof message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof ics23.ExistenceProof\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {ics23.ExistenceProof} ExistenceProof\n     */\n\n\n    ExistenceProof.fromObject = function fromObject(object) {\n      if (object instanceof $root.ics23.ExistenceProof) return object;\n      var message = new $root.ics23.ExistenceProof();\n      if (object.key != null) if (typeof object.key === \"string\") $util.base64.decode(object.key, message.key = $util.newBuffer($util.base64.length(object.key)), 0);else if (object.key.length) message.key = object.key;\n      if (object.value != null) if (typeof object.value === \"string\") $util.base64.decode(object.value, message.value = $util.newBuffer($util.base64.length(object.value)), 0);else if (object.value.length) message.value = object.value;\n\n      if (object.leaf != null) {\n        if (typeof object.leaf !== \"object\") throw TypeError(\".ics23.ExistenceProof.leaf: object expected\");\n        message.leaf = $root.ics23.LeafOp.fromObject(object.leaf);\n      }\n\n      if (object.path) {\n        if (!Array.isArray(object.path)) throw TypeError(\".ics23.ExistenceProof.path: array expected\");\n        message.path = [];\n\n        for (var i = 0; i < object.path.length; ++i) {\n          if (typeof object.path[i] !== \"object\") throw TypeError(\".ics23.ExistenceProof.path: object expected\");\n          message.path[i] = $root.ics23.InnerOp.fromObject(object.path[i]);\n        }\n      }\n\n      return message;\n    };\n    /**\n     * Creates a plain object from an ExistenceProof message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ics23.ExistenceProof\n     * @static\n     * @param {ics23.ExistenceProof} message ExistenceProof\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n\n\n    ExistenceProof.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      var object = {};\n      if (options.arrays || options.defaults) object.path = [];\n\n      if (options.defaults) {\n        if (options.bytes === String) object.key = \"\";else {\n          object.key = [];\n          if (options.bytes !== Array) object.key = $util.newBuffer(object.key);\n        }\n        if (options.bytes === String) object.value = \"\";else {\n          object.value = [];\n          if (options.bytes !== Array) object.value = $util.newBuffer(object.value);\n        }\n        object.leaf = null;\n      }\n\n      if (message.key != null && message.hasOwnProperty(\"key\")) object.key = options.bytes === String ? $util.base64.encode(message.key, 0, message.key.length) : options.bytes === Array ? Array.prototype.slice.call(message.key) : message.key;\n      if (message.value != null && message.hasOwnProperty(\"value\")) object.value = options.bytes === String ? $util.base64.encode(message.value, 0, message.value.length) : options.bytes === Array ? Array.prototype.slice.call(message.value) : message.value;\n      if (message.leaf != null && message.hasOwnProperty(\"leaf\")) object.leaf = $root.ics23.LeafOp.toObject(message.leaf, options);\n\n      if (message.path && message.path.length) {\n        object.path = [];\n\n        for (var j = 0; j < message.path.length; ++j) object.path[j] = $root.ics23.InnerOp.toObject(message.path[j], options);\n      }\n\n      return object;\n    };\n    /**\n     * Converts this ExistenceProof to JSON.\n     * @function toJSON\n     * @memberof ics23.ExistenceProof\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n\n\n    ExistenceProof.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return ExistenceProof;\n  }();\n\n  ics23.NonExistenceProof = function () {\n    /**\n     * Properties of a NonExistenceProof.\n     * @memberof ics23\n     * @interface INonExistenceProof\n     * @property {Uint8Array|null} [key] NonExistenceProof key\n     * @property {ics23.IExistenceProof|null} [left] NonExistenceProof left\n     * @property {ics23.IExistenceProof|null} [right] NonExistenceProof right\n     */\n\n    /**\n     * Constructs a new NonExistenceProof.\n     * @memberof ics23\n     * @classdesc Represents a NonExistenceProof.\n     * @implements INonExistenceProof\n     * @constructor\n     * @param {ics23.INonExistenceProof=} [properties] Properties to set\n     */\n    function NonExistenceProof(properties) {\n      if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n    /**\n     * NonExistenceProof key.\n     * @member {Uint8Array} key\n     * @memberof ics23.NonExistenceProof\n     * @instance\n     */\n\n\n    NonExistenceProof.prototype.key = $util.newBuffer([]);\n    /**\n     * NonExistenceProof left.\n     * @member {ics23.IExistenceProof|null|undefined} left\n     * @memberof ics23.NonExistenceProof\n     * @instance\n     */\n\n    NonExistenceProof.prototype.left = null;\n    /**\n     * NonExistenceProof right.\n     * @member {ics23.IExistenceProof|null|undefined} right\n     * @memberof ics23.NonExistenceProof\n     * @instance\n     */\n\n    NonExistenceProof.prototype.right = null;\n    /**\n     * Creates a new NonExistenceProof instance using the specified properties.\n     * @function create\n     * @memberof ics23.NonExistenceProof\n     * @static\n     * @param {ics23.INonExistenceProof=} [properties] Properties to set\n     * @returns {ics23.NonExistenceProof} NonExistenceProof instance\n     */\n\n    NonExistenceProof.create = function create(properties) {\n      return new NonExistenceProof(properties);\n    };\n    /**\n     * Encodes the specified NonExistenceProof message. Does not implicitly {@link ics23.NonExistenceProof.verify|verify} messages.\n     * @function encode\n     * @memberof ics23.NonExistenceProof\n     * @static\n     * @param {ics23.INonExistenceProof} message NonExistenceProof message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n\n\n    NonExistenceProof.encode = function encode(message, writer) {\n      if (!writer) writer = $Writer.create();\n      if (message.key != null && message.hasOwnProperty(\"key\")) writer.uint32(\n      /* id 1, wireType 2 =*/\n      10).bytes(message.key);\n      if (message.left != null && message.hasOwnProperty(\"left\")) $root.ics23.ExistenceProof.encode(message.left, writer.uint32(\n      /* id 2, wireType 2 =*/\n      18).fork()).ldelim();\n      if (message.right != null && message.hasOwnProperty(\"right\")) $root.ics23.ExistenceProof.encode(message.right, writer.uint32(\n      /* id 3, wireType 2 =*/\n      26).fork()).ldelim();\n      return writer;\n    };\n    /**\n     * Encodes the specified NonExistenceProof message, length delimited. Does not implicitly {@link ics23.NonExistenceProof.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ics23.NonExistenceProof\n     * @static\n     * @param {ics23.INonExistenceProof} message NonExistenceProof message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n\n\n    NonExistenceProof.encodeDelimited = function encodeDelimited(message, writer) {\n      return this.encode(message, writer).ldelim();\n    };\n    /**\n     * Decodes a NonExistenceProof message from the specified reader or buffer.\n     * @function decode\n     * @memberof ics23.NonExistenceProof\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ics23.NonExistenceProof} NonExistenceProof\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n\n\n    NonExistenceProof.decode = function decode(reader, length) {\n      if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n      var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.ics23.NonExistenceProof();\n\n      while (reader.pos < end) {\n        var tag = reader.uint32();\n\n        switch (tag >>> 3) {\n          case 1:\n            message.key = reader.bytes();\n            break;\n\n          case 2:\n            message.left = $root.ics23.ExistenceProof.decode(reader, reader.uint32());\n            break;\n\n          case 3:\n            message.right = $root.ics23.ExistenceProof.decode(reader, reader.uint32());\n            break;\n\n          default:\n            reader.skipType(tag & 7);\n            break;\n        }\n      }\n\n      return message;\n    };\n    /**\n     * Decodes a NonExistenceProof message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ics23.NonExistenceProof\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ics23.NonExistenceProof} NonExistenceProof\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n\n\n    NonExistenceProof.decodeDelimited = function decodeDelimited(reader) {\n      if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n      return this.decode(reader, reader.uint32());\n    };\n    /**\n     * Verifies a NonExistenceProof message.\n     * @function verify\n     * @memberof ics23.NonExistenceProof\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n\n\n    NonExistenceProof.verify = function verify(message) {\n      if (typeof message !== \"object\" || message === null) return \"object expected\";\n      if (message.key != null && message.hasOwnProperty(\"key\")) if (!(message.key && typeof message.key.length === \"number\" || $util.isString(message.key))) return \"key: buffer expected\";\n\n      if (message.left != null && message.hasOwnProperty(\"left\")) {\n        var error = $root.ics23.ExistenceProof.verify(message.left);\n        if (error) return \"left.\" + error;\n      }\n\n      if (message.right != null && message.hasOwnProperty(\"right\")) {\n        var error = $root.ics23.ExistenceProof.verify(message.right);\n        if (error) return \"right.\" + error;\n      }\n\n      return null;\n    };\n    /**\n     * Creates a NonExistenceProof message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof ics23.NonExistenceProof\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {ics23.NonExistenceProof} NonExistenceProof\n     */\n\n\n    NonExistenceProof.fromObject = function fromObject(object) {\n      if (object instanceof $root.ics23.NonExistenceProof) return object;\n      var message = new $root.ics23.NonExistenceProof();\n      if (object.key != null) if (typeof object.key === \"string\") $util.base64.decode(object.key, message.key = $util.newBuffer($util.base64.length(object.key)), 0);else if (object.key.length) message.key = object.key;\n\n      if (object.left != null) {\n        if (typeof object.left !== \"object\") throw TypeError(\".ics23.NonExistenceProof.left: object expected\");\n        message.left = $root.ics23.ExistenceProof.fromObject(object.left);\n      }\n\n      if (object.right != null) {\n        if (typeof object.right !== \"object\") throw TypeError(\".ics23.NonExistenceProof.right: object expected\");\n        message.right = $root.ics23.ExistenceProof.fromObject(object.right);\n      }\n\n      return message;\n    };\n    /**\n     * Creates a plain object from a NonExistenceProof message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ics23.NonExistenceProof\n     * @static\n     * @param {ics23.NonExistenceProof} message NonExistenceProof\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n\n\n    NonExistenceProof.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      var object = {};\n\n      if (options.defaults) {\n        if (options.bytes === String) object.key = \"\";else {\n          object.key = [];\n          if (options.bytes !== Array) object.key = $util.newBuffer(object.key);\n        }\n        object.left = null;\n        object.right = null;\n      }\n\n      if (message.key != null && message.hasOwnProperty(\"key\")) object.key = options.bytes === String ? $util.base64.encode(message.key, 0, message.key.length) : options.bytes === Array ? Array.prototype.slice.call(message.key) : message.key;\n      if (message.left != null && message.hasOwnProperty(\"left\")) object.left = $root.ics23.ExistenceProof.toObject(message.left, options);\n      if (message.right != null && message.hasOwnProperty(\"right\")) object.right = $root.ics23.ExistenceProof.toObject(message.right, options);\n      return object;\n    };\n    /**\n     * Converts this NonExistenceProof to JSON.\n     * @function toJSON\n     * @memberof ics23.NonExistenceProof\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n\n\n    NonExistenceProof.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return NonExistenceProof;\n  }();\n\n  ics23.CommitmentProof = function () {\n    /**\n     * Properties of a CommitmentProof.\n     * @memberof ics23\n     * @interface ICommitmentProof\n     * @property {ics23.IExistenceProof|null} [exist] CommitmentProof exist\n     * @property {ics23.INonExistenceProof|null} [nonexist] CommitmentProof nonexist\n     * @property {ics23.IBatchProof|null} [batch] CommitmentProof batch\n     * @property {ics23.ICompressedBatchProof|null} [compressed] CommitmentProof compressed\n     */\n\n    /**\n     * Constructs a new CommitmentProof.\n     * @memberof ics23\n     * @classdesc Represents a CommitmentProof.\n     * @implements ICommitmentProof\n     * @constructor\n     * @param {ics23.ICommitmentProof=} [properties] Properties to set\n     */\n    function CommitmentProof(properties) {\n      if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n    /**\n     * CommitmentProof exist.\n     * @member {ics23.IExistenceProof|null|undefined} exist\n     * @memberof ics23.CommitmentProof\n     * @instance\n     */\n\n\n    CommitmentProof.prototype.exist = null;\n    /**\n     * CommitmentProof nonexist.\n     * @member {ics23.INonExistenceProof|null|undefined} nonexist\n     * @memberof ics23.CommitmentProof\n     * @instance\n     */\n\n    CommitmentProof.prototype.nonexist = null;\n    /**\n     * CommitmentProof batch.\n     * @member {ics23.IBatchProof|null|undefined} batch\n     * @memberof ics23.CommitmentProof\n     * @instance\n     */\n\n    CommitmentProof.prototype.batch = null;\n    /**\n     * CommitmentProof compressed.\n     * @member {ics23.ICompressedBatchProof|null|undefined} compressed\n     * @memberof ics23.CommitmentProof\n     * @instance\n     */\n\n    CommitmentProof.prototype.compressed = null; // OneOf field names bound to virtual getters and setters\n\n    var $oneOfFields;\n    /**\n     * CommitmentProof proof.\n     * @member {\"exist\"|\"nonexist\"|\"batch\"|\"compressed\"|undefined} proof\n     * @memberof ics23.CommitmentProof\n     * @instance\n     */\n\n    Object.defineProperty(CommitmentProof.prototype, \"proof\", {\n      get: $util.oneOfGetter($oneOfFields = [\"exist\", \"nonexist\", \"batch\", \"compressed\"]),\n      set: $util.oneOfSetter($oneOfFields)\n    });\n    /**\n     * Creates a new CommitmentProof instance using the specified properties.\n     * @function create\n     * @memberof ics23.CommitmentProof\n     * @static\n     * @param {ics23.ICommitmentProof=} [properties] Properties to set\n     * @returns {ics23.CommitmentProof} CommitmentProof instance\n     */\n\n    CommitmentProof.create = function create(properties) {\n      return new CommitmentProof(properties);\n    };\n    /**\n     * Encodes the specified CommitmentProof message. Does not implicitly {@link ics23.CommitmentProof.verify|verify} messages.\n     * @function encode\n     * @memberof ics23.CommitmentProof\n     * @static\n     * @param {ics23.ICommitmentProof} message CommitmentProof message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n\n\n    CommitmentProof.encode = function encode(message, writer) {\n      if (!writer) writer = $Writer.create();\n      if (message.exist != null && message.hasOwnProperty(\"exist\")) $root.ics23.ExistenceProof.encode(message.exist, writer.uint32(\n      /* id 1, wireType 2 =*/\n      10).fork()).ldelim();\n      if (message.nonexist != null && message.hasOwnProperty(\"nonexist\")) $root.ics23.NonExistenceProof.encode(message.nonexist, writer.uint32(\n      /* id 2, wireType 2 =*/\n      18).fork()).ldelim();\n      if (message.batch != null && message.hasOwnProperty(\"batch\")) $root.ics23.BatchProof.encode(message.batch, writer.uint32(\n      /* id 3, wireType 2 =*/\n      26).fork()).ldelim();\n      if (message.compressed != null && message.hasOwnProperty(\"compressed\")) $root.ics23.CompressedBatchProof.encode(message.compressed, writer.uint32(\n      /* id 4, wireType 2 =*/\n      34).fork()).ldelim();\n      return writer;\n    };\n    /**\n     * Encodes the specified CommitmentProof message, length delimited. Does not implicitly {@link ics23.CommitmentProof.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ics23.CommitmentProof\n     * @static\n     * @param {ics23.ICommitmentProof} message CommitmentProof message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n\n\n    CommitmentProof.encodeDelimited = function encodeDelimited(message, writer) {\n      return this.encode(message, writer).ldelim();\n    };\n    /**\n     * Decodes a CommitmentProof message from the specified reader or buffer.\n     * @function decode\n     * @memberof ics23.CommitmentProof\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ics23.CommitmentProof} CommitmentProof\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n\n\n    CommitmentProof.decode = function decode(reader, length) {\n      if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n      var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.ics23.CommitmentProof();\n\n      while (reader.pos < end) {\n        var tag = reader.uint32();\n\n        switch (tag >>> 3) {\n          case 1:\n            message.exist = $root.ics23.ExistenceProof.decode(reader, reader.uint32());\n            break;\n\n          case 2:\n            message.nonexist = $root.ics23.NonExistenceProof.decode(reader, reader.uint32());\n            break;\n\n          case 3:\n            message.batch = $root.ics23.BatchProof.decode(reader, reader.uint32());\n            break;\n\n          case 4:\n            message.compressed = $root.ics23.CompressedBatchProof.decode(reader, reader.uint32());\n            break;\n\n          default:\n            reader.skipType(tag & 7);\n            break;\n        }\n      }\n\n      return message;\n    };\n    /**\n     * Decodes a CommitmentProof message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ics23.CommitmentProof\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ics23.CommitmentProof} CommitmentProof\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n\n\n    CommitmentProof.decodeDelimited = function decodeDelimited(reader) {\n      if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n      return this.decode(reader, reader.uint32());\n    };\n    /**\n     * Verifies a CommitmentProof message.\n     * @function verify\n     * @memberof ics23.CommitmentProof\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n\n\n    CommitmentProof.verify = function verify(message) {\n      if (typeof message !== \"object\" || message === null) return \"object expected\";\n      var properties = {};\n\n      if (message.exist != null && message.hasOwnProperty(\"exist\")) {\n        properties.proof = 1;\n        {\n          var error = $root.ics23.ExistenceProof.verify(message.exist);\n          if (error) return \"exist.\" + error;\n        }\n      }\n\n      if (message.nonexist != null && message.hasOwnProperty(\"nonexist\")) {\n        if (properties.proof === 1) return \"proof: multiple values\";\n        properties.proof = 1;\n        {\n          var error = $root.ics23.NonExistenceProof.verify(message.nonexist);\n          if (error) return \"nonexist.\" + error;\n        }\n      }\n\n      if (message.batch != null && message.hasOwnProperty(\"batch\")) {\n        if (properties.proof === 1) return \"proof: multiple values\";\n        properties.proof = 1;\n        {\n          var error = $root.ics23.BatchProof.verify(message.batch);\n          if (error) return \"batch.\" + error;\n        }\n      }\n\n      if (message.compressed != null && message.hasOwnProperty(\"compressed\")) {\n        if (properties.proof === 1) return \"proof: multiple values\";\n        properties.proof = 1;\n        {\n          var error = $root.ics23.CompressedBatchProof.verify(message.compressed);\n          if (error) return \"compressed.\" + error;\n        }\n      }\n\n      return null;\n    };\n    /**\n     * Creates a CommitmentProof message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof ics23.CommitmentProof\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {ics23.CommitmentProof} CommitmentProof\n     */\n\n\n    CommitmentProof.fromObject = function fromObject(object) {\n      if (object instanceof $root.ics23.CommitmentProof) return object;\n      var message = new $root.ics23.CommitmentProof();\n\n      if (object.exist != null) {\n        if (typeof object.exist !== \"object\") throw TypeError(\".ics23.CommitmentProof.exist: object expected\");\n        message.exist = $root.ics23.ExistenceProof.fromObject(object.exist);\n      }\n\n      if (object.nonexist != null) {\n        if (typeof object.nonexist !== \"object\") throw TypeError(\".ics23.CommitmentProof.nonexist: object expected\");\n        message.nonexist = $root.ics23.NonExistenceProof.fromObject(object.nonexist);\n      }\n\n      if (object.batch != null) {\n        if (typeof object.batch !== \"object\") throw TypeError(\".ics23.CommitmentProof.batch: object expected\");\n        message.batch = $root.ics23.BatchProof.fromObject(object.batch);\n      }\n\n      if (object.compressed != null) {\n        if (typeof object.compressed !== \"object\") throw TypeError(\".ics23.CommitmentProof.compressed: object expected\");\n        message.compressed = $root.ics23.CompressedBatchProof.fromObject(object.compressed);\n      }\n\n      return message;\n    };\n    /**\n     * Creates a plain object from a CommitmentProof message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ics23.CommitmentProof\n     * @static\n     * @param {ics23.CommitmentProof} message CommitmentProof\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n\n\n    CommitmentProof.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      var object = {};\n\n      if (message.exist != null && message.hasOwnProperty(\"exist\")) {\n        object.exist = $root.ics23.ExistenceProof.toObject(message.exist, options);\n        if (options.oneofs) object.proof = \"exist\";\n      }\n\n      if (message.nonexist != null && message.hasOwnProperty(\"nonexist\")) {\n        object.nonexist = $root.ics23.NonExistenceProof.toObject(message.nonexist, options);\n        if (options.oneofs) object.proof = \"nonexist\";\n      }\n\n      if (message.batch != null && message.hasOwnProperty(\"batch\")) {\n        object.batch = $root.ics23.BatchProof.toObject(message.batch, options);\n        if (options.oneofs) object.proof = \"batch\";\n      }\n\n      if (message.compressed != null && message.hasOwnProperty(\"compressed\")) {\n        object.compressed = $root.ics23.CompressedBatchProof.toObject(message.compressed, options);\n        if (options.oneofs) object.proof = \"compressed\";\n      }\n\n      return object;\n    };\n    /**\n     * Converts this CommitmentProof to JSON.\n     * @function toJSON\n     * @memberof ics23.CommitmentProof\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n\n\n    CommitmentProof.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return CommitmentProof;\n  }();\n\n  ics23.LeafOp = function () {\n    /**\n     * Properties of a LeafOp.\n     * @memberof ics23\n     * @interface ILeafOp\n     * @property {ics23.HashOp|null} [hash] LeafOp hash\n     * @property {ics23.HashOp|null} [prehashKey] LeafOp prehashKey\n     * @property {ics23.HashOp|null} [prehashValue] LeafOp prehashValue\n     * @property {ics23.LengthOp|null} [length] LeafOp length\n     * @property {Uint8Array|null} [prefix] LeafOp prefix\n     */\n\n    /**\n     * Constructs a new LeafOp.\n     * @memberof ics23\n     * @classdesc LeafOp represents the raw key-value data we wish to prove, and\n     * must be flexible to represent the internal transformation from\n     * the original key-value pairs into the basis hash, for many existing\n     * merkle trees.\n     * \n     * key and value are passed in. So that the signature of this operation is:\n     * leafOp(key, value) -> output\n     * \n     * To process this, first prehash the keys and values if needed (ANY means no hash in this case):\n     * hkey = prehashKey(key)\n     * hvalue = prehashValue(value)\n     * \n     * Then combine the bytes, and hash it\n     * output = hash(prefix || length(hkey) || hkey || length(hvalue) || hvalue)\n     * @implements ILeafOp\n     * @constructor\n     * @param {ics23.ILeafOp=} [properties] Properties to set\n     */\n    function LeafOp(properties) {\n      if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n    /**\n     * LeafOp hash.\n     * @member {ics23.HashOp} hash\n     * @memberof ics23.LeafOp\n     * @instance\n     */\n\n\n    LeafOp.prototype.hash = 0;\n    /**\n     * LeafOp prehashKey.\n     * @member {ics23.HashOp} prehashKey\n     * @memberof ics23.LeafOp\n     * @instance\n     */\n\n    LeafOp.prototype.prehashKey = 0;\n    /**\n     * LeafOp prehashValue.\n     * @member {ics23.HashOp} prehashValue\n     * @memberof ics23.LeafOp\n     * @instance\n     */\n\n    LeafOp.prototype.prehashValue = 0;\n    /**\n     * LeafOp length.\n     * @member {ics23.LengthOp} length\n     * @memberof ics23.LeafOp\n     * @instance\n     */\n\n    LeafOp.prototype.length = 0;\n    /**\n     * LeafOp prefix.\n     * @member {Uint8Array} prefix\n     * @memberof ics23.LeafOp\n     * @instance\n     */\n\n    LeafOp.prototype.prefix = $util.newBuffer([]);\n    /**\n     * Creates a new LeafOp instance using the specified properties.\n     * @function create\n     * @memberof ics23.LeafOp\n     * @static\n     * @param {ics23.ILeafOp=} [properties] Properties to set\n     * @returns {ics23.LeafOp} LeafOp instance\n     */\n\n    LeafOp.create = function create(properties) {\n      return new LeafOp(properties);\n    };\n    /**\n     * Encodes the specified LeafOp message. Does not implicitly {@link ics23.LeafOp.verify|verify} messages.\n     * @function encode\n     * @memberof ics23.LeafOp\n     * @static\n     * @param {ics23.ILeafOp} message LeafOp message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n\n\n    LeafOp.encode = function encode(message, writer) {\n      if (!writer) writer = $Writer.create();\n      if (message.hash != null && message.hasOwnProperty(\"hash\")) writer.uint32(\n      /* id 1, wireType 0 =*/\n      8).int32(message.hash);\n      if (message.prehashKey != null && message.hasOwnProperty(\"prehashKey\")) writer.uint32(\n      /* id 2, wireType 0 =*/\n      16).int32(message.prehashKey);\n      if (message.prehashValue != null && message.hasOwnProperty(\"prehashValue\")) writer.uint32(\n      /* id 3, wireType 0 =*/\n      24).int32(message.prehashValue);\n      if (message.length != null && message.hasOwnProperty(\"length\")) writer.uint32(\n      /* id 4, wireType 0 =*/\n      32).int32(message.length);\n      if (message.prefix != null && message.hasOwnProperty(\"prefix\")) writer.uint32(\n      /* id 5, wireType 2 =*/\n      42).bytes(message.prefix);\n      return writer;\n    };\n    /**\n     * Encodes the specified LeafOp message, length delimited. Does not implicitly {@link ics23.LeafOp.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ics23.LeafOp\n     * @static\n     * @param {ics23.ILeafOp} message LeafOp message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n\n\n    LeafOp.encodeDelimited = function encodeDelimited(message, writer) {\n      return this.encode(message, writer).ldelim();\n    };\n    /**\n     * Decodes a LeafOp message from the specified reader or buffer.\n     * @function decode\n     * @memberof ics23.LeafOp\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ics23.LeafOp} LeafOp\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n\n\n    LeafOp.decode = function decode(reader, length) {\n      if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n      var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.ics23.LeafOp();\n\n      while (reader.pos < end) {\n        var tag = reader.uint32();\n\n        switch (tag >>> 3) {\n          case 1:\n            message.hash = reader.int32();\n            break;\n\n          case 2:\n            message.prehashKey = reader.int32();\n            break;\n\n          case 3:\n            message.prehashValue = reader.int32();\n            break;\n\n          case 4:\n            message.length = reader.int32();\n            break;\n\n          case 5:\n            message.prefix = reader.bytes();\n            break;\n\n          default:\n            reader.skipType(tag & 7);\n            break;\n        }\n      }\n\n      return message;\n    };\n    /**\n     * Decodes a LeafOp message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ics23.LeafOp\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ics23.LeafOp} LeafOp\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n\n\n    LeafOp.decodeDelimited = function decodeDelimited(reader) {\n      if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n      return this.decode(reader, reader.uint32());\n    };\n    /**\n     * Verifies a LeafOp message.\n     * @function verify\n     * @memberof ics23.LeafOp\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n\n\n    LeafOp.verify = function verify(message) {\n      if (typeof message !== \"object\" || message === null) return \"object expected\";\n      if (message.hash != null && message.hasOwnProperty(\"hash\")) switch (message.hash) {\n        default:\n          return \"hash: enum value expected\";\n\n        case 0:\n        case 1:\n        case 2:\n        case 3:\n        case 4:\n        case 5:\n          break;\n      }\n      if (message.prehashKey != null && message.hasOwnProperty(\"prehashKey\")) switch (message.prehashKey) {\n        default:\n          return \"prehashKey: enum value expected\";\n\n        case 0:\n        case 1:\n        case 2:\n        case 3:\n        case 4:\n        case 5:\n          break;\n      }\n      if (message.prehashValue != null && message.hasOwnProperty(\"prehashValue\")) switch (message.prehashValue) {\n        default:\n          return \"prehashValue: enum value expected\";\n\n        case 0:\n        case 1:\n        case 2:\n        case 3:\n        case 4:\n        case 5:\n          break;\n      }\n      if (message.length != null && message.hasOwnProperty(\"length\")) switch (message.length) {\n        default:\n          return \"length: enum value expected\";\n\n        case 0:\n        case 1:\n        case 2:\n        case 3:\n        case 4:\n        case 5:\n        case 6:\n        case 7:\n        case 8:\n          break;\n      }\n      if (message.prefix != null && message.hasOwnProperty(\"prefix\")) if (!(message.prefix && typeof message.prefix.length === \"number\" || $util.isString(message.prefix))) return \"prefix: buffer expected\";\n      return null;\n    };\n    /**\n     * Creates a LeafOp message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof ics23.LeafOp\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {ics23.LeafOp} LeafOp\n     */\n\n\n    LeafOp.fromObject = function fromObject(object) {\n      if (object instanceof $root.ics23.LeafOp) return object;\n      var message = new $root.ics23.LeafOp();\n\n      switch (object.hash) {\n        case \"NO_HASH\":\n        case 0:\n          message.hash = 0;\n          break;\n\n        case \"SHA256\":\n        case 1:\n          message.hash = 1;\n          break;\n\n        case \"SHA512\":\n        case 2:\n          message.hash = 2;\n          break;\n\n        case \"KECCAK\":\n        case 3:\n          message.hash = 3;\n          break;\n\n        case \"RIPEMD160\":\n        case 4:\n          message.hash = 4;\n          break;\n\n        case \"BITCOIN\":\n        case 5:\n          message.hash = 5;\n          break;\n      }\n\n      switch (object.prehashKey) {\n        case \"NO_HASH\":\n        case 0:\n          message.prehashKey = 0;\n          break;\n\n        case \"SHA256\":\n        case 1:\n          message.prehashKey = 1;\n          break;\n\n        case \"SHA512\":\n        case 2:\n          message.prehashKey = 2;\n          break;\n\n        case \"KECCAK\":\n        case 3:\n          message.prehashKey = 3;\n          break;\n\n        case \"RIPEMD160\":\n        case 4:\n          message.prehashKey = 4;\n          break;\n\n        case \"BITCOIN\":\n        case 5:\n          message.prehashKey = 5;\n          break;\n      }\n\n      switch (object.prehashValue) {\n        case \"NO_HASH\":\n        case 0:\n          message.prehashValue = 0;\n          break;\n\n        case \"SHA256\":\n        case 1:\n          message.prehashValue = 1;\n          break;\n\n        case \"SHA512\":\n        case 2:\n          message.prehashValue = 2;\n          break;\n\n        case \"KECCAK\":\n        case 3:\n          message.prehashValue = 3;\n          break;\n\n        case \"RIPEMD160\":\n        case 4:\n          message.prehashValue = 4;\n          break;\n\n        case \"BITCOIN\":\n        case 5:\n          message.prehashValue = 5;\n          break;\n      }\n\n      switch (object.length) {\n        case \"NO_PREFIX\":\n        case 0:\n          message.length = 0;\n          break;\n\n        case \"VAR_PROTO\":\n        case 1:\n          message.length = 1;\n          break;\n\n        case \"VAR_RLP\":\n        case 2:\n          message.length = 2;\n          break;\n\n        case \"FIXED32_BIG\":\n        case 3:\n          message.length = 3;\n          break;\n\n        case \"FIXED32_LITTLE\":\n        case 4:\n          message.length = 4;\n          break;\n\n        case \"FIXED64_BIG\":\n        case 5:\n          message.length = 5;\n          break;\n\n        case \"FIXED64_LITTLE\":\n        case 6:\n          message.length = 6;\n          break;\n\n        case \"REQUIRE_32_BYTES\":\n        case 7:\n          message.length = 7;\n          break;\n\n        case \"REQUIRE_64_BYTES\":\n        case 8:\n          message.length = 8;\n          break;\n      }\n\n      if (object.prefix != null) if (typeof object.prefix === \"string\") $util.base64.decode(object.prefix, message.prefix = $util.newBuffer($util.base64.length(object.prefix)), 0);else if (object.prefix.length) message.prefix = object.prefix;\n      return message;\n    };\n    /**\n     * Creates a plain object from a LeafOp message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ics23.LeafOp\n     * @static\n     * @param {ics23.LeafOp} message LeafOp\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n\n\n    LeafOp.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      var object = {};\n\n      if (options.defaults) {\n        object.hash = options.enums === String ? \"NO_HASH\" : 0;\n        object.prehashKey = options.enums === String ? \"NO_HASH\" : 0;\n        object.prehashValue = options.enums === String ? \"NO_HASH\" : 0;\n        object.length = options.enums === String ? \"NO_PREFIX\" : 0;\n        if (options.bytes === String) object.prefix = \"\";else {\n          object.prefix = [];\n          if (options.bytes !== Array) object.prefix = $util.newBuffer(object.prefix);\n        }\n      }\n\n      if (message.hash != null && message.hasOwnProperty(\"hash\")) object.hash = options.enums === String ? $root.ics23.HashOp[message.hash] : message.hash;\n      if (message.prehashKey != null && message.hasOwnProperty(\"prehashKey\")) object.prehashKey = options.enums === String ? $root.ics23.HashOp[message.prehashKey] : message.prehashKey;\n      if (message.prehashValue != null && message.hasOwnProperty(\"prehashValue\")) object.prehashValue = options.enums === String ? $root.ics23.HashOp[message.prehashValue] : message.prehashValue;\n      if (message.length != null && message.hasOwnProperty(\"length\")) object.length = options.enums === String ? $root.ics23.LengthOp[message.length] : message.length;\n      if (message.prefix != null && message.hasOwnProperty(\"prefix\")) object.prefix = options.bytes === String ? $util.base64.encode(message.prefix, 0, message.prefix.length) : options.bytes === Array ? Array.prototype.slice.call(message.prefix) : message.prefix;\n      return object;\n    };\n    /**\n     * Converts this LeafOp to JSON.\n     * @function toJSON\n     * @memberof ics23.LeafOp\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n\n\n    LeafOp.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return LeafOp;\n  }();\n\n  ics23.InnerOp = function () {\n    /**\n     * Properties of an InnerOp.\n     * @memberof ics23\n     * @interface IInnerOp\n     * @property {ics23.HashOp|null} [hash] InnerOp hash\n     * @property {Uint8Array|null} [prefix] InnerOp prefix\n     * @property {Uint8Array|null} [suffix] InnerOp suffix\n     */\n\n    /**\n     * Constructs a new InnerOp.\n     * @memberof ics23\n     * @classdesc InnerOp represents a merkle-proof step that is not a leaf.\n     * It represents concatenating two children and hashing them to provide the next result.\n     * \n     * The result of the previous step is passed in, so the signature of this op is:\n     * innerOp(child) -> output\n     * \n     * The result of applying InnerOp should be:\n     * output = op.hash(op.prefix || child || op.suffix)\n     * \n     * where the || operator is concatenation of binary data,\n     * and child is the result of hashing all the tree below this step.\n     * \n     * Any special data, like prepending child with the length, or prepending the entire operation with\n     * some value to differentiate from leaf nodes, should be included in prefix and suffix.\n     * If either of prefix or suffix is empty, we just treat it as an empty string\n     * @implements IInnerOp\n     * @constructor\n     * @param {ics23.IInnerOp=} [properties] Properties to set\n     */\n    function InnerOp(properties) {\n      if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n    /**\n     * InnerOp hash.\n     * @member {ics23.HashOp} hash\n     * @memberof ics23.InnerOp\n     * @instance\n     */\n\n\n    InnerOp.prototype.hash = 0;\n    /**\n     * InnerOp prefix.\n     * @member {Uint8Array} prefix\n     * @memberof ics23.InnerOp\n     * @instance\n     */\n\n    InnerOp.prototype.prefix = $util.newBuffer([]);\n    /**\n     * InnerOp suffix.\n     * @member {Uint8Array} suffix\n     * @memberof ics23.InnerOp\n     * @instance\n     */\n\n    InnerOp.prototype.suffix = $util.newBuffer([]);\n    /**\n     * Creates a new InnerOp instance using the specified properties.\n     * @function create\n     * @memberof ics23.InnerOp\n     * @static\n     * @param {ics23.IInnerOp=} [properties] Properties to set\n     * @returns {ics23.InnerOp} InnerOp instance\n     */\n\n    InnerOp.create = function create(properties) {\n      return new InnerOp(properties);\n    };\n    /**\n     * Encodes the specified InnerOp message. Does not implicitly {@link ics23.InnerOp.verify|verify} messages.\n     * @function encode\n     * @memberof ics23.InnerOp\n     * @static\n     * @param {ics23.IInnerOp} message InnerOp message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n\n\n    InnerOp.encode = function encode(message, writer) {\n      if (!writer) writer = $Writer.create();\n      if (message.hash != null && message.hasOwnProperty(\"hash\")) writer.uint32(\n      /* id 1, wireType 0 =*/\n      8).int32(message.hash);\n      if (message.prefix != null && message.hasOwnProperty(\"prefix\")) writer.uint32(\n      /* id 2, wireType 2 =*/\n      18).bytes(message.prefix);\n      if (message.suffix != null && message.hasOwnProperty(\"suffix\")) writer.uint32(\n      /* id 3, wireType 2 =*/\n      26).bytes(message.suffix);\n      return writer;\n    };\n    /**\n     * Encodes the specified InnerOp message, length delimited. Does not implicitly {@link ics23.InnerOp.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ics23.InnerOp\n     * @static\n     * @param {ics23.IInnerOp} message InnerOp message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n\n\n    InnerOp.encodeDelimited = function encodeDelimited(message, writer) {\n      return this.encode(message, writer).ldelim();\n    };\n    /**\n     * Decodes an InnerOp message from the specified reader or buffer.\n     * @function decode\n     * @memberof ics23.InnerOp\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ics23.InnerOp} InnerOp\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n\n\n    InnerOp.decode = function decode(reader, length) {\n      if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n      var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.ics23.InnerOp();\n\n      while (reader.pos < end) {\n        var tag = reader.uint32();\n\n        switch (tag >>> 3) {\n          case 1:\n            message.hash = reader.int32();\n            break;\n\n          case 2:\n            message.prefix = reader.bytes();\n            break;\n\n          case 3:\n            message.suffix = reader.bytes();\n            break;\n\n          default:\n            reader.skipType(tag & 7);\n            break;\n        }\n      }\n\n      return message;\n    };\n    /**\n     * Decodes an InnerOp message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ics23.InnerOp\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ics23.InnerOp} InnerOp\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n\n\n    InnerOp.decodeDelimited = function decodeDelimited(reader) {\n      if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n      return this.decode(reader, reader.uint32());\n    };\n    /**\n     * Verifies an InnerOp message.\n     * @function verify\n     * @memberof ics23.InnerOp\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n\n\n    InnerOp.verify = function verify(message) {\n      if (typeof message !== \"object\" || message === null) return \"object expected\";\n      if (message.hash != null && message.hasOwnProperty(\"hash\")) switch (message.hash) {\n        default:\n          return \"hash: enum value expected\";\n\n        case 0:\n        case 1:\n        case 2:\n        case 3:\n        case 4:\n        case 5:\n          break;\n      }\n      if (message.prefix != null && message.hasOwnProperty(\"prefix\")) if (!(message.prefix && typeof message.prefix.length === \"number\" || $util.isString(message.prefix))) return \"prefix: buffer expected\";\n      if (message.suffix != null && message.hasOwnProperty(\"suffix\")) if (!(message.suffix && typeof message.suffix.length === \"number\" || $util.isString(message.suffix))) return \"suffix: buffer expected\";\n      return null;\n    };\n    /**\n     * Creates an InnerOp message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof ics23.InnerOp\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {ics23.InnerOp} InnerOp\n     */\n\n\n    InnerOp.fromObject = function fromObject(object) {\n      if (object instanceof $root.ics23.InnerOp) return object;\n      var message = new $root.ics23.InnerOp();\n\n      switch (object.hash) {\n        case \"NO_HASH\":\n        case 0:\n          message.hash = 0;\n          break;\n\n        case \"SHA256\":\n        case 1:\n          message.hash = 1;\n          break;\n\n        case \"SHA512\":\n        case 2:\n          message.hash = 2;\n          break;\n\n        case \"KECCAK\":\n        case 3:\n          message.hash = 3;\n          break;\n\n        case \"RIPEMD160\":\n        case 4:\n          message.hash = 4;\n          break;\n\n        case \"BITCOIN\":\n        case 5:\n          message.hash = 5;\n          break;\n      }\n\n      if (object.prefix != null) if (typeof object.prefix === \"string\") $util.base64.decode(object.prefix, message.prefix = $util.newBuffer($util.base64.length(object.prefix)), 0);else if (object.prefix.length) message.prefix = object.prefix;\n      if (object.suffix != null) if (typeof object.suffix === \"string\") $util.base64.decode(object.suffix, message.suffix = $util.newBuffer($util.base64.length(object.suffix)), 0);else if (object.suffix.length) message.suffix = object.suffix;\n      return message;\n    };\n    /**\n     * Creates a plain object from an InnerOp message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ics23.InnerOp\n     * @static\n     * @param {ics23.InnerOp} message InnerOp\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n\n\n    InnerOp.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      var object = {};\n\n      if (options.defaults) {\n        object.hash = options.enums === String ? \"NO_HASH\" : 0;\n        if (options.bytes === String) object.prefix = \"\";else {\n          object.prefix = [];\n          if (options.bytes !== Array) object.prefix = $util.newBuffer(object.prefix);\n        }\n        if (options.bytes === String) object.suffix = \"\";else {\n          object.suffix = [];\n          if (options.bytes !== Array) object.suffix = $util.newBuffer(object.suffix);\n        }\n      }\n\n      if (message.hash != null && message.hasOwnProperty(\"hash\")) object.hash = options.enums === String ? $root.ics23.HashOp[message.hash] : message.hash;\n      if (message.prefix != null && message.hasOwnProperty(\"prefix\")) object.prefix = options.bytes === String ? $util.base64.encode(message.prefix, 0, message.prefix.length) : options.bytes === Array ? Array.prototype.slice.call(message.prefix) : message.prefix;\n      if (message.suffix != null && message.hasOwnProperty(\"suffix\")) object.suffix = options.bytes === String ? $util.base64.encode(message.suffix, 0, message.suffix.length) : options.bytes === Array ? Array.prototype.slice.call(message.suffix) : message.suffix;\n      return object;\n    };\n    /**\n     * Converts this InnerOp to JSON.\n     * @function toJSON\n     * @memberof ics23.InnerOp\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n\n\n    InnerOp.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return InnerOp;\n  }();\n\n  ics23.ProofSpec = function () {\n    /**\n     * Properties of a ProofSpec.\n     * @memberof ics23\n     * @interface IProofSpec\n     * @property {ics23.ILeafOp|null} [leafSpec] ProofSpec leafSpec\n     * @property {ics23.IInnerSpec|null} [innerSpec] ProofSpec innerSpec\n     * @property {number|null} [maxDepth] ProofSpec maxDepth\n     * @property {number|null} [minDepth] ProofSpec minDepth\n     */\n\n    /**\n     * Constructs a new ProofSpec.\n     * @memberof ics23\n     * @classdesc ProofSpec defines what the expected parameters are for a given proof type.\n     * This can be stored in the client and used to validate any incoming proofs.\n     * \n     * verify(ProofSpec, Proof) -> Proof | Error\n     * \n     * As demonstrated in tests, if we don't fix the algorithm used to calculate the\n     * LeafHash for a given tree, there are many possible key-value pairs that can\n     * generate a given hash (by interpretting the preimage differently).\n     * We need this for proper security, requires client knows a priori what\n     * tree format server uses. But not in code, rather a configuration object.\n     * @implements IProofSpec\n     * @constructor\n     * @param {ics23.IProofSpec=} [properties] Properties to set\n     */\n    function ProofSpec(properties) {\n      if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n    /**\n     * ProofSpec leafSpec.\n     * @member {ics23.ILeafOp|null|undefined} leafSpec\n     * @memberof ics23.ProofSpec\n     * @instance\n     */\n\n\n    ProofSpec.prototype.leafSpec = null;\n    /**\n     * ProofSpec innerSpec.\n     * @member {ics23.IInnerSpec|null|undefined} innerSpec\n     * @memberof ics23.ProofSpec\n     * @instance\n     */\n\n    ProofSpec.prototype.innerSpec = null;\n    /**\n     * ProofSpec maxDepth.\n     * @member {number} maxDepth\n     * @memberof ics23.ProofSpec\n     * @instance\n     */\n\n    ProofSpec.prototype.maxDepth = 0;\n    /**\n     * ProofSpec minDepth.\n     * @member {number} minDepth\n     * @memberof ics23.ProofSpec\n     * @instance\n     */\n\n    ProofSpec.prototype.minDepth = 0;\n    /**\n     * Creates a new ProofSpec instance using the specified properties.\n     * @function create\n     * @memberof ics23.ProofSpec\n     * @static\n     * @param {ics23.IProofSpec=} [properties] Properties to set\n     * @returns {ics23.ProofSpec} ProofSpec instance\n     */\n\n    ProofSpec.create = function create(properties) {\n      return new ProofSpec(properties);\n    };\n    /**\n     * Encodes the specified ProofSpec message. Does not implicitly {@link ics23.ProofSpec.verify|verify} messages.\n     * @function encode\n     * @memberof ics23.ProofSpec\n     * @static\n     * @param {ics23.IProofSpec} message ProofSpec message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n\n\n    ProofSpec.encode = function encode(message, writer) {\n      if (!writer) writer = $Writer.create();\n      if (message.leafSpec != null && message.hasOwnProperty(\"leafSpec\")) $root.ics23.LeafOp.encode(message.leafSpec, writer.uint32(\n      /* id 1, wireType 2 =*/\n      10).fork()).ldelim();\n      if (message.innerSpec != null && message.hasOwnProperty(\"innerSpec\")) $root.ics23.InnerSpec.encode(message.innerSpec, writer.uint32(\n      /* id 2, wireType 2 =*/\n      18).fork()).ldelim();\n      if (message.maxDepth != null && message.hasOwnProperty(\"maxDepth\")) writer.uint32(\n      /* id 3, wireType 0 =*/\n      24).int32(message.maxDepth);\n      if (message.minDepth != null && message.hasOwnProperty(\"minDepth\")) writer.uint32(\n      /* id 4, wireType 0 =*/\n      32).int32(message.minDepth);\n      return writer;\n    };\n    /**\n     * Encodes the specified ProofSpec message, length delimited. Does not implicitly {@link ics23.ProofSpec.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ics23.ProofSpec\n     * @static\n     * @param {ics23.IProofSpec} message ProofSpec message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n\n\n    ProofSpec.encodeDelimited = function encodeDelimited(message, writer) {\n      return this.encode(message, writer).ldelim();\n    };\n    /**\n     * Decodes a ProofSpec message from the specified reader or buffer.\n     * @function decode\n     * @memberof ics23.ProofSpec\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ics23.ProofSpec} ProofSpec\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n\n\n    ProofSpec.decode = function decode(reader, length) {\n      if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n      var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.ics23.ProofSpec();\n\n      while (reader.pos < end) {\n        var tag = reader.uint32();\n\n        switch (tag >>> 3) {\n          case 1:\n            message.leafSpec = $root.ics23.LeafOp.decode(reader, reader.uint32());\n            break;\n\n          case 2:\n            message.innerSpec = $root.ics23.InnerSpec.decode(reader, reader.uint32());\n            break;\n\n          case 3:\n            message.maxDepth = reader.int32();\n            break;\n\n          case 4:\n            message.minDepth = reader.int32();\n            break;\n\n          default:\n            reader.skipType(tag & 7);\n            break;\n        }\n      }\n\n      return message;\n    };\n    /**\n     * Decodes a ProofSpec message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ics23.ProofSpec\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ics23.ProofSpec} ProofSpec\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n\n\n    ProofSpec.decodeDelimited = function decodeDelimited(reader) {\n      if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n      return this.decode(reader, reader.uint32());\n    };\n    /**\n     * Verifies a ProofSpec message.\n     * @function verify\n     * @memberof ics23.ProofSpec\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n\n\n    ProofSpec.verify = function verify(message) {\n      if (typeof message !== \"object\" || message === null) return \"object expected\";\n\n      if (message.leafSpec != null && message.hasOwnProperty(\"leafSpec\")) {\n        var error = $root.ics23.LeafOp.verify(message.leafSpec);\n        if (error) return \"leafSpec.\" + error;\n      }\n\n      if (message.innerSpec != null && message.hasOwnProperty(\"innerSpec\")) {\n        var error = $root.ics23.InnerSpec.verify(message.innerSpec);\n        if (error) return \"innerSpec.\" + error;\n      }\n\n      if (message.maxDepth != null && message.hasOwnProperty(\"maxDepth\")) if (!$util.isInteger(message.maxDepth)) return \"maxDepth: integer expected\";\n      if (message.minDepth != null && message.hasOwnProperty(\"minDepth\")) if (!$util.isInteger(message.minDepth)) return \"minDepth: integer expected\";\n      return null;\n    };\n    /**\n     * Creates a ProofSpec message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof ics23.ProofSpec\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {ics23.ProofSpec} ProofSpec\n     */\n\n\n    ProofSpec.fromObject = function fromObject(object) {\n      if (object instanceof $root.ics23.ProofSpec) return object;\n      var message = new $root.ics23.ProofSpec();\n\n      if (object.leafSpec != null) {\n        if (typeof object.leafSpec !== \"object\") throw TypeError(\".ics23.ProofSpec.leafSpec: object expected\");\n        message.leafSpec = $root.ics23.LeafOp.fromObject(object.leafSpec);\n      }\n\n      if (object.innerSpec != null) {\n        if (typeof object.innerSpec !== \"object\") throw TypeError(\".ics23.ProofSpec.innerSpec: object expected\");\n        message.innerSpec = $root.ics23.InnerSpec.fromObject(object.innerSpec);\n      }\n\n      if (object.maxDepth != null) message.maxDepth = object.maxDepth | 0;\n      if (object.minDepth != null) message.minDepth = object.minDepth | 0;\n      return message;\n    };\n    /**\n     * Creates a plain object from a ProofSpec message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ics23.ProofSpec\n     * @static\n     * @param {ics23.ProofSpec} message ProofSpec\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n\n\n    ProofSpec.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      var object = {};\n\n      if (options.defaults) {\n        object.leafSpec = null;\n        object.innerSpec = null;\n        object.maxDepth = 0;\n        object.minDepth = 0;\n      }\n\n      if (message.leafSpec != null && message.hasOwnProperty(\"leafSpec\")) object.leafSpec = $root.ics23.LeafOp.toObject(message.leafSpec, options);\n      if (message.innerSpec != null && message.hasOwnProperty(\"innerSpec\")) object.innerSpec = $root.ics23.InnerSpec.toObject(message.innerSpec, options);\n      if (message.maxDepth != null && message.hasOwnProperty(\"maxDepth\")) object.maxDepth = message.maxDepth;\n      if (message.minDepth != null && message.hasOwnProperty(\"minDepth\")) object.minDepth = message.minDepth;\n      return object;\n    };\n    /**\n     * Converts this ProofSpec to JSON.\n     * @function toJSON\n     * @memberof ics23.ProofSpec\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n\n\n    ProofSpec.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return ProofSpec;\n  }();\n\n  ics23.InnerSpec = function () {\n    /**\n     * Properties of an InnerSpec.\n     * @memberof ics23\n     * @interface IInnerSpec\n     * @property {Array.<number>|null} [childOrder] InnerSpec childOrder\n     * @property {number|null} [childSize] InnerSpec childSize\n     * @property {number|null} [minPrefixLength] InnerSpec minPrefixLength\n     * @property {number|null} [maxPrefixLength] InnerSpec maxPrefixLength\n     * @property {Uint8Array|null} [emptyChild] InnerSpec emptyChild\n     * @property {ics23.HashOp|null} [hash] InnerSpec hash\n     */\n\n    /**\n     * Constructs a new InnerSpec.\n     * @memberof ics23\n     * @classdesc Represents an InnerSpec.\n     * @implements IInnerSpec\n     * @constructor\n     * @param {ics23.IInnerSpec=} [properties] Properties to set\n     */\n    function InnerSpec(properties) {\n      this.childOrder = [];\n      if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n    /**\n     * InnerSpec childOrder.\n     * @member {Array.<number>} childOrder\n     * @memberof ics23.InnerSpec\n     * @instance\n     */\n\n\n    InnerSpec.prototype.childOrder = $util.emptyArray;\n    /**\n     * InnerSpec childSize.\n     * @member {number} childSize\n     * @memberof ics23.InnerSpec\n     * @instance\n     */\n\n    InnerSpec.prototype.childSize = 0;\n    /**\n     * InnerSpec minPrefixLength.\n     * @member {number} minPrefixLength\n     * @memberof ics23.InnerSpec\n     * @instance\n     */\n\n    InnerSpec.prototype.minPrefixLength = 0;\n    /**\n     * InnerSpec maxPrefixLength.\n     * @member {number} maxPrefixLength\n     * @memberof ics23.InnerSpec\n     * @instance\n     */\n\n    InnerSpec.prototype.maxPrefixLength = 0;\n    /**\n     * InnerSpec emptyChild.\n     * @member {Uint8Array} emptyChild\n     * @memberof ics23.InnerSpec\n     * @instance\n     */\n\n    InnerSpec.prototype.emptyChild = $util.newBuffer([]);\n    /**\n     * InnerSpec hash.\n     * @member {ics23.HashOp} hash\n     * @memberof ics23.InnerSpec\n     * @instance\n     */\n\n    InnerSpec.prototype.hash = 0;\n    /**\n     * Creates a new InnerSpec instance using the specified properties.\n     * @function create\n     * @memberof ics23.InnerSpec\n     * @static\n     * @param {ics23.IInnerSpec=} [properties] Properties to set\n     * @returns {ics23.InnerSpec} InnerSpec instance\n     */\n\n    InnerSpec.create = function create(properties) {\n      return new InnerSpec(properties);\n    };\n    /**\n     * Encodes the specified InnerSpec message. Does not implicitly {@link ics23.InnerSpec.verify|verify} messages.\n     * @function encode\n     * @memberof ics23.InnerSpec\n     * @static\n     * @param {ics23.IInnerSpec} message InnerSpec message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n\n\n    InnerSpec.encode = function encode(message, writer) {\n      if (!writer) writer = $Writer.create();\n\n      if (message.childOrder != null && message.childOrder.length) {\n        writer.uint32(\n        /* id 1, wireType 2 =*/\n        10).fork();\n\n        for (var i = 0; i < message.childOrder.length; ++i) writer.int32(message.childOrder[i]);\n\n        writer.ldelim();\n      }\n\n      if (message.childSize != null && message.hasOwnProperty(\"childSize\")) writer.uint32(\n      /* id 2, wireType 0 =*/\n      16).int32(message.childSize);\n      if (message.minPrefixLength != null && message.hasOwnProperty(\"minPrefixLength\")) writer.uint32(\n      /* id 3, wireType 0 =*/\n      24).int32(message.minPrefixLength);\n      if (message.maxPrefixLength != null && message.hasOwnProperty(\"maxPrefixLength\")) writer.uint32(\n      /* id 4, wireType 0 =*/\n      32).int32(message.maxPrefixLength);\n      if (message.emptyChild != null && message.hasOwnProperty(\"emptyChild\")) writer.uint32(\n      /* id 5, wireType 2 =*/\n      42).bytes(message.emptyChild);\n      if (message.hash != null && message.hasOwnProperty(\"hash\")) writer.uint32(\n      /* id 6, wireType 0 =*/\n      48).int32(message.hash);\n      return writer;\n    };\n    /**\n     * Encodes the specified InnerSpec message, length delimited. Does not implicitly {@link ics23.InnerSpec.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ics23.InnerSpec\n     * @static\n     * @param {ics23.IInnerSpec} message InnerSpec message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n\n\n    InnerSpec.encodeDelimited = function encodeDelimited(message, writer) {\n      return this.encode(message, writer).ldelim();\n    };\n    /**\n     * Decodes an InnerSpec message from the specified reader or buffer.\n     * @function decode\n     * @memberof ics23.InnerSpec\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ics23.InnerSpec} InnerSpec\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n\n\n    InnerSpec.decode = function decode(reader, length) {\n      if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n      var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.ics23.InnerSpec();\n\n      while (reader.pos < end) {\n        var tag = reader.uint32();\n\n        switch (tag >>> 3) {\n          case 1:\n            if (!(message.childOrder && message.childOrder.length)) message.childOrder = [];\n\n            if ((tag & 7) === 2) {\n              var end2 = reader.uint32() + reader.pos;\n\n              while (reader.pos < end2) message.childOrder.push(reader.int32());\n            } else message.childOrder.push(reader.int32());\n\n            break;\n\n          case 2:\n            message.childSize = reader.int32();\n            break;\n\n          case 3:\n            message.minPrefixLength = reader.int32();\n            break;\n\n          case 4:\n            message.maxPrefixLength = reader.int32();\n            break;\n\n          case 5:\n            message.emptyChild = reader.bytes();\n            break;\n\n          case 6:\n            message.hash = reader.int32();\n            break;\n\n          default:\n            reader.skipType(tag & 7);\n            break;\n        }\n      }\n\n      return message;\n    };\n    /**\n     * Decodes an InnerSpec message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ics23.InnerSpec\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ics23.InnerSpec} InnerSpec\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n\n\n    InnerSpec.decodeDelimited = function decodeDelimited(reader) {\n      if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n      return this.decode(reader, reader.uint32());\n    };\n    /**\n     * Verifies an InnerSpec message.\n     * @function verify\n     * @memberof ics23.InnerSpec\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n\n\n    InnerSpec.verify = function verify(message) {\n      if (typeof message !== \"object\" || message === null) return \"object expected\";\n\n      if (message.childOrder != null && message.hasOwnProperty(\"childOrder\")) {\n        if (!Array.isArray(message.childOrder)) return \"childOrder: array expected\";\n\n        for (var i = 0; i < message.childOrder.length; ++i) if (!$util.isInteger(message.childOrder[i])) return \"childOrder: integer[] expected\";\n      }\n\n      if (message.childSize != null && message.hasOwnProperty(\"childSize\")) if (!$util.isInteger(message.childSize)) return \"childSize: integer expected\";\n      if (message.minPrefixLength != null && message.hasOwnProperty(\"minPrefixLength\")) if (!$util.isInteger(message.minPrefixLength)) return \"minPrefixLength: integer expected\";\n      if (message.maxPrefixLength != null && message.hasOwnProperty(\"maxPrefixLength\")) if (!$util.isInteger(message.maxPrefixLength)) return \"maxPrefixLength: integer expected\";\n      if (message.emptyChild != null && message.hasOwnProperty(\"emptyChild\")) if (!(message.emptyChild && typeof message.emptyChild.length === \"number\" || $util.isString(message.emptyChild))) return \"emptyChild: buffer expected\";\n      if (message.hash != null && message.hasOwnProperty(\"hash\")) switch (message.hash) {\n        default:\n          return \"hash: enum value expected\";\n\n        case 0:\n        case 1:\n        case 2:\n        case 3:\n        case 4:\n        case 5:\n          break;\n      }\n      return null;\n    };\n    /**\n     * Creates an InnerSpec message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof ics23.InnerSpec\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {ics23.InnerSpec} InnerSpec\n     */\n\n\n    InnerSpec.fromObject = function fromObject(object) {\n      if (object instanceof $root.ics23.InnerSpec) return object;\n      var message = new $root.ics23.InnerSpec();\n\n      if (object.childOrder) {\n        if (!Array.isArray(object.childOrder)) throw TypeError(\".ics23.InnerSpec.childOrder: array expected\");\n        message.childOrder = [];\n\n        for (var i = 0; i < object.childOrder.length; ++i) message.childOrder[i] = object.childOrder[i] | 0;\n      }\n\n      if (object.childSize != null) message.childSize = object.childSize | 0;\n      if (object.minPrefixLength != null) message.minPrefixLength = object.minPrefixLength | 0;\n      if (object.maxPrefixLength != null) message.maxPrefixLength = object.maxPrefixLength | 0;\n      if (object.emptyChild != null) if (typeof object.emptyChild === \"string\") $util.base64.decode(object.emptyChild, message.emptyChild = $util.newBuffer($util.base64.length(object.emptyChild)), 0);else if (object.emptyChild.length) message.emptyChild = object.emptyChild;\n\n      switch (object.hash) {\n        case \"NO_HASH\":\n        case 0:\n          message.hash = 0;\n          break;\n\n        case \"SHA256\":\n        case 1:\n          message.hash = 1;\n          break;\n\n        case \"SHA512\":\n        case 2:\n          message.hash = 2;\n          break;\n\n        case \"KECCAK\":\n        case 3:\n          message.hash = 3;\n          break;\n\n        case \"RIPEMD160\":\n        case 4:\n          message.hash = 4;\n          break;\n\n        case \"BITCOIN\":\n        case 5:\n          message.hash = 5;\n          break;\n      }\n\n      return message;\n    };\n    /**\n     * Creates a plain object from an InnerSpec message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ics23.InnerSpec\n     * @static\n     * @param {ics23.InnerSpec} message InnerSpec\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n\n\n    InnerSpec.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      var object = {};\n      if (options.arrays || options.defaults) object.childOrder = [];\n\n      if (options.defaults) {\n        object.childSize = 0;\n        object.minPrefixLength = 0;\n        object.maxPrefixLength = 0;\n        if (options.bytes === String) object.emptyChild = \"\";else {\n          object.emptyChild = [];\n          if (options.bytes !== Array) object.emptyChild = $util.newBuffer(object.emptyChild);\n        }\n        object.hash = options.enums === String ? \"NO_HASH\" : 0;\n      }\n\n      if (message.childOrder && message.childOrder.length) {\n        object.childOrder = [];\n\n        for (var j = 0; j < message.childOrder.length; ++j) object.childOrder[j] = message.childOrder[j];\n      }\n\n      if (message.childSize != null && message.hasOwnProperty(\"childSize\")) object.childSize = message.childSize;\n      if (message.minPrefixLength != null && message.hasOwnProperty(\"minPrefixLength\")) object.minPrefixLength = message.minPrefixLength;\n      if (message.maxPrefixLength != null && message.hasOwnProperty(\"maxPrefixLength\")) object.maxPrefixLength = message.maxPrefixLength;\n      if (message.emptyChild != null && message.hasOwnProperty(\"emptyChild\")) object.emptyChild = options.bytes === String ? $util.base64.encode(message.emptyChild, 0, message.emptyChild.length) : options.bytes === Array ? Array.prototype.slice.call(message.emptyChild) : message.emptyChild;\n      if (message.hash != null && message.hasOwnProperty(\"hash\")) object.hash = options.enums === String ? $root.ics23.HashOp[message.hash] : message.hash;\n      return object;\n    };\n    /**\n     * Converts this InnerSpec to JSON.\n     * @function toJSON\n     * @memberof ics23.InnerSpec\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n\n\n    InnerSpec.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return InnerSpec;\n  }();\n\n  ics23.BatchProof = function () {\n    /**\n     * Properties of a BatchProof.\n     * @memberof ics23\n     * @interface IBatchProof\n     * @property {Array.<ics23.IBatchEntry>|null} [entries] BatchProof entries\n     */\n\n    /**\n     * Constructs a new BatchProof.\n     * @memberof ics23\n     * @classdesc Represents a BatchProof.\n     * @implements IBatchProof\n     * @constructor\n     * @param {ics23.IBatchProof=} [properties] Properties to set\n     */\n    function BatchProof(properties) {\n      this.entries = [];\n      if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n    /**\n     * BatchProof entries.\n     * @member {Array.<ics23.IBatchEntry>} entries\n     * @memberof ics23.BatchProof\n     * @instance\n     */\n\n\n    BatchProof.prototype.entries = $util.emptyArray;\n    /**\n     * Creates a new BatchProof instance using the specified properties.\n     * @function create\n     * @memberof ics23.BatchProof\n     * @static\n     * @param {ics23.IBatchProof=} [properties] Properties to set\n     * @returns {ics23.BatchProof} BatchProof instance\n     */\n\n    BatchProof.create = function create(properties) {\n      return new BatchProof(properties);\n    };\n    /**\n     * Encodes the specified BatchProof message. Does not implicitly {@link ics23.BatchProof.verify|verify} messages.\n     * @function encode\n     * @memberof ics23.BatchProof\n     * @static\n     * @param {ics23.IBatchProof} message BatchProof message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n\n\n    BatchProof.encode = function encode(message, writer) {\n      if (!writer) writer = $Writer.create();\n      if (message.entries != null && message.entries.length) for (var i = 0; i < message.entries.length; ++i) $root.ics23.BatchEntry.encode(message.entries[i], writer.uint32(\n      /* id 1, wireType 2 =*/\n      10).fork()).ldelim();\n      return writer;\n    };\n    /**\n     * Encodes the specified BatchProof message, length delimited. Does not implicitly {@link ics23.BatchProof.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ics23.BatchProof\n     * @static\n     * @param {ics23.IBatchProof} message BatchProof message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n\n\n    BatchProof.encodeDelimited = function encodeDelimited(message, writer) {\n      return this.encode(message, writer).ldelim();\n    };\n    /**\n     * Decodes a BatchProof message from the specified reader or buffer.\n     * @function decode\n     * @memberof ics23.BatchProof\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ics23.BatchProof} BatchProof\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n\n\n    BatchProof.decode = function decode(reader, length) {\n      if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n      var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.ics23.BatchProof();\n\n      while (reader.pos < end) {\n        var tag = reader.uint32();\n\n        switch (tag >>> 3) {\n          case 1:\n            if (!(message.entries && message.entries.length)) message.entries = [];\n            message.entries.push($root.ics23.BatchEntry.decode(reader, reader.uint32()));\n            break;\n\n          default:\n            reader.skipType(tag & 7);\n            break;\n        }\n      }\n\n      return message;\n    };\n    /**\n     * Decodes a BatchProof message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ics23.BatchProof\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ics23.BatchProof} BatchProof\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n\n\n    BatchProof.decodeDelimited = function decodeDelimited(reader) {\n      if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n      return this.decode(reader, reader.uint32());\n    };\n    /**\n     * Verifies a BatchProof message.\n     * @function verify\n     * @memberof ics23.BatchProof\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n\n\n    BatchProof.verify = function verify(message) {\n      if (typeof message !== \"object\" || message === null) return \"object expected\";\n\n      if (message.entries != null && message.hasOwnProperty(\"entries\")) {\n        if (!Array.isArray(message.entries)) return \"entries: array expected\";\n\n        for (var i = 0; i < message.entries.length; ++i) {\n          var error = $root.ics23.BatchEntry.verify(message.entries[i]);\n          if (error) return \"entries.\" + error;\n        }\n      }\n\n      return null;\n    };\n    /**\n     * Creates a BatchProof message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof ics23.BatchProof\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {ics23.BatchProof} BatchProof\n     */\n\n\n    BatchProof.fromObject = function fromObject(object) {\n      if (object instanceof $root.ics23.BatchProof) return object;\n      var message = new $root.ics23.BatchProof();\n\n      if (object.entries) {\n        if (!Array.isArray(object.entries)) throw TypeError(\".ics23.BatchProof.entries: array expected\");\n        message.entries = [];\n\n        for (var i = 0; i < object.entries.length; ++i) {\n          if (typeof object.entries[i] !== \"object\") throw TypeError(\".ics23.BatchProof.entries: object expected\");\n          message.entries[i] = $root.ics23.BatchEntry.fromObject(object.entries[i]);\n        }\n      }\n\n      return message;\n    };\n    /**\n     * Creates a plain object from a BatchProof message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ics23.BatchProof\n     * @static\n     * @param {ics23.BatchProof} message BatchProof\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n\n\n    BatchProof.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      var object = {};\n      if (options.arrays || options.defaults) object.entries = [];\n\n      if (message.entries && message.entries.length) {\n        object.entries = [];\n\n        for (var j = 0; j < message.entries.length; ++j) object.entries[j] = $root.ics23.BatchEntry.toObject(message.entries[j], options);\n      }\n\n      return object;\n    };\n    /**\n     * Converts this BatchProof to JSON.\n     * @function toJSON\n     * @memberof ics23.BatchProof\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n\n\n    BatchProof.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return BatchProof;\n  }();\n\n  ics23.BatchEntry = function () {\n    /**\n     * Properties of a BatchEntry.\n     * @memberof ics23\n     * @interface IBatchEntry\n     * @property {ics23.IExistenceProof|null} [exist] BatchEntry exist\n     * @property {ics23.INonExistenceProof|null} [nonexist] BatchEntry nonexist\n     */\n\n    /**\n     * Constructs a new BatchEntry.\n     * @memberof ics23\n     * @classdesc Represents a BatchEntry.\n     * @implements IBatchEntry\n     * @constructor\n     * @param {ics23.IBatchEntry=} [properties] Properties to set\n     */\n    function BatchEntry(properties) {\n      if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n    /**\n     * BatchEntry exist.\n     * @member {ics23.IExistenceProof|null|undefined} exist\n     * @memberof ics23.BatchEntry\n     * @instance\n     */\n\n\n    BatchEntry.prototype.exist = null;\n    /**\n     * BatchEntry nonexist.\n     * @member {ics23.INonExistenceProof|null|undefined} nonexist\n     * @memberof ics23.BatchEntry\n     * @instance\n     */\n\n    BatchEntry.prototype.nonexist = null; // OneOf field names bound to virtual getters and setters\n\n    var $oneOfFields;\n    /**\n     * BatchEntry proof.\n     * @member {\"exist\"|\"nonexist\"|undefined} proof\n     * @memberof ics23.BatchEntry\n     * @instance\n     */\n\n    Object.defineProperty(BatchEntry.prototype, \"proof\", {\n      get: $util.oneOfGetter($oneOfFields = [\"exist\", \"nonexist\"]),\n      set: $util.oneOfSetter($oneOfFields)\n    });\n    /**\n     * Creates a new BatchEntry instance using the specified properties.\n     * @function create\n     * @memberof ics23.BatchEntry\n     * @static\n     * @param {ics23.IBatchEntry=} [properties] Properties to set\n     * @returns {ics23.BatchEntry} BatchEntry instance\n     */\n\n    BatchEntry.create = function create(properties) {\n      return new BatchEntry(properties);\n    };\n    /**\n     * Encodes the specified BatchEntry message. Does not implicitly {@link ics23.BatchEntry.verify|verify} messages.\n     * @function encode\n     * @memberof ics23.BatchEntry\n     * @static\n     * @param {ics23.IBatchEntry} message BatchEntry message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n\n\n    BatchEntry.encode = function encode(message, writer) {\n      if (!writer) writer = $Writer.create();\n      if (message.exist != null && message.hasOwnProperty(\"exist\")) $root.ics23.ExistenceProof.encode(message.exist, writer.uint32(\n      /* id 1, wireType 2 =*/\n      10).fork()).ldelim();\n      if (message.nonexist != null && message.hasOwnProperty(\"nonexist\")) $root.ics23.NonExistenceProof.encode(message.nonexist, writer.uint32(\n      /* id 2, wireType 2 =*/\n      18).fork()).ldelim();\n      return writer;\n    };\n    /**\n     * Encodes the specified BatchEntry message, length delimited. Does not implicitly {@link ics23.BatchEntry.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ics23.BatchEntry\n     * @static\n     * @param {ics23.IBatchEntry} message BatchEntry message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n\n\n    BatchEntry.encodeDelimited = function encodeDelimited(message, writer) {\n      return this.encode(message, writer).ldelim();\n    };\n    /**\n     * Decodes a BatchEntry message from the specified reader or buffer.\n     * @function decode\n     * @memberof ics23.BatchEntry\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ics23.BatchEntry} BatchEntry\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n\n\n    BatchEntry.decode = function decode(reader, length) {\n      if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n      var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.ics23.BatchEntry();\n\n      while (reader.pos < end) {\n        var tag = reader.uint32();\n\n        switch (tag >>> 3) {\n          case 1:\n            message.exist = $root.ics23.ExistenceProof.decode(reader, reader.uint32());\n            break;\n\n          case 2:\n            message.nonexist = $root.ics23.NonExistenceProof.decode(reader, reader.uint32());\n            break;\n\n          default:\n            reader.skipType(tag & 7);\n            break;\n        }\n      }\n\n      return message;\n    };\n    /**\n     * Decodes a BatchEntry message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ics23.BatchEntry\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ics23.BatchEntry} BatchEntry\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n\n\n    BatchEntry.decodeDelimited = function decodeDelimited(reader) {\n      if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n      return this.decode(reader, reader.uint32());\n    };\n    /**\n     * Verifies a BatchEntry message.\n     * @function verify\n     * @memberof ics23.BatchEntry\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n\n\n    BatchEntry.verify = function verify(message) {\n      if (typeof message !== \"object\" || message === null) return \"object expected\";\n      var properties = {};\n\n      if (message.exist != null && message.hasOwnProperty(\"exist\")) {\n        properties.proof = 1;\n        {\n          var error = $root.ics23.ExistenceProof.verify(message.exist);\n          if (error) return \"exist.\" + error;\n        }\n      }\n\n      if (message.nonexist != null && message.hasOwnProperty(\"nonexist\")) {\n        if (properties.proof === 1) return \"proof: multiple values\";\n        properties.proof = 1;\n        {\n          var error = $root.ics23.NonExistenceProof.verify(message.nonexist);\n          if (error) return \"nonexist.\" + error;\n        }\n      }\n\n      return null;\n    };\n    /**\n     * Creates a BatchEntry message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof ics23.BatchEntry\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {ics23.BatchEntry} BatchEntry\n     */\n\n\n    BatchEntry.fromObject = function fromObject(object) {\n      if (object instanceof $root.ics23.BatchEntry) return object;\n      var message = new $root.ics23.BatchEntry();\n\n      if (object.exist != null) {\n        if (typeof object.exist !== \"object\") throw TypeError(\".ics23.BatchEntry.exist: object expected\");\n        message.exist = $root.ics23.ExistenceProof.fromObject(object.exist);\n      }\n\n      if (object.nonexist != null) {\n        if (typeof object.nonexist !== \"object\") throw TypeError(\".ics23.BatchEntry.nonexist: object expected\");\n        message.nonexist = $root.ics23.NonExistenceProof.fromObject(object.nonexist);\n      }\n\n      return message;\n    };\n    /**\n     * Creates a plain object from a BatchEntry message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ics23.BatchEntry\n     * @static\n     * @param {ics23.BatchEntry} message BatchEntry\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n\n\n    BatchEntry.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      var object = {};\n\n      if (message.exist != null && message.hasOwnProperty(\"exist\")) {\n        object.exist = $root.ics23.ExistenceProof.toObject(message.exist, options);\n        if (options.oneofs) object.proof = \"exist\";\n      }\n\n      if (message.nonexist != null && message.hasOwnProperty(\"nonexist\")) {\n        object.nonexist = $root.ics23.NonExistenceProof.toObject(message.nonexist, options);\n        if (options.oneofs) object.proof = \"nonexist\";\n      }\n\n      return object;\n    };\n    /**\n     * Converts this BatchEntry to JSON.\n     * @function toJSON\n     * @memberof ics23.BatchEntry\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n\n\n    BatchEntry.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return BatchEntry;\n  }();\n\n  ics23.CompressedBatchProof = function () {\n    /**\n     * Properties of a CompressedBatchProof.\n     * @memberof ics23\n     * @interface ICompressedBatchProof\n     * @property {Array.<ics23.ICompressedBatchEntry>|null} [entries] CompressedBatchProof entries\n     * @property {Array.<ics23.IInnerOp>|null} [lookupInners] CompressedBatchProof lookupInners\n     */\n\n    /**\n     * Constructs a new CompressedBatchProof.\n     * @memberof ics23\n     * @classdesc Represents a CompressedBatchProof.\n     * @implements ICompressedBatchProof\n     * @constructor\n     * @param {ics23.ICompressedBatchProof=} [properties] Properties to set\n     */\n    function CompressedBatchProof(properties) {\n      this.entries = [];\n      this.lookupInners = [];\n      if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n    /**\n     * CompressedBatchProof entries.\n     * @member {Array.<ics23.ICompressedBatchEntry>} entries\n     * @memberof ics23.CompressedBatchProof\n     * @instance\n     */\n\n\n    CompressedBatchProof.prototype.entries = $util.emptyArray;\n    /**\n     * CompressedBatchProof lookupInners.\n     * @member {Array.<ics23.IInnerOp>} lookupInners\n     * @memberof ics23.CompressedBatchProof\n     * @instance\n     */\n\n    CompressedBatchProof.prototype.lookupInners = $util.emptyArray;\n    /**\n     * Creates a new CompressedBatchProof instance using the specified properties.\n     * @function create\n     * @memberof ics23.CompressedBatchProof\n     * @static\n     * @param {ics23.ICompressedBatchProof=} [properties] Properties to set\n     * @returns {ics23.CompressedBatchProof} CompressedBatchProof instance\n     */\n\n    CompressedBatchProof.create = function create(properties) {\n      return new CompressedBatchProof(properties);\n    };\n    /**\n     * Encodes the specified CompressedBatchProof message. Does not implicitly {@link ics23.CompressedBatchProof.verify|verify} messages.\n     * @function encode\n     * @memberof ics23.CompressedBatchProof\n     * @static\n     * @param {ics23.ICompressedBatchProof} message CompressedBatchProof message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n\n\n    CompressedBatchProof.encode = function encode(message, writer) {\n      if (!writer) writer = $Writer.create();\n      if (message.entries != null && message.entries.length) for (var i = 0; i < message.entries.length; ++i) $root.ics23.CompressedBatchEntry.encode(message.entries[i], writer.uint32(\n      /* id 1, wireType 2 =*/\n      10).fork()).ldelim();\n      if (message.lookupInners != null && message.lookupInners.length) for (var i = 0; i < message.lookupInners.length; ++i) $root.ics23.InnerOp.encode(message.lookupInners[i], writer.uint32(\n      /* id 2, wireType 2 =*/\n      18).fork()).ldelim();\n      return writer;\n    };\n    /**\n     * Encodes the specified CompressedBatchProof message, length delimited. Does not implicitly {@link ics23.CompressedBatchProof.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ics23.CompressedBatchProof\n     * @static\n     * @param {ics23.ICompressedBatchProof} message CompressedBatchProof message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n\n\n    CompressedBatchProof.encodeDelimited = function encodeDelimited(message, writer) {\n      return this.encode(message, writer).ldelim();\n    };\n    /**\n     * Decodes a CompressedBatchProof message from the specified reader or buffer.\n     * @function decode\n     * @memberof ics23.CompressedBatchProof\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ics23.CompressedBatchProof} CompressedBatchProof\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n\n\n    CompressedBatchProof.decode = function decode(reader, length) {\n      if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n      var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.ics23.CompressedBatchProof();\n\n      while (reader.pos < end) {\n        var tag = reader.uint32();\n\n        switch (tag >>> 3) {\n          case 1:\n            if (!(message.entries && message.entries.length)) message.entries = [];\n            message.entries.push($root.ics23.CompressedBatchEntry.decode(reader, reader.uint32()));\n            break;\n\n          case 2:\n            if (!(message.lookupInners && message.lookupInners.length)) message.lookupInners = [];\n            message.lookupInners.push($root.ics23.InnerOp.decode(reader, reader.uint32()));\n            break;\n\n          default:\n            reader.skipType(tag & 7);\n            break;\n        }\n      }\n\n      return message;\n    };\n    /**\n     * Decodes a CompressedBatchProof message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ics23.CompressedBatchProof\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ics23.CompressedBatchProof} CompressedBatchProof\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n\n\n    CompressedBatchProof.decodeDelimited = function decodeDelimited(reader) {\n      if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n      return this.decode(reader, reader.uint32());\n    };\n    /**\n     * Verifies a CompressedBatchProof message.\n     * @function verify\n     * @memberof ics23.CompressedBatchProof\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n\n\n    CompressedBatchProof.verify = function verify(message) {\n      if (typeof message !== \"object\" || message === null) return \"object expected\";\n\n      if (message.entries != null && message.hasOwnProperty(\"entries\")) {\n        if (!Array.isArray(message.entries)) return \"entries: array expected\";\n\n        for (var i = 0; i < message.entries.length; ++i) {\n          var error = $root.ics23.CompressedBatchEntry.verify(message.entries[i]);\n          if (error) return \"entries.\" + error;\n        }\n      }\n\n      if (message.lookupInners != null && message.hasOwnProperty(\"lookupInners\")) {\n        if (!Array.isArray(message.lookupInners)) return \"lookupInners: array expected\";\n\n        for (var i = 0; i < message.lookupInners.length; ++i) {\n          var error = $root.ics23.InnerOp.verify(message.lookupInners[i]);\n          if (error) return \"lookupInners.\" + error;\n        }\n      }\n\n      return null;\n    };\n    /**\n     * Creates a CompressedBatchProof message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof ics23.CompressedBatchProof\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {ics23.CompressedBatchProof} CompressedBatchProof\n     */\n\n\n    CompressedBatchProof.fromObject = function fromObject(object) {\n      if (object instanceof $root.ics23.CompressedBatchProof) return object;\n      var message = new $root.ics23.CompressedBatchProof();\n\n      if (object.entries) {\n        if (!Array.isArray(object.entries)) throw TypeError(\".ics23.CompressedBatchProof.entries: array expected\");\n        message.entries = [];\n\n        for (var i = 0; i < object.entries.length; ++i) {\n          if (typeof object.entries[i] !== \"object\") throw TypeError(\".ics23.CompressedBatchProof.entries: object expected\");\n          message.entries[i] = $root.ics23.CompressedBatchEntry.fromObject(object.entries[i]);\n        }\n      }\n\n      if (object.lookupInners) {\n        if (!Array.isArray(object.lookupInners)) throw TypeError(\".ics23.CompressedBatchProof.lookupInners: array expected\");\n        message.lookupInners = [];\n\n        for (var i = 0; i < object.lookupInners.length; ++i) {\n          if (typeof object.lookupInners[i] !== \"object\") throw TypeError(\".ics23.CompressedBatchProof.lookupInners: object expected\");\n          message.lookupInners[i] = $root.ics23.InnerOp.fromObject(object.lookupInners[i]);\n        }\n      }\n\n      return message;\n    };\n    /**\n     * Creates a plain object from a CompressedBatchProof message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ics23.CompressedBatchProof\n     * @static\n     * @param {ics23.CompressedBatchProof} message CompressedBatchProof\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n\n\n    CompressedBatchProof.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      var object = {};\n\n      if (options.arrays || options.defaults) {\n        object.entries = [];\n        object.lookupInners = [];\n      }\n\n      if (message.entries && message.entries.length) {\n        object.entries = [];\n\n        for (var j = 0; j < message.entries.length; ++j) object.entries[j] = $root.ics23.CompressedBatchEntry.toObject(message.entries[j], options);\n      }\n\n      if (message.lookupInners && message.lookupInners.length) {\n        object.lookupInners = [];\n\n        for (var j = 0; j < message.lookupInners.length; ++j) object.lookupInners[j] = $root.ics23.InnerOp.toObject(message.lookupInners[j], options);\n      }\n\n      return object;\n    };\n    /**\n     * Converts this CompressedBatchProof to JSON.\n     * @function toJSON\n     * @memberof ics23.CompressedBatchProof\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n\n\n    CompressedBatchProof.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return CompressedBatchProof;\n  }();\n\n  ics23.CompressedBatchEntry = function () {\n    /**\n     * Properties of a CompressedBatchEntry.\n     * @memberof ics23\n     * @interface ICompressedBatchEntry\n     * @property {ics23.ICompressedExistenceProof|null} [exist] CompressedBatchEntry exist\n     * @property {ics23.ICompressedNonExistenceProof|null} [nonexist] CompressedBatchEntry nonexist\n     */\n\n    /**\n     * Constructs a new CompressedBatchEntry.\n     * @memberof ics23\n     * @classdesc Represents a CompressedBatchEntry.\n     * @implements ICompressedBatchEntry\n     * @constructor\n     * @param {ics23.ICompressedBatchEntry=} [properties] Properties to set\n     */\n    function CompressedBatchEntry(properties) {\n      if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n    /**\n     * CompressedBatchEntry exist.\n     * @member {ics23.ICompressedExistenceProof|null|undefined} exist\n     * @memberof ics23.CompressedBatchEntry\n     * @instance\n     */\n\n\n    CompressedBatchEntry.prototype.exist = null;\n    /**\n     * CompressedBatchEntry nonexist.\n     * @member {ics23.ICompressedNonExistenceProof|null|undefined} nonexist\n     * @memberof ics23.CompressedBatchEntry\n     * @instance\n     */\n\n    CompressedBatchEntry.prototype.nonexist = null; // OneOf field names bound to virtual getters and setters\n\n    var $oneOfFields;\n    /**\n     * CompressedBatchEntry proof.\n     * @member {\"exist\"|\"nonexist\"|undefined} proof\n     * @memberof ics23.CompressedBatchEntry\n     * @instance\n     */\n\n    Object.defineProperty(CompressedBatchEntry.prototype, \"proof\", {\n      get: $util.oneOfGetter($oneOfFields = [\"exist\", \"nonexist\"]),\n      set: $util.oneOfSetter($oneOfFields)\n    });\n    /**\n     * Creates a new CompressedBatchEntry instance using the specified properties.\n     * @function create\n     * @memberof ics23.CompressedBatchEntry\n     * @static\n     * @param {ics23.ICompressedBatchEntry=} [properties] Properties to set\n     * @returns {ics23.CompressedBatchEntry} CompressedBatchEntry instance\n     */\n\n    CompressedBatchEntry.create = function create(properties) {\n      return new CompressedBatchEntry(properties);\n    };\n    /**\n     * Encodes the specified CompressedBatchEntry message. Does not implicitly {@link ics23.CompressedBatchEntry.verify|verify} messages.\n     * @function encode\n     * @memberof ics23.CompressedBatchEntry\n     * @static\n     * @param {ics23.ICompressedBatchEntry} message CompressedBatchEntry message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n\n\n    CompressedBatchEntry.encode = function encode(message, writer) {\n      if (!writer) writer = $Writer.create();\n      if (message.exist != null && message.hasOwnProperty(\"exist\")) $root.ics23.CompressedExistenceProof.encode(message.exist, writer.uint32(\n      /* id 1, wireType 2 =*/\n      10).fork()).ldelim();\n      if (message.nonexist != null && message.hasOwnProperty(\"nonexist\")) $root.ics23.CompressedNonExistenceProof.encode(message.nonexist, writer.uint32(\n      /* id 2, wireType 2 =*/\n      18).fork()).ldelim();\n      return writer;\n    };\n    /**\n     * Encodes the specified CompressedBatchEntry message, length delimited. Does not implicitly {@link ics23.CompressedBatchEntry.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ics23.CompressedBatchEntry\n     * @static\n     * @param {ics23.ICompressedBatchEntry} message CompressedBatchEntry message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n\n\n    CompressedBatchEntry.encodeDelimited = function encodeDelimited(message, writer) {\n      return this.encode(message, writer).ldelim();\n    };\n    /**\n     * Decodes a CompressedBatchEntry message from the specified reader or buffer.\n     * @function decode\n     * @memberof ics23.CompressedBatchEntry\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ics23.CompressedBatchEntry} CompressedBatchEntry\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n\n\n    CompressedBatchEntry.decode = function decode(reader, length) {\n      if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n      var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.ics23.CompressedBatchEntry();\n\n      while (reader.pos < end) {\n        var tag = reader.uint32();\n\n        switch (tag >>> 3) {\n          case 1:\n            message.exist = $root.ics23.CompressedExistenceProof.decode(reader, reader.uint32());\n            break;\n\n          case 2:\n            message.nonexist = $root.ics23.CompressedNonExistenceProof.decode(reader, reader.uint32());\n            break;\n\n          default:\n            reader.skipType(tag & 7);\n            break;\n        }\n      }\n\n      return message;\n    };\n    /**\n     * Decodes a CompressedBatchEntry message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ics23.CompressedBatchEntry\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ics23.CompressedBatchEntry} CompressedBatchEntry\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n\n\n    CompressedBatchEntry.decodeDelimited = function decodeDelimited(reader) {\n      if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n      return this.decode(reader, reader.uint32());\n    };\n    /**\n     * Verifies a CompressedBatchEntry message.\n     * @function verify\n     * @memberof ics23.CompressedBatchEntry\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n\n\n    CompressedBatchEntry.verify = function verify(message) {\n      if (typeof message !== \"object\" || message === null) return \"object expected\";\n      var properties = {};\n\n      if (message.exist != null && message.hasOwnProperty(\"exist\")) {\n        properties.proof = 1;\n        {\n          var error = $root.ics23.CompressedExistenceProof.verify(message.exist);\n          if (error) return \"exist.\" + error;\n        }\n      }\n\n      if (message.nonexist != null && message.hasOwnProperty(\"nonexist\")) {\n        if (properties.proof === 1) return \"proof: multiple values\";\n        properties.proof = 1;\n        {\n          var error = $root.ics23.CompressedNonExistenceProof.verify(message.nonexist);\n          if (error) return \"nonexist.\" + error;\n        }\n      }\n\n      return null;\n    };\n    /**\n     * Creates a CompressedBatchEntry message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof ics23.CompressedBatchEntry\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {ics23.CompressedBatchEntry} CompressedBatchEntry\n     */\n\n\n    CompressedBatchEntry.fromObject = function fromObject(object) {\n      if (object instanceof $root.ics23.CompressedBatchEntry) return object;\n      var message = new $root.ics23.CompressedBatchEntry();\n\n      if (object.exist != null) {\n        if (typeof object.exist !== \"object\") throw TypeError(\".ics23.CompressedBatchEntry.exist: object expected\");\n        message.exist = $root.ics23.CompressedExistenceProof.fromObject(object.exist);\n      }\n\n      if (object.nonexist != null) {\n        if (typeof object.nonexist !== \"object\") throw TypeError(\".ics23.CompressedBatchEntry.nonexist: object expected\");\n        message.nonexist = $root.ics23.CompressedNonExistenceProof.fromObject(object.nonexist);\n      }\n\n      return message;\n    };\n    /**\n     * Creates a plain object from a CompressedBatchEntry message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ics23.CompressedBatchEntry\n     * @static\n     * @param {ics23.CompressedBatchEntry} message CompressedBatchEntry\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n\n\n    CompressedBatchEntry.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      var object = {};\n\n      if (message.exist != null && message.hasOwnProperty(\"exist\")) {\n        object.exist = $root.ics23.CompressedExistenceProof.toObject(message.exist, options);\n        if (options.oneofs) object.proof = \"exist\";\n      }\n\n      if (message.nonexist != null && message.hasOwnProperty(\"nonexist\")) {\n        object.nonexist = $root.ics23.CompressedNonExistenceProof.toObject(message.nonexist, options);\n        if (options.oneofs) object.proof = \"nonexist\";\n      }\n\n      return object;\n    };\n    /**\n     * Converts this CompressedBatchEntry to JSON.\n     * @function toJSON\n     * @memberof ics23.CompressedBatchEntry\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n\n\n    CompressedBatchEntry.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return CompressedBatchEntry;\n  }();\n\n  ics23.CompressedExistenceProof = function () {\n    /**\n     * Properties of a CompressedExistenceProof.\n     * @memberof ics23\n     * @interface ICompressedExistenceProof\n     * @property {Uint8Array|null} [key] CompressedExistenceProof key\n     * @property {Uint8Array|null} [value] CompressedExistenceProof value\n     * @property {ics23.ILeafOp|null} [leaf] CompressedExistenceProof leaf\n     * @property {Array.<number>|null} [path] CompressedExistenceProof path\n     */\n\n    /**\n     * Constructs a new CompressedExistenceProof.\n     * @memberof ics23\n     * @classdesc Represents a CompressedExistenceProof.\n     * @implements ICompressedExistenceProof\n     * @constructor\n     * @param {ics23.ICompressedExistenceProof=} [properties] Properties to set\n     */\n    function CompressedExistenceProof(properties) {\n      this.path = [];\n      if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n    /**\n     * CompressedExistenceProof key.\n     * @member {Uint8Array} key\n     * @memberof ics23.CompressedExistenceProof\n     * @instance\n     */\n\n\n    CompressedExistenceProof.prototype.key = $util.newBuffer([]);\n    /**\n     * CompressedExistenceProof value.\n     * @member {Uint8Array} value\n     * @memberof ics23.CompressedExistenceProof\n     * @instance\n     */\n\n    CompressedExistenceProof.prototype.value = $util.newBuffer([]);\n    /**\n     * CompressedExistenceProof leaf.\n     * @member {ics23.ILeafOp|null|undefined} leaf\n     * @memberof ics23.CompressedExistenceProof\n     * @instance\n     */\n\n    CompressedExistenceProof.prototype.leaf = null;\n    /**\n     * CompressedExistenceProof path.\n     * @member {Array.<number>} path\n     * @memberof ics23.CompressedExistenceProof\n     * @instance\n     */\n\n    CompressedExistenceProof.prototype.path = $util.emptyArray;\n    /**\n     * Creates a new CompressedExistenceProof instance using the specified properties.\n     * @function create\n     * @memberof ics23.CompressedExistenceProof\n     * @static\n     * @param {ics23.ICompressedExistenceProof=} [properties] Properties to set\n     * @returns {ics23.CompressedExistenceProof} CompressedExistenceProof instance\n     */\n\n    CompressedExistenceProof.create = function create(properties) {\n      return new CompressedExistenceProof(properties);\n    };\n    /**\n     * Encodes the specified CompressedExistenceProof message. Does not implicitly {@link ics23.CompressedExistenceProof.verify|verify} messages.\n     * @function encode\n     * @memberof ics23.CompressedExistenceProof\n     * @static\n     * @param {ics23.ICompressedExistenceProof} message CompressedExistenceProof message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n\n\n    CompressedExistenceProof.encode = function encode(message, writer) {\n      if (!writer) writer = $Writer.create();\n      if (message.key != null && message.hasOwnProperty(\"key\")) writer.uint32(\n      /* id 1, wireType 2 =*/\n      10).bytes(message.key);\n      if (message.value != null && message.hasOwnProperty(\"value\")) writer.uint32(\n      /* id 2, wireType 2 =*/\n      18).bytes(message.value);\n      if (message.leaf != null && message.hasOwnProperty(\"leaf\")) $root.ics23.LeafOp.encode(message.leaf, writer.uint32(\n      /* id 3, wireType 2 =*/\n      26).fork()).ldelim();\n\n      if (message.path != null && message.path.length) {\n        writer.uint32(\n        /* id 4, wireType 2 =*/\n        34).fork();\n\n        for (var i = 0; i < message.path.length; ++i) writer.int32(message.path[i]);\n\n        writer.ldelim();\n      }\n\n      return writer;\n    };\n    /**\n     * Encodes the specified CompressedExistenceProof message, length delimited. Does not implicitly {@link ics23.CompressedExistenceProof.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ics23.CompressedExistenceProof\n     * @static\n     * @param {ics23.ICompressedExistenceProof} message CompressedExistenceProof message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n\n\n    CompressedExistenceProof.encodeDelimited = function encodeDelimited(message, writer) {\n      return this.encode(message, writer).ldelim();\n    };\n    /**\n     * Decodes a CompressedExistenceProof message from the specified reader or buffer.\n     * @function decode\n     * @memberof ics23.CompressedExistenceProof\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ics23.CompressedExistenceProof} CompressedExistenceProof\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n\n\n    CompressedExistenceProof.decode = function decode(reader, length) {\n      if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n      var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.ics23.CompressedExistenceProof();\n\n      while (reader.pos < end) {\n        var tag = reader.uint32();\n\n        switch (tag >>> 3) {\n          case 1:\n            message.key = reader.bytes();\n            break;\n\n          case 2:\n            message.value = reader.bytes();\n            break;\n\n          case 3:\n            message.leaf = $root.ics23.LeafOp.decode(reader, reader.uint32());\n            break;\n\n          case 4:\n            if (!(message.path && message.path.length)) message.path = [];\n\n            if ((tag & 7) === 2) {\n              var end2 = reader.uint32() + reader.pos;\n\n              while (reader.pos < end2) message.path.push(reader.int32());\n            } else message.path.push(reader.int32());\n\n            break;\n\n          default:\n            reader.skipType(tag & 7);\n            break;\n        }\n      }\n\n      return message;\n    };\n    /**\n     * Decodes a CompressedExistenceProof message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ics23.CompressedExistenceProof\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ics23.CompressedExistenceProof} CompressedExistenceProof\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n\n\n    CompressedExistenceProof.decodeDelimited = function decodeDelimited(reader) {\n      if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n      return this.decode(reader, reader.uint32());\n    };\n    /**\n     * Verifies a CompressedExistenceProof message.\n     * @function verify\n     * @memberof ics23.CompressedExistenceProof\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n\n\n    CompressedExistenceProof.verify = function verify(message) {\n      if (typeof message !== \"object\" || message === null) return \"object expected\";\n      if (message.key != null && message.hasOwnProperty(\"key\")) if (!(message.key && typeof message.key.length === \"number\" || $util.isString(message.key))) return \"key: buffer expected\";\n      if (message.value != null && message.hasOwnProperty(\"value\")) if (!(message.value && typeof message.value.length === \"number\" || $util.isString(message.value))) return \"value: buffer expected\";\n\n      if (message.leaf != null && message.hasOwnProperty(\"leaf\")) {\n        var error = $root.ics23.LeafOp.verify(message.leaf);\n        if (error) return \"leaf.\" + error;\n      }\n\n      if (message.path != null && message.hasOwnProperty(\"path\")) {\n        if (!Array.isArray(message.path)) return \"path: array expected\";\n\n        for (var i = 0; i < message.path.length; ++i) if (!$util.isInteger(message.path[i])) return \"path: integer[] expected\";\n      }\n\n      return null;\n    };\n    /**\n     * Creates a CompressedExistenceProof message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof ics23.CompressedExistenceProof\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {ics23.CompressedExistenceProof} CompressedExistenceProof\n     */\n\n\n    CompressedExistenceProof.fromObject = function fromObject(object) {\n      if (object instanceof $root.ics23.CompressedExistenceProof) return object;\n      var message = new $root.ics23.CompressedExistenceProof();\n      if (object.key != null) if (typeof object.key === \"string\") $util.base64.decode(object.key, message.key = $util.newBuffer($util.base64.length(object.key)), 0);else if (object.key.length) message.key = object.key;\n      if (object.value != null) if (typeof object.value === \"string\") $util.base64.decode(object.value, message.value = $util.newBuffer($util.base64.length(object.value)), 0);else if (object.value.length) message.value = object.value;\n\n      if (object.leaf != null) {\n        if (typeof object.leaf !== \"object\") throw TypeError(\".ics23.CompressedExistenceProof.leaf: object expected\");\n        message.leaf = $root.ics23.LeafOp.fromObject(object.leaf);\n      }\n\n      if (object.path) {\n        if (!Array.isArray(object.path)) throw TypeError(\".ics23.CompressedExistenceProof.path: array expected\");\n        message.path = [];\n\n        for (var i = 0; i < object.path.length; ++i) message.path[i] = object.path[i] | 0;\n      }\n\n      return message;\n    };\n    /**\n     * Creates a plain object from a CompressedExistenceProof message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ics23.CompressedExistenceProof\n     * @static\n     * @param {ics23.CompressedExistenceProof} message CompressedExistenceProof\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n\n\n    CompressedExistenceProof.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      var object = {};\n      if (options.arrays || options.defaults) object.path = [];\n\n      if (options.defaults) {\n        if (options.bytes === String) object.key = \"\";else {\n          object.key = [];\n          if (options.bytes !== Array) object.key = $util.newBuffer(object.key);\n        }\n        if (options.bytes === String) object.value = \"\";else {\n          object.value = [];\n          if (options.bytes !== Array) object.value = $util.newBuffer(object.value);\n        }\n        object.leaf = null;\n      }\n\n      if (message.key != null && message.hasOwnProperty(\"key\")) object.key = options.bytes === String ? $util.base64.encode(message.key, 0, message.key.length) : options.bytes === Array ? Array.prototype.slice.call(message.key) : message.key;\n      if (message.value != null && message.hasOwnProperty(\"value\")) object.value = options.bytes === String ? $util.base64.encode(message.value, 0, message.value.length) : options.bytes === Array ? Array.prototype.slice.call(message.value) : message.value;\n      if (message.leaf != null && message.hasOwnProperty(\"leaf\")) object.leaf = $root.ics23.LeafOp.toObject(message.leaf, options);\n\n      if (message.path && message.path.length) {\n        object.path = [];\n\n        for (var j = 0; j < message.path.length; ++j) object.path[j] = message.path[j];\n      }\n\n      return object;\n    };\n    /**\n     * Converts this CompressedExistenceProof to JSON.\n     * @function toJSON\n     * @memberof ics23.CompressedExistenceProof\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n\n\n    CompressedExistenceProof.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return CompressedExistenceProof;\n  }();\n\n  ics23.CompressedNonExistenceProof = function () {\n    /**\n     * Properties of a CompressedNonExistenceProof.\n     * @memberof ics23\n     * @interface ICompressedNonExistenceProof\n     * @property {Uint8Array|null} [key] CompressedNonExistenceProof key\n     * @property {ics23.ICompressedExistenceProof|null} [left] CompressedNonExistenceProof left\n     * @property {ics23.ICompressedExistenceProof|null} [right] CompressedNonExistenceProof right\n     */\n\n    /**\n     * Constructs a new CompressedNonExistenceProof.\n     * @memberof ics23\n     * @classdesc Represents a CompressedNonExistenceProof.\n     * @implements ICompressedNonExistenceProof\n     * @constructor\n     * @param {ics23.ICompressedNonExistenceProof=} [properties] Properties to set\n     */\n    function CompressedNonExistenceProof(properties) {\n      if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n    /**\n     * CompressedNonExistenceProof key.\n     * @member {Uint8Array} key\n     * @memberof ics23.CompressedNonExistenceProof\n     * @instance\n     */\n\n\n    CompressedNonExistenceProof.prototype.key = $util.newBuffer([]);\n    /**\n     * CompressedNonExistenceProof left.\n     * @member {ics23.ICompressedExistenceProof|null|undefined} left\n     * @memberof ics23.CompressedNonExistenceProof\n     * @instance\n     */\n\n    CompressedNonExistenceProof.prototype.left = null;\n    /**\n     * CompressedNonExistenceProof right.\n     * @member {ics23.ICompressedExistenceProof|null|undefined} right\n     * @memberof ics23.CompressedNonExistenceProof\n     * @instance\n     */\n\n    CompressedNonExistenceProof.prototype.right = null;\n    /**\n     * Creates a new CompressedNonExistenceProof instance using the specified properties.\n     * @function create\n     * @memberof ics23.CompressedNonExistenceProof\n     * @static\n     * @param {ics23.ICompressedNonExistenceProof=} [properties] Properties to set\n     * @returns {ics23.CompressedNonExistenceProof} CompressedNonExistenceProof instance\n     */\n\n    CompressedNonExistenceProof.create = function create(properties) {\n      return new CompressedNonExistenceProof(properties);\n    };\n    /**\n     * Encodes the specified CompressedNonExistenceProof message. Does not implicitly {@link ics23.CompressedNonExistenceProof.verify|verify} messages.\n     * @function encode\n     * @memberof ics23.CompressedNonExistenceProof\n     * @static\n     * @param {ics23.ICompressedNonExistenceProof} message CompressedNonExistenceProof message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n\n\n    CompressedNonExistenceProof.encode = function encode(message, writer) {\n      if (!writer) writer = $Writer.create();\n      if (message.key != null && message.hasOwnProperty(\"key\")) writer.uint32(\n      /* id 1, wireType 2 =*/\n      10).bytes(message.key);\n      if (message.left != null && message.hasOwnProperty(\"left\")) $root.ics23.CompressedExistenceProof.encode(message.left, writer.uint32(\n      /* id 2, wireType 2 =*/\n      18).fork()).ldelim();\n      if (message.right != null && message.hasOwnProperty(\"right\")) $root.ics23.CompressedExistenceProof.encode(message.right, writer.uint32(\n      /* id 3, wireType 2 =*/\n      26).fork()).ldelim();\n      return writer;\n    };\n    /**\n     * Encodes the specified CompressedNonExistenceProof message, length delimited. Does not implicitly {@link ics23.CompressedNonExistenceProof.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ics23.CompressedNonExistenceProof\n     * @static\n     * @param {ics23.ICompressedNonExistenceProof} message CompressedNonExistenceProof message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n\n\n    CompressedNonExistenceProof.encodeDelimited = function encodeDelimited(message, writer) {\n      return this.encode(message, writer).ldelim();\n    };\n    /**\n     * Decodes a CompressedNonExistenceProof message from the specified reader or buffer.\n     * @function decode\n     * @memberof ics23.CompressedNonExistenceProof\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ics23.CompressedNonExistenceProof} CompressedNonExistenceProof\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n\n\n    CompressedNonExistenceProof.decode = function decode(reader, length) {\n      if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n      var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.ics23.CompressedNonExistenceProof();\n\n      while (reader.pos < end) {\n        var tag = reader.uint32();\n\n        switch (tag >>> 3) {\n          case 1:\n            message.key = reader.bytes();\n            break;\n\n          case 2:\n            message.left = $root.ics23.CompressedExistenceProof.decode(reader, reader.uint32());\n            break;\n\n          case 3:\n            message.right = $root.ics23.CompressedExistenceProof.decode(reader, reader.uint32());\n            break;\n\n          default:\n            reader.skipType(tag & 7);\n            break;\n        }\n      }\n\n      return message;\n    };\n    /**\n     * Decodes a CompressedNonExistenceProof message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ics23.CompressedNonExistenceProof\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ics23.CompressedNonExistenceProof} CompressedNonExistenceProof\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n\n\n    CompressedNonExistenceProof.decodeDelimited = function decodeDelimited(reader) {\n      if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n      return this.decode(reader, reader.uint32());\n    };\n    /**\n     * Verifies a CompressedNonExistenceProof message.\n     * @function verify\n     * @memberof ics23.CompressedNonExistenceProof\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n\n\n    CompressedNonExistenceProof.verify = function verify(message) {\n      if (typeof message !== \"object\" || message === null) return \"object expected\";\n      if (message.key != null && message.hasOwnProperty(\"key\")) if (!(message.key && typeof message.key.length === \"number\" || $util.isString(message.key))) return \"key: buffer expected\";\n\n      if (message.left != null && message.hasOwnProperty(\"left\")) {\n        var error = $root.ics23.CompressedExistenceProof.verify(message.left);\n        if (error) return \"left.\" + error;\n      }\n\n      if (message.right != null && message.hasOwnProperty(\"right\")) {\n        var error = $root.ics23.CompressedExistenceProof.verify(message.right);\n        if (error) return \"right.\" + error;\n      }\n\n      return null;\n    };\n    /**\n     * Creates a CompressedNonExistenceProof message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof ics23.CompressedNonExistenceProof\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {ics23.CompressedNonExistenceProof} CompressedNonExistenceProof\n     */\n\n\n    CompressedNonExistenceProof.fromObject = function fromObject(object) {\n      if (object instanceof $root.ics23.CompressedNonExistenceProof) return object;\n      var message = new $root.ics23.CompressedNonExistenceProof();\n      if (object.key != null) if (typeof object.key === \"string\") $util.base64.decode(object.key, message.key = $util.newBuffer($util.base64.length(object.key)), 0);else if (object.key.length) message.key = object.key;\n\n      if (object.left != null) {\n        if (typeof object.left !== \"object\") throw TypeError(\".ics23.CompressedNonExistenceProof.left: object expected\");\n        message.left = $root.ics23.CompressedExistenceProof.fromObject(object.left);\n      }\n\n      if (object.right != null) {\n        if (typeof object.right !== \"object\") throw TypeError(\".ics23.CompressedNonExistenceProof.right: object expected\");\n        message.right = $root.ics23.CompressedExistenceProof.fromObject(object.right);\n      }\n\n      return message;\n    };\n    /**\n     * Creates a plain object from a CompressedNonExistenceProof message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ics23.CompressedNonExistenceProof\n     * @static\n     * @param {ics23.CompressedNonExistenceProof} message CompressedNonExistenceProof\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n\n\n    CompressedNonExistenceProof.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      var object = {};\n\n      if (options.defaults) {\n        if (options.bytes === String) object.key = \"\";else {\n          object.key = [];\n          if (options.bytes !== Array) object.key = $util.newBuffer(object.key);\n        }\n        object.left = null;\n        object.right = null;\n      }\n\n      if (message.key != null && message.hasOwnProperty(\"key\")) object.key = options.bytes === String ? $util.base64.encode(message.key, 0, message.key.length) : options.bytes === Array ? Array.prototype.slice.call(message.key) : message.key;\n      if (message.left != null && message.hasOwnProperty(\"left\")) object.left = $root.ics23.CompressedExistenceProof.toObject(message.left, options);\n      if (message.right != null && message.hasOwnProperty(\"right\")) object.right = $root.ics23.CompressedExistenceProof.toObject(message.right, options);\n      return object;\n    };\n    /**\n     * Converts this CompressedNonExistenceProof to JSON.\n     * @function toJSON\n     * @memberof ics23.CompressedNonExistenceProof\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n\n\n    CompressedNonExistenceProof.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return CompressedNonExistenceProof;\n  }();\n\n  return ics23;\n}();\n\nmodule.exports = $root;","map":{"version":3,"sources":["/Users/makand/cosmwasm/dApps/node_modules/@confio/ics23/build/generated/codecimpl.js"],"names":["$protobuf","require","$Reader","Reader","$Writer","Writer","$util","util","$root","roots","ics23","HashOp","valuesById","values","Object","create","LengthOp","ExistenceProof","properties","path","keys","i","length","prototype","key","newBuffer","value","leaf","emptyArray","encode","message","writer","hasOwnProperty","uint32","bytes","LeafOp","fork","ldelim","InnerOp","encodeDelimited","decode","reader","end","undefined","len","pos","tag","push","skipType","decodeDelimited","verify","isString","error","Array","isArray","fromObject","object","base64","TypeError","toObject","options","arrays","defaults","String","slice","call","j","toJSON","constructor","toJSONOptions","NonExistenceProof","left","right","CommitmentProof","exist","nonexist","batch","compressed","$oneOfFields","defineProperty","get","oneOfGetter","set","oneOfSetter","BatchProof","CompressedBatchProof","proof","oneofs","hash","prehashKey","prehashValue","prefix","int32","enums","suffix","ProofSpec","leafSpec","innerSpec","maxDepth","minDepth","InnerSpec","isInteger","childOrder","childSize","minPrefixLength","maxPrefixLength","emptyChild","end2","entries","BatchEntry","lookupInners","CompressedBatchEntry","CompressedExistenceProof","CompressedNonExistenceProof","module","exports"],"mappings":"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","sourcesContent":["/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n\"use strict\";\n\nvar $protobuf = require(\"protobufjs/minimal\");\n\n// Common aliases\nvar $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\n$root.ics23 = (function() {\n\n    /**\n     * Namespace ics23.\n     * @exports ics23\n     * @namespace\n     */\n    var ics23 = {};\n\n    /**\n     * HashOp enum.\n     * @name ics23.HashOp\n     * @enum {string}\n     * @property {number} NO_HASH=0 NO_HASH value\n     * @property {number} SHA256=1 SHA256 value\n     * @property {number} SHA512=2 SHA512 value\n     * @property {number} KECCAK=3 KECCAK value\n     * @property {number} RIPEMD160=4 RIPEMD160 value\n     * @property {number} BITCOIN=5 BITCOIN value\n     */\n    ics23.HashOp = (function() {\n        var valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"NO_HASH\"] = 0;\n        values[valuesById[1] = \"SHA256\"] = 1;\n        values[valuesById[2] = \"SHA512\"] = 2;\n        values[valuesById[3] = \"KECCAK\"] = 3;\n        values[valuesById[4] = \"RIPEMD160\"] = 4;\n        values[valuesById[5] = \"BITCOIN\"] = 5;\n        return values;\n    })();\n\n    /**\n     * LengthOp defines how to process the key and value of the LeafOp\n     * to include length information. After encoding the length with the given\n     * algorithm, the length will be prepended to the key and value bytes.\n     * (Each one with it's own encoded length)\n     * @name ics23.LengthOp\n     * @enum {string}\n     * @property {number} NO_PREFIX=0 NO_PREFIX value\n     * @property {number} VAR_PROTO=1 VAR_PROTO value\n     * @property {number} VAR_RLP=2 VAR_RLP value\n     * @property {number} FIXED32_BIG=3 FIXED32_BIG value\n     * @property {number} FIXED32_LITTLE=4 FIXED32_LITTLE value\n     * @property {number} FIXED64_BIG=5 FIXED64_BIG value\n     * @property {number} FIXED64_LITTLE=6 FIXED64_LITTLE value\n     * @property {number} REQUIRE_32_BYTES=7 REQUIRE_32_BYTES value\n     * @property {number} REQUIRE_64_BYTES=8 REQUIRE_64_BYTES value\n     */\n    ics23.LengthOp = (function() {\n        var valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"NO_PREFIX\"] = 0;\n        values[valuesById[1] = \"VAR_PROTO\"] = 1;\n        values[valuesById[2] = \"VAR_RLP\"] = 2;\n        values[valuesById[3] = \"FIXED32_BIG\"] = 3;\n        values[valuesById[4] = \"FIXED32_LITTLE\"] = 4;\n        values[valuesById[5] = \"FIXED64_BIG\"] = 5;\n        values[valuesById[6] = \"FIXED64_LITTLE\"] = 6;\n        values[valuesById[7] = \"REQUIRE_32_BYTES\"] = 7;\n        values[valuesById[8] = \"REQUIRE_64_BYTES\"] = 8;\n        return values;\n    })();\n\n    ics23.ExistenceProof = (function() {\n\n        /**\n         * Properties of an ExistenceProof.\n         * @memberof ics23\n         * @interface IExistenceProof\n         * @property {Uint8Array|null} [key] ExistenceProof key\n         * @property {Uint8Array|null} [value] ExistenceProof value\n         * @property {ics23.ILeafOp|null} [leaf] ExistenceProof leaf\n         * @property {Array.<ics23.IInnerOp>|null} [path] ExistenceProof path\n         */\n\n        /**\n         * Constructs a new ExistenceProof.\n         * @memberof ics23\n         * @classdesc ExistenceProof takes a key and a value and a set of steps to perform on it.\n         * The result of peforming all these steps will provide a \"root hash\", which can\n         * be compared to the value in a header.\n         * \n         * Since it is computationally infeasible to produce a hash collission for any of the used\n         * cryptographic hash functions, if someone can provide a series of operations to transform\n         * a given key and value into a root hash that matches some trusted root, these key and values\n         * must be in the referenced merkle tree.\n         * \n         * The only possible issue is maliablity in LeafOp, such as providing extra prefix data,\n         * which should be controlled by a spec. Eg. with lengthOp as NONE,\n         * prefix = FOO, key = BAR, value = CHOICE\n         * and\n         * prefix = F, key = OOBAR, value = CHOICE\n         * would produce the same value.\n         * \n         * With LengthOp this is tricker but not impossible. Which is why the \"leafPrefixEqual\" field\n         * in the ProofSpec is valuable to prevent this mutability. And why all trees should\n         * length-prefix the data before hashing it.\n         * @implements IExistenceProof\n         * @constructor\n         * @param {ics23.IExistenceProof=} [properties] Properties to set\n         */\n        function ExistenceProof(properties) {\n            this.path = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ExistenceProof key.\n         * @member {Uint8Array} key\n         * @memberof ics23.ExistenceProof\n         * @instance\n         */\n        ExistenceProof.prototype.key = $util.newBuffer([]);\n\n        /**\n         * ExistenceProof value.\n         * @member {Uint8Array} value\n         * @memberof ics23.ExistenceProof\n         * @instance\n         */\n        ExistenceProof.prototype.value = $util.newBuffer([]);\n\n        /**\n         * ExistenceProof leaf.\n         * @member {ics23.ILeafOp|null|undefined} leaf\n         * @memberof ics23.ExistenceProof\n         * @instance\n         */\n        ExistenceProof.prototype.leaf = null;\n\n        /**\n         * ExistenceProof path.\n         * @member {Array.<ics23.IInnerOp>} path\n         * @memberof ics23.ExistenceProof\n         * @instance\n         */\n        ExistenceProof.prototype.path = $util.emptyArray;\n\n        /**\n         * Creates a new ExistenceProof instance using the specified properties.\n         * @function create\n         * @memberof ics23.ExistenceProof\n         * @static\n         * @param {ics23.IExistenceProof=} [properties] Properties to set\n         * @returns {ics23.ExistenceProof} ExistenceProof instance\n         */\n        ExistenceProof.create = function create(properties) {\n            return new ExistenceProof(properties);\n        };\n\n        /**\n         * Encodes the specified ExistenceProof message. Does not implicitly {@link ics23.ExistenceProof.verify|verify} messages.\n         * @function encode\n         * @memberof ics23.ExistenceProof\n         * @static\n         * @param {ics23.IExistenceProof} message ExistenceProof message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ExistenceProof.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.key);\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.value);\n            if (message.leaf != null && message.hasOwnProperty(\"leaf\"))\n                $root.ics23.LeafOp.encode(message.leaf, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.path != null && message.path.length)\n                for (var i = 0; i < message.path.length; ++i)\n                    $root.ics23.InnerOp.encode(message.path[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ExistenceProof message, length delimited. Does not implicitly {@link ics23.ExistenceProof.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof ics23.ExistenceProof\n         * @static\n         * @param {ics23.IExistenceProof} message ExistenceProof message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ExistenceProof.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an ExistenceProof message from the specified reader or buffer.\n         * @function decode\n         * @memberof ics23.ExistenceProof\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {ics23.ExistenceProof} ExistenceProof\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ExistenceProof.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ics23.ExistenceProof();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.key = reader.bytes();\n                    break;\n                case 2:\n                    message.value = reader.bytes();\n                    break;\n                case 3:\n                    message.leaf = $root.ics23.LeafOp.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    if (!(message.path && message.path.length))\n                        message.path = [];\n                    message.path.push($root.ics23.InnerOp.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an ExistenceProof message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof ics23.ExistenceProof\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {ics23.ExistenceProof} ExistenceProof\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ExistenceProof.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an ExistenceProof message.\n         * @function verify\n         * @memberof ics23.ExistenceProof\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ExistenceProof.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                if (!(message.key && typeof message.key.length === \"number\" || $util.isString(message.key)))\n                    return \"key: buffer expected\";\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                if (!(message.value && typeof message.value.length === \"number\" || $util.isString(message.value)))\n                    return \"value: buffer expected\";\n            if (message.leaf != null && message.hasOwnProperty(\"leaf\")) {\n                var error = $root.ics23.LeafOp.verify(message.leaf);\n                if (error)\n                    return \"leaf.\" + error;\n            }\n            if (message.path != null && message.hasOwnProperty(\"path\")) {\n                if (!Array.isArray(message.path))\n                    return \"path: array expected\";\n                for (var i = 0; i < message.path.length; ++i) {\n                    var error = $root.ics23.InnerOp.verify(message.path[i]);\n                    if (error)\n                        return \"path.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates an ExistenceProof message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof ics23.ExistenceProof\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {ics23.ExistenceProof} ExistenceProof\n         */\n        ExistenceProof.fromObject = function fromObject(object) {\n            if (object instanceof $root.ics23.ExistenceProof)\n                return object;\n            var message = new $root.ics23.ExistenceProof();\n            if (object.key != null)\n                if (typeof object.key === \"string\")\n                    $util.base64.decode(object.key, message.key = $util.newBuffer($util.base64.length(object.key)), 0);\n                else if (object.key.length)\n                    message.key = object.key;\n            if (object.value != null)\n                if (typeof object.value === \"string\")\n                    $util.base64.decode(object.value, message.value = $util.newBuffer($util.base64.length(object.value)), 0);\n                else if (object.value.length)\n                    message.value = object.value;\n            if (object.leaf != null) {\n                if (typeof object.leaf !== \"object\")\n                    throw TypeError(\".ics23.ExistenceProof.leaf: object expected\");\n                message.leaf = $root.ics23.LeafOp.fromObject(object.leaf);\n            }\n            if (object.path) {\n                if (!Array.isArray(object.path))\n                    throw TypeError(\".ics23.ExistenceProof.path: array expected\");\n                message.path = [];\n                for (var i = 0; i < object.path.length; ++i) {\n                    if (typeof object.path[i] !== \"object\")\n                        throw TypeError(\".ics23.ExistenceProof.path: object expected\");\n                    message.path[i] = $root.ics23.InnerOp.fromObject(object.path[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an ExistenceProof message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof ics23.ExistenceProof\n         * @static\n         * @param {ics23.ExistenceProof} message ExistenceProof\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ExistenceProof.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.path = [];\n            if (options.defaults) {\n                if (options.bytes === String)\n                    object.key = \"\";\n                else {\n                    object.key = [];\n                    if (options.bytes !== Array)\n                        object.key = $util.newBuffer(object.key);\n                }\n                if (options.bytes === String)\n                    object.value = \"\";\n                else {\n                    object.value = [];\n                    if (options.bytes !== Array)\n                        object.value = $util.newBuffer(object.value);\n                }\n                object.leaf = null;\n            }\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                object.key = options.bytes === String ? $util.base64.encode(message.key, 0, message.key.length) : options.bytes === Array ? Array.prototype.slice.call(message.key) : message.key;\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                object.value = options.bytes === String ? $util.base64.encode(message.value, 0, message.value.length) : options.bytes === Array ? Array.prototype.slice.call(message.value) : message.value;\n            if (message.leaf != null && message.hasOwnProperty(\"leaf\"))\n                object.leaf = $root.ics23.LeafOp.toObject(message.leaf, options);\n            if (message.path && message.path.length) {\n                object.path = [];\n                for (var j = 0; j < message.path.length; ++j)\n                    object.path[j] = $root.ics23.InnerOp.toObject(message.path[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this ExistenceProof to JSON.\n         * @function toJSON\n         * @memberof ics23.ExistenceProof\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ExistenceProof.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ExistenceProof;\n    })();\n\n    ics23.NonExistenceProof = (function() {\n\n        /**\n         * Properties of a NonExistenceProof.\n         * @memberof ics23\n         * @interface INonExistenceProof\n         * @property {Uint8Array|null} [key] NonExistenceProof key\n         * @property {ics23.IExistenceProof|null} [left] NonExistenceProof left\n         * @property {ics23.IExistenceProof|null} [right] NonExistenceProof right\n         */\n\n        /**\n         * Constructs a new NonExistenceProof.\n         * @memberof ics23\n         * @classdesc Represents a NonExistenceProof.\n         * @implements INonExistenceProof\n         * @constructor\n         * @param {ics23.INonExistenceProof=} [properties] Properties to set\n         */\n        function NonExistenceProof(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * NonExistenceProof key.\n         * @member {Uint8Array} key\n         * @memberof ics23.NonExistenceProof\n         * @instance\n         */\n        NonExistenceProof.prototype.key = $util.newBuffer([]);\n\n        /**\n         * NonExistenceProof left.\n         * @member {ics23.IExistenceProof|null|undefined} left\n         * @memberof ics23.NonExistenceProof\n         * @instance\n         */\n        NonExistenceProof.prototype.left = null;\n\n        /**\n         * NonExistenceProof right.\n         * @member {ics23.IExistenceProof|null|undefined} right\n         * @memberof ics23.NonExistenceProof\n         * @instance\n         */\n        NonExistenceProof.prototype.right = null;\n\n        /**\n         * Creates a new NonExistenceProof instance using the specified properties.\n         * @function create\n         * @memberof ics23.NonExistenceProof\n         * @static\n         * @param {ics23.INonExistenceProof=} [properties] Properties to set\n         * @returns {ics23.NonExistenceProof} NonExistenceProof instance\n         */\n        NonExistenceProof.create = function create(properties) {\n            return new NonExistenceProof(properties);\n        };\n\n        /**\n         * Encodes the specified NonExistenceProof message. Does not implicitly {@link ics23.NonExistenceProof.verify|verify} messages.\n         * @function encode\n         * @memberof ics23.NonExistenceProof\n         * @static\n         * @param {ics23.INonExistenceProof} message NonExistenceProof message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        NonExistenceProof.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.key);\n            if (message.left != null && message.hasOwnProperty(\"left\"))\n                $root.ics23.ExistenceProof.encode(message.left, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.right != null && message.hasOwnProperty(\"right\"))\n                $root.ics23.ExistenceProof.encode(message.right, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified NonExistenceProof message, length delimited. Does not implicitly {@link ics23.NonExistenceProof.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof ics23.NonExistenceProof\n         * @static\n         * @param {ics23.INonExistenceProof} message NonExistenceProof message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        NonExistenceProof.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a NonExistenceProof message from the specified reader or buffer.\n         * @function decode\n         * @memberof ics23.NonExistenceProof\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {ics23.NonExistenceProof} NonExistenceProof\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        NonExistenceProof.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ics23.NonExistenceProof();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.key = reader.bytes();\n                    break;\n                case 2:\n                    message.left = $root.ics23.ExistenceProof.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.right = $root.ics23.ExistenceProof.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a NonExistenceProof message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof ics23.NonExistenceProof\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {ics23.NonExistenceProof} NonExistenceProof\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        NonExistenceProof.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a NonExistenceProof message.\n         * @function verify\n         * @memberof ics23.NonExistenceProof\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        NonExistenceProof.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                if (!(message.key && typeof message.key.length === \"number\" || $util.isString(message.key)))\n                    return \"key: buffer expected\";\n            if (message.left != null && message.hasOwnProperty(\"left\")) {\n                var error = $root.ics23.ExistenceProof.verify(message.left);\n                if (error)\n                    return \"left.\" + error;\n            }\n            if (message.right != null && message.hasOwnProperty(\"right\")) {\n                var error = $root.ics23.ExistenceProof.verify(message.right);\n                if (error)\n                    return \"right.\" + error;\n            }\n            return null;\n        };\n\n        /**\n         * Creates a NonExistenceProof message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof ics23.NonExistenceProof\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {ics23.NonExistenceProof} NonExistenceProof\n         */\n        NonExistenceProof.fromObject = function fromObject(object) {\n            if (object instanceof $root.ics23.NonExistenceProof)\n                return object;\n            var message = new $root.ics23.NonExistenceProof();\n            if (object.key != null)\n                if (typeof object.key === \"string\")\n                    $util.base64.decode(object.key, message.key = $util.newBuffer($util.base64.length(object.key)), 0);\n                else if (object.key.length)\n                    message.key = object.key;\n            if (object.left != null) {\n                if (typeof object.left !== \"object\")\n                    throw TypeError(\".ics23.NonExistenceProof.left: object expected\");\n                message.left = $root.ics23.ExistenceProof.fromObject(object.left);\n            }\n            if (object.right != null) {\n                if (typeof object.right !== \"object\")\n                    throw TypeError(\".ics23.NonExistenceProof.right: object expected\");\n                message.right = $root.ics23.ExistenceProof.fromObject(object.right);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a NonExistenceProof message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof ics23.NonExistenceProof\n         * @static\n         * @param {ics23.NonExistenceProof} message NonExistenceProof\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        NonExistenceProof.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                if (options.bytes === String)\n                    object.key = \"\";\n                else {\n                    object.key = [];\n                    if (options.bytes !== Array)\n                        object.key = $util.newBuffer(object.key);\n                }\n                object.left = null;\n                object.right = null;\n            }\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                object.key = options.bytes === String ? $util.base64.encode(message.key, 0, message.key.length) : options.bytes === Array ? Array.prototype.slice.call(message.key) : message.key;\n            if (message.left != null && message.hasOwnProperty(\"left\"))\n                object.left = $root.ics23.ExistenceProof.toObject(message.left, options);\n            if (message.right != null && message.hasOwnProperty(\"right\"))\n                object.right = $root.ics23.ExistenceProof.toObject(message.right, options);\n            return object;\n        };\n\n        /**\n         * Converts this NonExistenceProof to JSON.\n         * @function toJSON\n         * @memberof ics23.NonExistenceProof\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        NonExistenceProof.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return NonExistenceProof;\n    })();\n\n    ics23.CommitmentProof = (function() {\n\n        /**\n         * Properties of a CommitmentProof.\n         * @memberof ics23\n         * @interface ICommitmentProof\n         * @property {ics23.IExistenceProof|null} [exist] CommitmentProof exist\n         * @property {ics23.INonExistenceProof|null} [nonexist] CommitmentProof nonexist\n         * @property {ics23.IBatchProof|null} [batch] CommitmentProof batch\n         * @property {ics23.ICompressedBatchProof|null} [compressed] CommitmentProof compressed\n         */\n\n        /**\n         * Constructs a new CommitmentProof.\n         * @memberof ics23\n         * @classdesc Represents a CommitmentProof.\n         * @implements ICommitmentProof\n         * @constructor\n         * @param {ics23.ICommitmentProof=} [properties] Properties to set\n         */\n        function CommitmentProof(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * CommitmentProof exist.\n         * @member {ics23.IExistenceProof|null|undefined} exist\n         * @memberof ics23.CommitmentProof\n         * @instance\n         */\n        CommitmentProof.prototype.exist = null;\n\n        /**\n         * CommitmentProof nonexist.\n         * @member {ics23.INonExistenceProof|null|undefined} nonexist\n         * @memberof ics23.CommitmentProof\n         * @instance\n         */\n        CommitmentProof.prototype.nonexist = null;\n\n        /**\n         * CommitmentProof batch.\n         * @member {ics23.IBatchProof|null|undefined} batch\n         * @memberof ics23.CommitmentProof\n         * @instance\n         */\n        CommitmentProof.prototype.batch = null;\n\n        /**\n         * CommitmentProof compressed.\n         * @member {ics23.ICompressedBatchProof|null|undefined} compressed\n         * @memberof ics23.CommitmentProof\n         * @instance\n         */\n        CommitmentProof.prototype.compressed = null;\n\n        // OneOf field names bound to virtual getters and setters\n        var $oneOfFields;\n\n        /**\n         * CommitmentProof proof.\n         * @member {\"exist\"|\"nonexist\"|\"batch\"|\"compressed\"|undefined} proof\n         * @memberof ics23.CommitmentProof\n         * @instance\n         */\n        Object.defineProperty(CommitmentProof.prototype, \"proof\", {\n            get: $util.oneOfGetter($oneOfFields = [\"exist\", \"nonexist\", \"batch\", \"compressed\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new CommitmentProof instance using the specified properties.\n         * @function create\n         * @memberof ics23.CommitmentProof\n         * @static\n         * @param {ics23.ICommitmentProof=} [properties] Properties to set\n         * @returns {ics23.CommitmentProof} CommitmentProof instance\n         */\n        CommitmentProof.create = function create(properties) {\n            return new CommitmentProof(properties);\n        };\n\n        /**\n         * Encodes the specified CommitmentProof message. Does not implicitly {@link ics23.CommitmentProof.verify|verify} messages.\n         * @function encode\n         * @memberof ics23.CommitmentProof\n         * @static\n         * @param {ics23.ICommitmentProof} message CommitmentProof message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CommitmentProof.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.exist != null && message.hasOwnProperty(\"exist\"))\n                $root.ics23.ExistenceProof.encode(message.exist, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.nonexist != null && message.hasOwnProperty(\"nonexist\"))\n                $root.ics23.NonExistenceProof.encode(message.nonexist, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.batch != null && message.hasOwnProperty(\"batch\"))\n                $root.ics23.BatchProof.encode(message.batch, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.compressed != null && message.hasOwnProperty(\"compressed\"))\n                $root.ics23.CompressedBatchProof.encode(message.compressed, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified CommitmentProof message, length delimited. Does not implicitly {@link ics23.CommitmentProof.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof ics23.CommitmentProof\n         * @static\n         * @param {ics23.ICommitmentProof} message CommitmentProof message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CommitmentProof.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a CommitmentProof message from the specified reader or buffer.\n         * @function decode\n         * @memberof ics23.CommitmentProof\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {ics23.CommitmentProof} CommitmentProof\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CommitmentProof.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ics23.CommitmentProof();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.exist = $root.ics23.ExistenceProof.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.nonexist = $root.ics23.NonExistenceProof.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.batch = $root.ics23.BatchProof.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    message.compressed = $root.ics23.CompressedBatchProof.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a CommitmentProof message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof ics23.CommitmentProof\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {ics23.CommitmentProof} CommitmentProof\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CommitmentProof.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a CommitmentProof message.\n         * @function verify\n         * @memberof ics23.CommitmentProof\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        CommitmentProof.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            var properties = {};\n            if (message.exist != null && message.hasOwnProperty(\"exist\")) {\n                properties.proof = 1;\n                {\n                    var error = $root.ics23.ExistenceProof.verify(message.exist);\n                    if (error)\n                        return \"exist.\" + error;\n                }\n            }\n            if (message.nonexist != null && message.hasOwnProperty(\"nonexist\")) {\n                if (properties.proof === 1)\n                    return \"proof: multiple values\";\n                properties.proof = 1;\n                {\n                    var error = $root.ics23.NonExistenceProof.verify(message.nonexist);\n                    if (error)\n                        return \"nonexist.\" + error;\n                }\n            }\n            if (message.batch != null && message.hasOwnProperty(\"batch\")) {\n                if (properties.proof === 1)\n                    return \"proof: multiple values\";\n                properties.proof = 1;\n                {\n                    var error = $root.ics23.BatchProof.verify(message.batch);\n                    if (error)\n                        return \"batch.\" + error;\n                }\n            }\n            if (message.compressed != null && message.hasOwnProperty(\"compressed\")) {\n                if (properties.proof === 1)\n                    return \"proof: multiple values\";\n                properties.proof = 1;\n                {\n                    var error = $root.ics23.CompressedBatchProof.verify(message.compressed);\n                    if (error)\n                        return \"compressed.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a CommitmentProof message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof ics23.CommitmentProof\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {ics23.CommitmentProof} CommitmentProof\n         */\n        CommitmentProof.fromObject = function fromObject(object) {\n            if (object instanceof $root.ics23.CommitmentProof)\n                return object;\n            var message = new $root.ics23.CommitmentProof();\n            if (object.exist != null) {\n                if (typeof object.exist !== \"object\")\n                    throw TypeError(\".ics23.CommitmentProof.exist: object expected\");\n                message.exist = $root.ics23.ExistenceProof.fromObject(object.exist);\n            }\n            if (object.nonexist != null) {\n                if (typeof object.nonexist !== \"object\")\n                    throw TypeError(\".ics23.CommitmentProof.nonexist: object expected\");\n                message.nonexist = $root.ics23.NonExistenceProof.fromObject(object.nonexist);\n            }\n            if (object.batch != null) {\n                if (typeof object.batch !== \"object\")\n                    throw TypeError(\".ics23.CommitmentProof.batch: object expected\");\n                message.batch = $root.ics23.BatchProof.fromObject(object.batch);\n            }\n            if (object.compressed != null) {\n                if (typeof object.compressed !== \"object\")\n                    throw TypeError(\".ics23.CommitmentProof.compressed: object expected\");\n                message.compressed = $root.ics23.CompressedBatchProof.fromObject(object.compressed);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a CommitmentProof message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof ics23.CommitmentProof\n         * @static\n         * @param {ics23.CommitmentProof} message CommitmentProof\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        CommitmentProof.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (message.exist != null && message.hasOwnProperty(\"exist\")) {\n                object.exist = $root.ics23.ExistenceProof.toObject(message.exist, options);\n                if (options.oneofs)\n                    object.proof = \"exist\";\n            }\n            if (message.nonexist != null && message.hasOwnProperty(\"nonexist\")) {\n                object.nonexist = $root.ics23.NonExistenceProof.toObject(message.nonexist, options);\n                if (options.oneofs)\n                    object.proof = \"nonexist\";\n            }\n            if (message.batch != null && message.hasOwnProperty(\"batch\")) {\n                object.batch = $root.ics23.BatchProof.toObject(message.batch, options);\n                if (options.oneofs)\n                    object.proof = \"batch\";\n            }\n            if (message.compressed != null && message.hasOwnProperty(\"compressed\")) {\n                object.compressed = $root.ics23.CompressedBatchProof.toObject(message.compressed, options);\n                if (options.oneofs)\n                    object.proof = \"compressed\";\n            }\n            return object;\n        };\n\n        /**\n         * Converts this CommitmentProof to JSON.\n         * @function toJSON\n         * @memberof ics23.CommitmentProof\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        CommitmentProof.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return CommitmentProof;\n    })();\n\n    ics23.LeafOp = (function() {\n\n        /**\n         * Properties of a LeafOp.\n         * @memberof ics23\n         * @interface ILeafOp\n         * @property {ics23.HashOp|null} [hash] LeafOp hash\n         * @property {ics23.HashOp|null} [prehashKey] LeafOp prehashKey\n         * @property {ics23.HashOp|null} [prehashValue] LeafOp prehashValue\n         * @property {ics23.LengthOp|null} [length] LeafOp length\n         * @property {Uint8Array|null} [prefix] LeafOp prefix\n         */\n\n        /**\n         * Constructs a new LeafOp.\n         * @memberof ics23\n         * @classdesc LeafOp represents the raw key-value data we wish to prove, and\n         * must be flexible to represent the internal transformation from\n         * the original key-value pairs into the basis hash, for many existing\n         * merkle trees.\n         * \n         * key and value are passed in. So that the signature of this operation is:\n         * leafOp(key, value) -> output\n         * \n         * To process this, first prehash the keys and values if needed (ANY means no hash in this case):\n         * hkey = prehashKey(key)\n         * hvalue = prehashValue(value)\n         * \n         * Then combine the bytes, and hash it\n         * output = hash(prefix || length(hkey) || hkey || length(hvalue) || hvalue)\n         * @implements ILeafOp\n         * @constructor\n         * @param {ics23.ILeafOp=} [properties] Properties to set\n         */\n        function LeafOp(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * LeafOp hash.\n         * @member {ics23.HashOp} hash\n         * @memberof ics23.LeafOp\n         * @instance\n         */\n        LeafOp.prototype.hash = 0;\n\n        /**\n         * LeafOp prehashKey.\n         * @member {ics23.HashOp} prehashKey\n         * @memberof ics23.LeafOp\n         * @instance\n         */\n        LeafOp.prototype.prehashKey = 0;\n\n        /**\n         * LeafOp prehashValue.\n         * @member {ics23.HashOp} prehashValue\n         * @memberof ics23.LeafOp\n         * @instance\n         */\n        LeafOp.prototype.prehashValue = 0;\n\n        /**\n         * LeafOp length.\n         * @member {ics23.LengthOp} length\n         * @memberof ics23.LeafOp\n         * @instance\n         */\n        LeafOp.prototype.length = 0;\n\n        /**\n         * LeafOp prefix.\n         * @member {Uint8Array} prefix\n         * @memberof ics23.LeafOp\n         * @instance\n         */\n        LeafOp.prototype.prefix = $util.newBuffer([]);\n\n        /**\n         * Creates a new LeafOp instance using the specified properties.\n         * @function create\n         * @memberof ics23.LeafOp\n         * @static\n         * @param {ics23.ILeafOp=} [properties] Properties to set\n         * @returns {ics23.LeafOp} LeafOp instance\n         */\n        LeafOp.create = function create(properties) {\n            return new LeafOp(properties);\n        };\n\n        /**\n         * Encodes the specified LeafOp message. Does not implicitly {@link ics23.LeafOp.verify|verify} messages.\n         * @function encode\n         * @memberof ics23.LeafOp\n         * @static\n         * @param {ics23.ILeafOp} message LeafOp message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        LeafOp.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.hash != null && message.hasOwnProperty(\"hash\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.hash);\n            if (message.prehashKey != null && message.hasOwnProperty(\"prehashKey\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.prehashKey);\n            if (message.prehashValue != null && message.hasOwnProperty(\"prehashValue\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.prehashValue);\n            if (message.length != null && message.hasOwnProperty(\"length\"))\n                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.length);\n            if (message.prefix != null && message.hasOwnProperty(\"prefix\"))\n                writer.uint32(/* id 5, wireType 2 =*/42).bytes(message.prefix);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified LeafOp message, length delimited. Does not implicitly {@link ics23.LeafOp.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof ics23.LeafOp\n         * @static\n         * @param {ics23.ILeafOp} message LeafOp message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        LeafOp.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a LeafOp message from the specified reader or buffer.\n         * @function decode\n         * @memberof ics23.LeafOp\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {ics23.LeafOp} LeafOp\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        LeafOp.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ics23.LeafOp();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.hash = reader.int32();\n                    break;\n                case 2:\n                    message.prehashKey = reader.int32();\n                    break;\n                case 3:\n                    message.prehashValue = reader.int32();\n                    break;\n                case 4:\n                    message.length = reader.int32();\n                    break;\n                case 5:\n                    message.prefix = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a LeafOp message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof ics23.LeafOp\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {ics23.LeafOp} LeafOp\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        LeafOp.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a LeafOp message.\n         * @function verify\n         * @memberof ics23.LeafOp\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        LeafOp.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.hash != null && message.hasOwnProperty(\"hash\"))\n                switch (message.hash) {\n                default:\n                    return \"hash: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 5:\n                    break;\n                }\n            if (message.prehashKey != null && message.hasOwnProperty(\"prehashKey\"))\n                switch (message.prehashKey) {\n                default:\n                    return \"prehashKey: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 5:\n                    break;\n                }\n            if (message.prehashValue != null && message.hasOwnProperty(\"prehashValue\"))\n                switch (message.prehashValue) {\n                default:\n                    return \"prehashValue: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 5:\n                    break;\n                }\n            if (message.length != null && message.hasOwnProperty(\"length\"))\n                switch (message.length) {\n                default:\n                    return \"length: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 5:\n                case 6:\n                case 7:\n                case 8:\n                    break;\n                }\n            if (message.prefix != null && message.hasOwnProperty(\"prefix\"))\n                if (!(message.prefix && typeof message.prefix.length === \"number\" || $util.isString(message.prefix)))\n                    return \"prefix: buffer expected\";\n            return null;\n        };\n\n        /**\n         * Creates a LeafOp message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof ics23.LeafOp\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {ics23.LeafOp} LeafOp\n         */\n        LeafOp.fromObject = function fromObject(object) {\n            if (object instanceof $root.ics23.LeafOp)\n                return object;\n            var message = new $root.ics23.LeafOp();\n            switch (object.hash) {\n            case \"NO_HASH\":\n            case 0:\n                message.hash = 0;\n                break;\n            case \"SHA256\":\n            case 1:\n                message.hash = 1;\n                break;\n            case \"SHA512\":\n            case 2:\n                message.hash = 2;\n                break;\n            case \"KECCAK\":\n            case 3:\n                message.hash = 3;\n                break;\n            case \"RIPEMD160\":\n            case 4:\n                message.hash = 4;\n                break;\n            case \"BITCOIN\":\n            case 5:\n                message.hash = 5;\n                break;\n            }\n            switch (object.prehashKey) {\n            case \"NO_HASH\":\n            case 0:\n                message.prehashKey = 0;\n                break;\n            case \"SHA256\":\n            case 1:\n                message.prehashKey = 1;\n                break;\n            case \"SHA512\":\n            case 2:\n                message.prehashKey = 2;\n                break;\n            case \"KECCAK\":\n            case 3:\n                message.prehashKey = 3;\n                break;\n            case \"RIPEMD160\":\n            case 4:\n                message.prehashKey = 4;\n                break;\n            case \"BITCOIN\":\n            case 5:\n                message.prehashKey = 5;\n                break;\n            }\n            switch (object.prehashValue) {\n            case \"NO_HASH\":\n            case 0:\n                message.prehashValue = 0;\n                break;\n            case \"SHA256\":\n            case 1:\n                message.prehashValue = 1;\n                break;\n            case \"SHA512\":\n            case 2:\n                message.prehashValue = 2;\n                break;\n            case \"KECCAK\":\n            case 3:\n                message.prehashValue = 3;\n                break;\n            case \"RIPEMD160\":\n            case 4:\n                message.prehashValue = 4;\n                break;\n            case \"BITCOIN\":\n            case 5:\n                message.prehashValue = 5;\n                break;\n            }\n            switch (object.length) {\n            case \"NO_PREFIX\":\n            case 0:\n                message.length = 0;\n                break;\n            case \"VAR_PROTO\":\n            case 1:\n                message.length = 1;\n                break;\n            case \"VAR_RLP\":\n            case 2:\n                message.length = 2;\n                break;\n            case \"FIXED32_BIG\":\n            case 3:\n                message.length = 3;\n                break;\n            case \"FIXED32_LITTLE\":\n            case 4:\n                message.length = 4;\n                break;\n            case \"FIXED64_BIG\":\n            case 5:\n                message.length = 5;\n                break;\n            case \"FIXED64_LITTLE\":\n            case 6:\n                message.length = 6;\n                break;\n            case \"REQUIRE_32_BYTES\":\n            case 7:\n                message.length = 7;\n                break;\n            case \"REQUIRE_64_BYTES\":\n            case 8:\n                message.length = 8;\n                break;\n            }\n            if (object.prefix != null)\n                if (typeof object.prefix === \"string\")\n                    $util.base64.decode(object.prefix, message.prefix = $util.newBuffer($util.base64.length(object.prefix)), 0);\n                else if (object.prefix.length)\n                    message.prefix = object.prefix;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a LeafOp message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof ics23.LeafOp\n         * @static\n         * @param {ics23.LeafOp} message LeafOp\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        LeafOp.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.hash = options.enums === String ? \"NO_HASH\" : 0;\n                object.prehashKey = options.enums === String ? \"NO_HASH\" : 0;\n                object.prehashValue = options.enums === String ? \"NO_HASH\" : 0;\n                object.length = options.enums === String ? \"NO_PREFIX\" : 0;\n                if (options.bytes === String)\n                    object.prefix = \"\";\n                else {\n                    object.prefix = [];\n                    if (options.bytes !== Array)\n                        object.prefix = $util.newBuffer(object.prefix);\n                }\n            }\n            if (message.hash != null && message.hasOwnProperty(\"hash\"))\n                object.hash = options.enums === String ? $root.ics23.HashOp[message.hash] : message.hash;\n            if (message.prehashKey != null && message.hasOwnProperty(\"prehashKey\"))\n                object.prehashKey = options.enums === String ? $root.ics23.HashOp[message.prehashKey] : message.prehashKey;\n            if (message.prehashValue != null && message.hasOwnProperty(\"prehashValue\"))\n                object.prehashValue = options.enums === String ? $root.ics23.HashOp[message.prehashValue] : message.prehashValue;\n            if (message.length != null && message.hasOwnProperty(\"length\"))\n                object.length = options.enums === String ? $root.ics23.LengthOp[message.length] : message.length;\n            if (message.prefix != null && message.hasOwnProperty(\"prefix\"))\n                object.prefix = options.bytes === String ? $util.base64.encode(message.prefix, 0, message.prefix.length) : options.bytes === Array ? Array.prototype.slice.call(message.prefix) : message.prefix;\n            return object;\n        };\n\n        /**\n         * Converts this LeafOp to JSON.\n         * @function toJSON\n         * @memberof ics23.LeafOp\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        LeafOp.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return LeafOp;\n    })();\n\n    ics23.InnerOp = (function() {\n\n        /**\n         * Properties of an InnerOp.\n         * @memberof ics23\n         * @interface IInnerOp\n         * @property {ics23.HashOp|null} [hash] InnerOp hash\n         * @property {Uint8Array|null} [prefix] InnerOp prefix\n         * @property {Uint8Array|null} [suffix] InnerOp suffix\n         */\n\n        /**\n         * Constructs a new InnerOp.\n         * @memberof ics23\n         * @classdesc InnerOp represents a merkle-proof step that is not a leaf.\n         * It represents concatenating two children and hashing them to provide the next result.\n         * \n         * The result of the previous step is passed in, so the signature of this op is:\n         * innerOp(child) -> output\n         * \n         * The result of applying InnerOp should be:\n         * output = op.hash(op.prefix || child || op.suffix)\n         * \n         * where the || operator is concatenation of binary data,\n         * and child is the result of hashing all the tree below this step.\n         * \n         * Any special data, like prepending child with the length, or prepending the entire operation with\n         * some value to differentiate from leaf nodes, should be included in prefix and suffix.\n         * If either of prefix or suffix is empty, we just treat it as an empty string\n         * @implements IInnerOp\n         * @constructor\n         * @param {ics23.IInnerOp=} [properties] Properties to set\n         */\n        function InnerOp(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * InnerOp hash.\n         * @member {ics23.HashOp} hash\n         * @memberof ics23.InnerOp\n         * @instance\n         */\n        InnerOp.prototype.hash = 0;\n\n        /**\n         * InnerOp prefix.\n         * @member {Uint8Array} prefix\n         * @memberof ics23.InnerOp\n         * @instance\n         */\n        InnerOp.prototype.prefix = $util.newBuffer([]);\n\n        /**\n         * InnerOp suffix.\n         * @member {Uint8Array} suffix\n         * @memberof ics23.InnerOp\n         * @instance\n         */\n        InnerOp.prototype.suffix = $util.newBuffer([]);\n\n        /**\n         * Creates a new InnerOp instance using the specified properties.\n         * @function create\n         * @memberof ics23.InnerOp\n         * @static\n         * @param {ics23.IInnerOp=} [properties] Properties to set\n         * @returns {ics23.InnerOp} InnerOp instance\n         */\n        InnerOp.create = function create(properties) {\n            return new InnerOp(properties);\n        };\n\n        /**\n         * Encodes the specified InnerOp message. Does not implicitly {@link ics23.InnerOp.verify|verify} messages.\n         * @function encode\n         * @memberof ics23.InnerOp\n         * @static\n         * @param {ics23.IInnerOp} message InnerOp message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        InnerOp.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.hash != null && message.hasOwnProperty(\"hash\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.hash);\n            if (message.prefix != null && message.hasOwnProperty(\"prefix\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.prefix);\n            if (message.suffix != null && message.hasOwnProperty(\"suffix\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.suffix);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified InnerOp message, length delimited. Does not implicitly {@link ics23.InnerOp.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof ics23.InnerOp\n         * @static\n         * @param {ics23.IInnerOp} message InnerOp message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        InnerOp.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an InnerOp message from the specified reader or buffer.\n         * @function decode\n         * @memberof ics23.InnerOp\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {ics23.InnerOp} InnerOp\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        InnerOp.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ics23.InnerOp();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.hash = reader.int32();\n                    break;\n                case 2:\n                    message.prefix = reader.bytes();\n                    break;\n                case 3:\n                    message.suffix = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an InnerOp message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof ics23.InnerOp\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {ics23.InnerOp} InnerOp\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        InnerOp.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an InnerOp message.\n         * @function verify\n         * @memberof ics23.InnerOp\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        InnerOp.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.hash != null && message.hasOwnProperty(\"hash\"))\n                switch (message.hash) {\n                default:\n                    return \"hash: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 5:\n                    break;\n                }\n            if (message.prefix != null && message.hasOwnProperty(\"prefix\"))\n                if (!(message.prefix && typeof message.prefix.length === \"number\" || $util.isString(message.prefix)))\n                    return \"prefix: buffer expected\";\n            if (message.suffix != null && message.hasOwnProperty(\"suffix\"))\n                if (!(message.suffix && typeof message.suffix.length === \"number\" || $util.isString(message.suffix)))\n                    return \"suffix: buffer expected\";\n            return null;\n        };\n\n        /**\n         * Creates an InnerOp message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof ics23.InnerOp\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {ics23.InnerOp} InnerOp\n         */\n        InnerOp.fromObject = function fromObject(object) {\n            if (object instanceof $root.ics23.InnerOp)\n                return object;\n            var message = new $root.ics23.InnerOp();\n            switch (object.hash) {\n            case \"NO_HASH\":\n            case 0:\n                message.hash = 0;\n                break;\n            case \"SHA256\":\n            case 1:\n                message.hash = 1;\n                break;\n            case \"SHA512\":\n            case 2:\n                message.hash = 2;\n                break;\n            case \"KECCAK\":\n            case 3:\n                message.hash = 3;\n                break;\n            case \"RIPEMD160\":\n            case 4:\n                message.hash = 4;\n                break;\n            case \"BITCOIN\":\n            case 5:\n                message.hash = 5;\n                break;\n            }\n            if (object.prefix != null)\n                if (typeof object.prefix === \"string\")\n                    $util.base64.decode(object.prefix, message.prefix = $util.newBuffer($util.base64.length(object.prefix)), 0);\n                else if (object.prefix.length)\n                    message.prefix = object.prefix;\n            if (object.suffix != null)\n                if (typeof object.suffix === \"string\")\n                    $util.base64.decode(object.suffix, message.suffix = $util.newBuffer($util.base64.length(object.suffix)), 0);\n                else if (object.suffix.length)\n                    message.suffix = object.suffix;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an InnerOp message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof ics23.InnerOp\n         * @static\n         * @param {ics23.InnerOp} message InnerOp\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        InnerOp.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.hash = options.enums === String ? \"NO_HASH\" : 0;\n                if (options.bytes === String)\n                    object.prefix = \"\";\n                else {\n                    object.prefix = [];\n                    if (options.bytes !== Array)\n                        object.prefix = $util.newBuffer(object.prefix);\n                }\n                if (options.bytes === String)\n                    object.suffix = \"\";\n                else {\n                    object.suffix = [];\n                    if (options.bytes !== Array)\n                        object.suffix = $util.newBuffer(object.suffix);\n                }\n            }\n            if (message.hash != null && message.hasOwnProperty(\"hash\"))\n                object.hash = options.enums === String ? $root.ics23.HashOp[message.hash] : message.hash;\n            if (message.prefix != null && message.hasOwnProperty(\"prefix\"))\n                object.prefix = options.bytes === String ? $util.base64.encode(message.prefix, 0, message.prefix.length) : options.bytes === Array ? Array.prototype.slice.call(message.prefix) : message.prefix;\n            if (message.suffix != null && message.hasOwnProperty(\"suffix\"))\n                object.suffix = options.bytes === String ? $util.base64.encode(message.suffix, 0, message.suffix.length) : options.bytes === Array ? Array.prototype.slice.call(message.suffix) : message.suffix;\n            return object;\n        };\n\n        /**\n         * Converts this InnerOp to JSON.\n         * @function toJSON\n         * @memberof ics23.InnerOp\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        InnerOp.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return InnerOp;\n    })();\n\n    ics23.ProofSpec = (function() {\n\n        /**\n         * Properties of a ProofSpec.\n         * @memberof ics23\n         * @interface IProofSpec\n         * @property {ics23.ILeafOp|null} [leafSpec] ProofSpec leafSpec\n         * @property {ics23.IInnerSpec|null} [innerSpec] ProofSpec innerSpec\n         * @property {number|null} [maxDepth] ProofSpec maxDepth\n         * @property {number|null} [minDepth] ProofSpec minDepth\n         */\n\n        /**\n         * Constructs a new ProofSpec.\n         * @memberof ics23\n         * @classdesc ProofSpec defines what the expected parameters are for a given proof type.\n         * This can be stored in the client and used to validate any incoming proofs.\n         * \n         * verify(ProofSpec, Proof) -> Proof | Error\n         * \n         * As demonstrated in tests, if we don't fix the algorithm used to calculate the\n         * LeafHash for a given tree, there are many possible key-value pairs that can\n         * generate a given hash (by interpretting the preimage differently).\n         * We need this for proper security, requires client knows a priori what\n         * tree format server uses. But not in code, rather a configuration object.\n         * @implements IProofSpec\n         * @constructor\n         * @param {ics23.IProofSpec=} [properties] Properties to set\n         */\n        function ProofSpec(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ProofSpec leafSpec.\n         * @member {ics23.ILeafOp|null|undefined} leafSpec\n         * @memberof ics23.ProofSpec\n         * @instance\n         */\n        ProofSpec.prototype.leafSpec = null;\n\n        /**\n         * ProofSpec innerSpec.\n         * @member {ics23.IInnerSpec|null|undefined} innerSpec\n         * @memberof ics23.ProofSpec\n         * @instance\n         */\n        ProofSpec.prototype.innerSpec = null;\n\n        /**\n         * ProofSpec maxDepth.\n         * @member {number} maxDepth\n         * @memberof ics23.ProofSpec\n         * @instance\n         */\n        ProofSpec.prototype.maxDepth = 0;\n\n        /**\n         * ProofSpec minDepth.\n         * @member {number} minDepth\n         * @memberof ics23.ProofSpec\n         * @instance\n         */\n        ProofSpec.prototype.minDepth = 0;\n\n        /**\n         * Creates a new ProofSpec instance using the specified properties.\n         * @function create\n         * @memberof ics23.ProofSpec\n         * @static\n         * @param {ics23.IProofSpec=} [properties] Properties to set\n         * @returns {ics23.ProofSpec} ProofSpec instance\n         */\n        ProofSpec.create = function create(properties) {\n            return new ProofSpec(properties);\n        };\n\n        /**\n         * Encodes the specified ProofSpec message. Does not implicitly {@link ics23.ProofSpec.verify|verify} messages.\n         * @function encode\n         * @memberof ics23.ProofSpec\n         * @static\n         * @param {ics23.IProofSpec} message ProofSpec message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ProofSpec.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.leafSpec != null && message.hasOwnProperty(\"leafSpec\"))\n                $root.ics23.LeafOp.encode(message.leafSpec, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.innerSpec != null && message.hasOwnProperty(\"innerSpec\"))\n                $root.ics23.InnerSpec.encode(message.innerSpec, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.maxDepth != null && message.hasOwnProperty(\"maxDepth\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.maxDepth);\n            if (message.minDepth != null && message.hasOwnProperty(\"minDepth\"))\n                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.minDepth);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ProofSpec message, length delimited. Does not implicitly {@link ics23.ProofSpec.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof ics23.ProofSpec\n         * @static\n         * @param {ics23.IProofSpec} message ProofSpec message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ProofSpec.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ProofSpec message from the specified reader or buffer.\n         * @function decode\n         * @memberof ics23.ProofSpec\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {ics23.ProofSpec} ProofSpec\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ProofSpec.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ics23.ProofSpec();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.leafSpec = $root.ics23.LeafOp.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.innerSpec = $root.ics23.InnerSpec.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.maxDepth = reader.int32();\n                    break;\n                case 4:\n                    message.minDepth = reader.int32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ProofSpec message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof ics23.ProofSpec\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {ics23.ProofSpec} ProofSpec\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ProofSpec.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ProofSpec message.\n         * @function verify\n         * @memberof ics23.ProofSpec\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ProofSpec.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.leafSpec != null && message.hasOwnProperty(\"leafSpec\")) {\n                var error = $root.ics23.LeafOp.verify(message.leafSpec);\n                if (error)\n                    return \"leafSpec.\" + error;\n            }\n            if (message.innerSpec != null && message.hasOwnProperty(\"innerSpec\")) {\n                var error = $root.ics23.InnerSpec.verify(message.innerSpec);\n                if (error)\n                    return \"innerSpec.\" + error;\n            }\n            if (message.maxDepth != null && message.hasOwnProperty(\"maxDepth\"))\n                if (!$util.isInteger(message.maxDepth))\n                    return \"maxDepth: integer expected\";\n            if (message.minDepth != null && message.hasOwnProperty(\"minDepth\"))\n                if (!$util.isInteger(message.minDepth))\n                    return \"minDepth: integer expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ProofSpec message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof ics23.ProofSpec\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {ics23.ProofSpec} ProofSpec\n         */\n        ProofSpec.fromObject = function fromObject(object) {\n            if (object instanceof $root.ics23.ProofSpec)\n                return object;\n            var message = new $root.ics23.ProofSpec();\n            if (object.leafSpec != null) {\n                if (typeof object.leafSpec !== \"object\")\n                    throw TypeError(\".ics23.ProofSpec.leafSpec: object expected\");\n                message.leafSpec = $root.ics23.LeafOp.fromObject(object.leafSpec);\n            }\n            if (object.innerSpec != null) {\n                if (typeof object.innerSpec !== \"object\")\n                    throw TypeError(\".ics23.ProofSpec.innerSpec: object expected\");\n                message.innerSpec = $root.ics23.InnerSpec.fromObject(object.innerSpec);\n            }\n            if (object.maxDepth != null)\n                message.maxDepth = object.maxDepth | 0;\n            if (object.minDepth != null)\n                message.minDepth = object.minDepth | 0;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ProofSpec message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof ics23.ProofSpec\n         * @static\n         * @param {ics23.ProofSpec} message ProofSpec\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ProofSpec.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.leafSpec = null;\n                object.innerSpec = null;\n                object.maxDepth = 0;\n                object.minDepth = 0;\n            }\n            if (message.leafSpec != null && message.hasOwnProperty(\"leafSpec\"))\n                object.leafSpec = $root.ics23.LeafOp.toObject(message.leafSpec, options);\n            if (message.innerSpec != null && message.hasOwnProperty(\"innerSpec\"))\n                object.innerSpec = $root.ics23.InnerSpec.toObject(message.innerSpec, options);\n            if (message.maxDepth != null && message.hasOwnProperty(\"maxDepth\"))\n                object.maxDepth = message.maxDepth;\n            if (message.minDepth != null && message.hasOwnProperty(\"minDepth\"))\n                object.minDepth = message.minDepth;\n            return object;\n        };\n\n        /**\n         * Converts this ProofSpec to JSON.\n         * @function toJSON\n         * @memberof ics23.ProofSpec\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ProofSpec.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ProofSpec;\n    })();\n\n    ics23.InnerSpec = (function() {\n\n        /**\n         * Properties of an InnerSpec.\n         * @memberof ics23\n         * @interface IInnerSpec\n         * @property {Array.<number>|null} [childOrder] InnerSpec childOrder\n         * @property {number|null} [childSize] InnerSpec childSize\n         * @property {number|null} [minPrefixLength] InnerSpec minPrefixLength\n         * @property {number|null} [maxPrefixLength] InnerSpec maxPrefixLength\n         * @property {Uint8Array|null} [emptyChild] InnerSpec emptyChild\n         * @property {ics23.HashOp|null} [hash] InnerSpec hash\n         */\n\n        /**\n         * Constructs a new InnerSpec.\n         * @memberof ics23\n         * @classdesc Represents an InnerSpec.\n         * @implements IInnerSpec\n         * @constructor\n         * @param {ics23.IInnerSpec=} [properties] Properties to set\n         */\n        function InnerSpec(properties) {\n            this.childOrder = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * InnerSpec childOrder.\n         * @member {Array.<number>} childOrder\n         * @memberof ics23.InnerSpec\n         * @instance\n         */\n        InnerSpec.prototype.childOrder = $util.emptyArray;\n\n        /**\n         * InnerSpec childSize.\n         * @member {number} childSize\n         * @memberof ics23.InnerSpec\n         * @instance\n         */\n        InnerSpec.prototype.childSize = 0;\n\n        /**\n         * InnerSpec minPrefixLength.\n         * @member {number} minPrefixLength\n         * @memberof ics23.InnerSpec\n         * @instance\n         */\n        InnerSpec.prototype.minPrefixLength = 0;\n\n        /**\n         * InnerSpec maxPrefixLength.\n         * @member {number} maxPrefixLength\n         * @memberof ics23.InnerSpec\n         * @instance\n         */\n        InnerSpec.prototype.maxPrefixLength = 0;\n\n        /**\n         * InnerSpec emptyChild.\n         * @member {Uint8Array} emptyChild\n         * @memberof ics23.InnerSpec\n         * @instance\n         */\n        InnerSpec.prototype.emptyChild = $util.newBuffer([]);\n\n        /**\n         * InnerSpec hash.\n         * @member {ics23.HashOp} hash\n         * @memberof ics23.InnerSpec\n         * @instance\n         */\n        InnerSpec.prototype.hash = 0;\n\n        /**\n         * Creates a new InnerSpec instance using the specified properties.\n         * @function create\n         * @memberof ics23.InnerSpec\n         * @static\n         * @param {ics23.IInnerSpec=} [properties] Properties to set\n         * @returns {ics23.InnerSpec} InnerSpec instance\n         */\n        InnerSpec.create = function create(properties) {\n            return new InnerSpec(properties);\n        };\n\n        /**\n         * Encodes the specified InnerSpec message. Does not implicitly {@link ics23.InnerSpec.verify|verify} messages.\n         * @function encode\n         * @memberof ics23.InnerSpec\n         * @static\n         * @param {ics23.IInnerSpec} message InnerSpec message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        InnerSpec.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.childOrder != null && message.childOrder.length) {\n                writer.uint32(/* id 1, wireType 2 =*/10).fork();\n                for (var i = 0; i < message.childOrder.length; ++i)\n                    writer.int32(message.childOrder[i]);\n                writer.ldelim();\n            }\n            if (message.childSize != null && message.hasOwnProperty(\"childSize\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.childSize);\n            if (message.minPrefixLength != null && message.hasOwnProperty(\"minPrefixLength\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.minPrefixLength);\n            if (message.maxPrefixLength != null && message.hasOwnProperty(\"maxPrefixLength\"))\n                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.maxPrefixLength);\n            if (message.emptyChild != null && message.hasOwnProperty(\"emptyChild\"))\n                writer.uint32(/* id 5, wireType 2 =*/42).bytes(message.emptyChild);\n            if (message.hash != null && message.hasOwnProperty(\"hash\"))\n                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.hash);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified InnerSpec message, length delimited. Does not implicitly {@link ics23.InnerSpec.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof ics23.InnerSpec\n         * @static\n         * @param {ics23.IInnerSpec} message InnerSpec message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        InnerSpec.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an InnerSpec message from the specified reader or buffer.\n         * @function decode\n         * @memberof ics23.InnerSpec\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {ics23.InnerSpec} InnerSpec\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        InnerSpec.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ics23.InnerSpec();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.childOrder && message.childOrder.length))\n                        message.childOrder = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.childOrder.push(reader.int32());\n                    } else\n                        message.childOrder.push(reader.int32());\n                    break;\n                case 2:\n                    message.childSize = reader.int32();\n                    break;\n                case 3:\n                    message.minPrefixLength = reader.int32();\n                    break;\n                case 4:\n                    message.maxPrefixLength = reader.int32();\n                    break;\n                case 5:\n                    message.emptyChild = reader.bytes();\n                    break;\n                case 6:\n                    message.hash = reader.int32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an InnerSpec message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof ics23.InnerSpec\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {ics23.InnerSpec} InnerSpec\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        InnerSpec.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an InnerSpec message.\n         * @function verify\n         * @memberof ics23.InnerSpec\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        InnerSpec.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.childOrder != null && message.hasOwnProperty(\"childOrder\")) {\n                if (!Array.isArray(message.childOrder))\n                    return \"childOrder: array expected\";\n                for (var i = 0; i < message.childOrder.length; ++i)\n                    if (!$util.isInteger(message.childOrder[i]))\n                        return \"childOrder: integer[] expected\";\n            }\n            if (message.childSize != null && message.hasOwnProperty(\"childSize\"))\n                if (!$util.isInteger(message.childSize))\n                    return \"childSize: integer expected\";\n            if (message.minPrefixLength != null && message.hasOwnProperty(\"minPrefixLength\"))\n                if (!$util.isInteger(message.minPrefixLength))\n                    return \"minPrefixLength: integer expected\";\n            if (message.maxPrefixLength != null && message.hasOwnProperty(\"maxPrefixLength\"))\n                if (!$util.isInteger(message.maxPrefixLength))\n                    return \"maxPrefixLength: integer expected\";\n            if (message.emptyChild != null && message.hasOwnProperty(\"emptyChild\"))\n                if (!(message.emptyChild && typeof message.emptyChild.length === \"number\" || $util.isString(message.emptyChild)))\n                    return \"emptyChild: buffer expected\";\n            if (message.hash != null && message.hasOwnProperty(\"hash\"))\n                switch (message.hash) {\n                default:\n                    return \"hash: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 5:\n                    break;\n                }\n            return null;\n        };\n\n        /**\n         * Creates an InnerSpec message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof ics23.InnerSpec\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {ics23.InnerSpec} InnerSpec\n         */\n        InnerSpec.fromObject = function fromObject(object) {\n            if (object instanceof $root.ics23.InnerSpec)\n                return object;\n            var message = new $root.ics23.InnerSpec();\n            if (object.childOrder) {\n                if (!Array.isArray(object.childOrder))\n                    throw TypeError(\".ics23.InnerSpec.childOrder: array expected\");\n                message.childOrder = [];\n                for (var i = 0; i < object.childOrder.length; ++i)\n                    message.childOrder[i] = object.childOrder[i] | 0;\n            }\n            if (object.childSize != null)\n                message.childSize = object.childSize | 0;\n            if (object.minPrefixLength != null)\n                message.minPrefixLength = object.minPrefixLength | 0;\n            if (object.maxPrefixLength != null)\n                message.maxPrefixLength = object.maxPrefixLength | 0;\n            if (object.emptyChild != null)\n                if (typeof object.emptyChild === \"string\")\n                    $util.base64.decode(object.emptyChild, message.emptyChild = $util.newBuffer($util.base64.length(object.emptyChild)), 0);\n                else if (object.emptyChild.length)\n                    message.emptyChild = object.emptyChild;\n            switch (object.hash) {\n            case \"NO_HASH\":\n            case 0:\n                message.hash = 0;\n                break;\n            case \"SHA256\":\n            case 1:\n                message.hash = 1;\n                break;\n            case \"SHA512\":\n            case 2:\n                message.hash = 2;\n                break;\n            case \"KECCAK\":\n            case 3:\n                message.hash = 3;\n                break;\n            case \"RIPEMD160\":\n            case 4:\n                message.hash = 4;\n                break;\n            case \"BITCOIN\":\n            case 5:\n                message.hash = 5;\n                break;\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an InnerSpec message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof ics23.InnerSpec\n         * @static\n         * @param {ics23.InnerSpec} message InnerSpec\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        InnerSpec.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.childOrder = [];\n            if (options.defaults) {\n                object.childSize = 0;\n                object.minPrefixLength = 0;\n                object.maxPrefixLength = 0;\n                if (options.bytes === String)\n                    object.emptyChild = \"\";\n                else {\n                    object.emptyChild = [];\n                    if (options.bytes !== Array)\n                        object.emptyChild = $util.newBuffer(object.emptyChild);\n                }\n                object.hash = options.enums === String ? \"NO_HASH\" : 0;\n            }\n            if (message.childOrder && message.childOrder.length) {\n                object.childOrder = [];\n                for (var j = 0; j < message.childOrder.length; ++j)\n                    object.childOrder[j] = message.childOrder[j];\n            }\n            if (message.childSize != null && message.hasOwnProperty(\"childSize\"))\n                object.childSize = message.childSize;\n            if (message.minPrefixLength != null && message.hasOwnProperty(\"minPrefixLength\"))\n                object.minPrefixLength = message.minPrefixLength;\n            if (message.maxPrefixLength != null && message.hasOwnProperty(\"maxPrefixLength\"))\n                object.maxPrefixLength = message.maxPrefixLength;\n            if (message.emptyChild != null && message.hasOwnProperty(\"emptyChild\"))\n                object.emptyChild = options.bytes === String ? $util.base64.encode(message.emptyChild, 0, message.emptyChild.length) : options.bytes === Array ? Array.prototype.slice.call(message.emptyChild) : message.emptyChild;\n            if (message.hash != null && message.hasOwnProperty(\"hash\"))\n                object.hash = options.enums === String ? $root.ics23.HashOp[message.hash] : message.hash;\n            return object;\n        };\n\n        /**\n         * Converts this InnerSpec to JSON.\n         * @function toJSON\n         * @memberof ics23.InnerSpec\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        InnerSpec.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return InnerSpec;\n    })();\n\n    ics23.BatchProof = (function() {\n\n        /**\n         * Properties of a BatchProof.\n         * @memberof ics23\n         * @interface IBatchProof\n         * @property {Array.<ics23.IBatchEntry>|null} [entries] BatchProof entries\n         */\n\n        /**\n         * Constructs a new BatchProof.\n         * @memberof ics23\n         * @classdesc Represents a BatchProof.\n         * @implements IBatchProof\n         * @constructor\n         * @param {ics23.IBatchProof=} [properties] Properties to set\n         */\n        function BatchProof(properties) {\n            this.entries = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * BatchProof entries.\n         * @member {Array.<ics23.IBatchEntry>} entries\n         * @memberof ics23.BatchProof\n         * @instance\n         */\n        BatchProof.prototype.entries = $util.emptyArray;\n\n        /**\n         * Creates a new BatchProof instance using the specified properties.\n         * @function create\n         * @memberof ics23.BatchProof\n         * @static\n         * @param {ics23.IBatchProof=} [properties] Properties to set\n         * @returns {ics23.BatchProof} BatchProof instance\n         */\n        BatchProof.create = function create(properties) {\n            return new BatchProof(properties);\n        };\n\n        /**\n         * Encodes the specified BatchProof message. Does not implicitly {@link ics23.BatchProof.verify|verify} messages.\n         * @function encode\n         * @memberof ics23.BatchProof\n         * @static\n         * @param {ics23.IBatchProof} message BatchProof message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        BatchProof.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.entries != null && message.entries.length)\n                for (var i = 0; i < message.entries.length; ++i)\n                    $root.ics23.BatchEntry.encode(message.entries[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified BatchProof message, length delimited. Does not implicitly {@link ics23.BatchProof.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof ics23.BatchProof\n         * @static\n         * @param {ics23.IBatchProof} message BatchProof message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        BatchProof.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a BatchProof message from the specified reader or buffer.\n         * @function decode\n         * @memberof ics23.BatchProof\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {ics23.BatchProof} BatchProof\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        BatchProof.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ics23.BatchProof();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.entries && message.entries.length))\n                        message.entries = [];\n                    message.entries.push($root.ics23.BatchEntry.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a BatchProof message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof ics23.BatchProof\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {ics23.BatchProof} BatchProof\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        BatchProof.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a BatchProof message.\n         * @function verify\n         * @memberof ics23.BatchProof\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        BatchProof.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.entries != null && message.hasOwnProperty(\"entries\")) {\n                if (!Array.isArray(message.entries))\n                    return \"entries: array expected\";\n                for (var i = 0; i < message.entries.length; ++i) {\n                    var error = $root.ics23.BatchEntry.verify(message.entries[i]);\n                    if (error)\n                        return \"entries.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a BatchProof message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof ics23.BatchProof\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {ics23.BatchProof} BatchProof\n         */\n        BatchProof.fromObject = function fromObject(object) {\n            if (object instanceof $root.ics23.BatchProof)\n                return object;\n            var message = new $root.ics23.BatchProof();\n            if (object.entries) {\n                if (!Array.isArray(object.entries))\n                    throw TypeError(\".ics23.BatchProof.entries: array expected\");\n                message.entries = [];\n                for (var i = 0; i < object.entries.length; ++i) {\n                    if (typeof object.entries[i] !== \"object\")\n                        throw TypeError(\".ics23.BatchProof.entries: object expected\");\n                    message.entries[i] = $root.ics23.BatchEntry.fromObject(object.entries[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a BatchProof message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof ics23.BatchProof\n         * @static\n         * @param {ics23.BatchProof} message BatchProof\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        BatchProof.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.entries = [];\n            if (message.entries && message.entries.length) {\n                object.entries = [];\n                for (var j = 0; j < message.entries.length; ++j)\n                    object.entries[j] = $root.ics23.BatchEntry.toObject(message.entries[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this BatchProof to JSON.\n         * @function toJSON\n         * @memberof ics23.BatchProof\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        BatchProof.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return BatchProof;\n    })();\n\n    ics23.BatchEntry = (function() {\n\n        /**\n         * Properties of a BatchEntry.\n         * @memberof ics23\n         * @interface IBatchEntry\n         * @property {ics23.IExistenceProof|null} [exist] BatchEntry exist\n         * @property {ics23.INonExistenceProof|null} [nonexist] BatchEntry nonexist\n         */\n\n        /**\n         * Constructs a new BatchEntry.\n         * @memberof ics23\n         * @classdesc Represents a BatchEntry.\n         * @implements IBatchEntry\n         * @constructor\n         * @param {ics23.IBatchEntry=} [properties] Properties to set\n         */\n        function BatchEntry(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * BatchEntry exist.\n         * @member {ics23.IExistenceProof|null|undefined} exist\n         * @memberof ics23.BatchEntry\n         * @instance\n         */\n        BatchEntry.prototype.exist = null;\n\n        /**\n         * BatchEntry nonexist.\n         * @member {ics23.INonExistenceProof|null|undefined} nonexist\n         * @memberof ics23.BatchEntry\n         * @instance\n         */\n        BatchEntry.prototype.nonexist = null;\n\n        // OneOf field names bound to virtual getters and setters\n        var $oneOfFields;\n\n        /**\n         * BatchEntry proof.\n         * @member {\"exist\"|\"nonexist\"|undefined} proof\n         * @memberof ics23.BatchEntry\n         * @instance\n         */\n        Object.defineProperty(BatchEntry.prototype, \"proof\", {\n            get: $util.oneOfGetter($oneOfFields = [\"exist\", \"nonexist\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new BatchEntry instance using the specified properties.\n         * @function create\n         * @memberof ics23.BatchEntry\n         * @static\n         * @param {ics23.IBatchEntry=} [properties] Properties to set\n         * @returns {ics23.BatchEntry} BatchEntry instance\n         */\n        BatchEntry.create = function create(properties) {\n            return new BatchEntry(properties);\n        };\n\n        /**\n         * Encodes the specified BatchEntry message. Does not implicitly {@link ics23.BatchEntry.verify|verify} messages.\n         * @function encode\n         * @memberof ics23.BatchEntry\n         * @static\n         * @param {ics23.IBatchEntry} message BatchEntry message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        BatchEntry.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.exist != null && message.hasOwnProperty(\"exist\"))\n                $root.ics23.ExistenceProof.encode(message.exist, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.nonexist != null && message.hasOwnProperty(\"nonexist\"))\n                $root.ics23.NonExistenceProof.encode(message.nonexist, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified BatchEntry message, length delimited. Does not implicitly {@link ics23.BatchEntry.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof ics23.BatchEntry\n         * @static\n         * @param {ics23.IBatchEntry} message BatchEntry message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        BatchEntry.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a BatchEntry message from the specified reader or buffer.\n         * @function decode\n         * @memberof ics23.BatchEntry\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {ics23.BatchEntry} BatchEntry\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        BatchEntry.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ics23.BatchEntry();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.exist = $root.ics23.ExistenceProof.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.nonexist = $root.ics23.NonExistenceProof.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a BatchEntry message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof ics23.BatchEntry\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {ics23.BatchEntry} BatchEntry\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        BatchEntry.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a BatchEntry message.\n         * @function verify\n         * @memberof ics23.BatchEntry\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        BatchEntry.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            var properties = {};\n            if (message.exist != null && message.hasOwnProperty(\"exist\")) {\n                properties.proof = 1;\n                {\n                    var error = $root.ics23.ExistenceProof.verify(message.exist);\n                    if (error)\n                        return \"exist.\" + error;\n                }\n            }\n            if (message.nonexist != null && message.hasOwnProperty(\"nonexist\")) {\n                if (properties.proof === 1)\n                    return \"proof: multiple values\";\n                properties.proof = 1;\n                {\n                    var error = $root.ics23.NonExistenceProof.verify(message.nonexist);\n                    if (error)\n                        return \"nonexist.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a BatchEntry message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof ics23.BatchEntry\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {ics23.BatchEntry} BatchEntry\n         */\n        BatchEntry.fromObject = function fromObject(object) {\n            if (object instanceof $root.ics23.BatchEntry)\n                return object;\n            var message = new $root.ics23.BatchEntry();\n            if (object.exist != null) {\n                if (typeof object.exist !== \"object\")\n                    throw TypeError(\".ics23.BatchEntry.exist: object expected\");\n                message.exist = $root.ics23.ExistenceProof.fromObject(object.exist);\n            }\n            if (object.nonexist != null) {\n                if (typeof object.nonexist !== \"object\")\n                    throw TypeError(\".ics23.BatchEntry.nonexist: object expected\");\n                message.nonexist = $root.ics23.NonExistenceProof.fromObject(object.nonexist);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a BatchEntry message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof ics23.BatchEntry\n         * @static\n         * @param {ics23.BatchEntry} message BatchEntry\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        BatchEntry.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (message.exist != null && message.hasOwnProperty(\"exist\")) {\n                object.exist = $root.ics23.ExistenceProof.toObject(message.exist, options);\n                if (options.oneofs)\n                    object.proof = \"exist\";\n            }\n            if (message.nonexist != null && message.hasOwnProperty(\"nonexist\")) {\n                object.nonexist = $root.ics23.NonExistenceProof.toObject(message.nonexist, options);\n                if (options.oneofs)\n                    object.proof = \"nonexist\";\n            }\n            return object;\n        };\n\n        /**\n         * Converts this BatchEntry to JSON.\n         * @function toJSON\n         * @memberof ics23.BatchEntry\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        BatchEntry.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return BatchEntry;\n    })();\n\n    ics23.CompressedBatchProof = (function() {\n\n        /**\n         * Properties of a CompressedBatchProof.\n         * @memberof ics23\n         * @interface ICompressedBatchProof\n         * @property {Array.<ics23.ICompressedBatchEntry>|null} [entries] CompressedBatchProof entries\n         * @property {Array.<ics23.IInnerOp>|null} [lookupInners] CompressedBatchProof lookupInners\n         */\n\n        /**\n         * Constructs a new CompressedBatchProof.\n         * @memberof ics23\n         * @classdesc Represents a CompressedBatchProof.\n         * @implements ICompressedBatchProof\n         * @constructor\n         * @param {ics23.ICompressedBatchProof=} [properties] Properties to set\n         */\n        function CompressedBatchProof(properties) {\n            this.entries = [];\n            this.lookupInners = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * CompressedBatchProof entries.\n         * @member {Array.<ics23.ICompressedBatchEntry>} entries\n         * @memberof ics23.CompressedBatchProof\n         * @instance\n         */\n        CompressedBatchProof.prototype.entries = $util.emptyArray;\n\n        /**\n         * CompressedBatchProof lookupInners.\n         * @member {Array.<ics23.IInnerOp>} lookupInners\n         * @memberof ics23.CompressedBatchProof\n         * @instance\n         */\n        CompressedBatchProof.prototype.lookupInners = $util.emptyArray;\n\n        /**\n         * Creates a new CompressedBatchProof instance using the specified properties.\n         * @function create\n         * @memberof ics23.CompressedBatchProof\n         * @static\n         * @param {ics23.ICompressedBatchProof=} [properties] Properties to set\n         * @returns {ics23.CompressedBatchProof} CompressedBatchProof instance\n         */\n        CompressedBatchProof.create = function create(properties) {\n            return new CompressedBatchProof(properties);\n        };\n\n        /**\n         * Encodes the specified CompressedBatchProof message. Does not implicitly {@link ics23.CompressedBatchProof.verify|verify} messages.\n         * @function encode\n         * @memberof ics23.CompressedBatchProof\n         * @static\n         * @param {ics23.ICompressedBatchProof} message CompressedBatchProof message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CompressedBatchProof.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.entries != null && message.entries.length)\n                for (var i = 0; i < message.entries.length; ++i)\n                    $root.ics23.CompressedBatchEntry.encode(message.entries[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.lookupInners != null && message.lookupInners.length)\n                for (var i = 0; i < message.lookupInners.length; ++i)\n                    $root.ics23.InnerOp.encode(message.lookupInners[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified CompressedBatchProof message, length delimited. Does not implicitly {@link ics23.CompressedBatchProof.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof ics23.CompressedBatchProof\n         * @static\n         * @param {ics23.ICompressedBatchProof} message CompressedBatchProof message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CompressedBatchProof.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a CompressedBatchProof message from the specified reader or buffer.\n         * @function decode\n         * @memberof ics23.CompressedBatchProof\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {ics23.CompressedBatchProof} CompressedBatchProof\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CompressedBatchProof.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ics23.CompressedBatchProof();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.entries && message.entries.length))\n                        message.entries = [];\n                    message.entries.push($root.ics23.CompressedBatchEntry.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    if (!(message.lookupInners && message.lookupInners.length))\n                        message.lookupInners = [];\n                    message.lookupInners.push($root.ics23.InnerOp.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a CompressedBatchProof message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof ics23.CompressedBatchProof\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {ics23.CompressedBatchProof} CompressedBatchProof\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CompressedBatchProof.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a CompressedBatchProof message.\n         * @function verify\n         * @memberof ics23.CompressedBatchProof\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        CompressedBatchProof.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.entries != null && message.hasOwnProperty(\"entries\")) {\n                if (!Array.isArray(message.entries))\n                    return \"entries: array expected\";\n                for (var i = 0; i < message.entries.length; ++i) {\n                    var error = $root.ics23.CompressedBatchEntry.verify(message.entries[i]);\n                    if (error)\n                        return \"entries.\" + error;\n                }\n            }\n            if (message.lookupInners != null && message.hasOwnProperty(\"lookupInners\")) {\n                if (!Array.isArray(message.lookupInners))\n                    return \"lookupInners: array expected\";\n                for (var i = 0; i < message.lookupInners.length; ++i) {\n                    var error = $root.ics23.InnerOp.verify(message.lookupInners[i]);\n                    if (error)\n                        return \"lookupInners.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a CompressedBatchProof message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof ics23.CompressedBatchProof\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {ics23.CompressedBatchProof} CompressedBatchProof\n         */\n        CompressedBatchProof.fromObject = function fromObject(object) {\n            if (object instanceof $root.ics23.CompressedBatchProof)\n                return object;\n            var message = new $root.ics23.CompressedBatchProof();\n            if (object.entries) {\n                if (!Array.isArray(object.entries))\n                    throw TypeError(\".ics23.CompressedBatchProof.entries: array expected\");\n                message.entries = [];\n                for (var i = 0; i < object.entries.length; ++i) {\n                    if (typeof object.entries[i] !== \"object\")\n                        throw TypeError(\".ics23.CompressedBatchProof.entries: object expected\");\n                    message.entries[i] = $root.ics23.CompressedBatchEntry.fromObject(object.entries[i]);\n                }\n            }\n            if (object.lookupInners) {\n                if (!Array.isArray(object.lookupInners))\n                    throw TypeError(\".ics23.CompressedBatchProof.lookupInners: array expected\");\n                message.lookupInners = [];\n                for (var i = 0; i < object.lookupInners.length; ++i) {\n                    if (typeof object.lookupInners[i] !== \"object\")\n                        throw TypeError(\".ics23.CompressedBatchProof.lookupInners: object expected\");\n                    message.lookupInners[i] = $root.ics23.InnerOp.fromObject(object.lookupInners[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a CompressedBatchProof message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof ics23.CompressedBatchProof\n         * @static\n         * @param {ics23.CompressedBatchProof} message CompressedBatchProof\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        CompressedBatchProof.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.entries = [];\n                object.lookupInners = [];\n            }\n            if (message.entries && message.entries.length) {\n                object.entries = [];\n                for (var j = 0; j < message.entries.length; ++j)\n                    object.entries[j] = $root.ics23.CompressedBatchEntry.toObject(message.entries[j], options);\n            }\n            if (message.lookupInners && message.lookupInners.length) {\n                object.lookupInners = [];\n                for (var j = 0; j < message.lookupInners.length; ++j)\n                    object.lookupInners[j] = $root.ics23.InnerOp.toObject(message.lookupInners[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this CompressedBatchProof to JSON.\n         * @function toJSON\n         * @memberof ics23.CompressedBatchProof\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        CompressedBatchProof.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return CompressedBatchProof;\n    })();\n\n    ics23.CompressedBatchEntry = (function() {\n\n        /**\n         * Properties of a CompressedBatchEntry.\n         * @memberof ics23\n         * @interface ICompressedBatchEntry\n         * @property {ics23.ICompressedExistenceProof|null} [exist] CompressedBatchEntry exist\n         * @property {ics23.ICompressedNonExistenceProof|null} [nonexist] CompressedBatchEntry nonexist\n         */\n\n        /**\n         * Constructs a new CompressedBatchEntry.\n         * @memberof ics23\n         * @classdesc Represents a CompressedBatchEntry.\n         * @implements ICompressedBatchEntry\n         * @constructor\n         * @param {ics23.ICompressedBatchEntry=} [properties] Properties to set\n         */\n        function CompressedBatchEntry(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * CompressedBatchEntry exist.\n         * @member {ics23.ICompressedExistenceProof|null|undefined} exist\n         * @memberof ics23.CompressedBatchEntry\n         * @instance\n         */\n        CompressedBatchEntry.prototype.exist = null;\n\n        /**\n         * CompressedBatchEntry nonexist.\n         * @member {ics23.ICompressedNonExistenceProof|null|undefined} nonexist\n         * @memberof ics23.CompressedBatchEntry\n         * @instance\n         */\n        CompressedBatchEntry.prototype.nonexist = null;\n\n        // OneOf field names bound to virtual getters and setters\n        var $oneOfFields;\n\n        /**\n         * CompressedBatchEntry proof.\n         * @member {\"exist\"|\"nonexist\"|undefined} proof\n         * @memberof ics23.CompressedBatchEntry\n         * @instance\n         */\n        Object.defineProperty(CompressedBatchEntry.prototype, \"proof\", {\n            get: $util.oneOfGetter($oneOfFields = [\"exist\", \"nonexist\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new CompressedBatchEntry instance using the specified properties.\n         * @function create\n         * @memberof ics23.CompressedBatchEntry\n         * @static\n         * @param {ics23.ICompressedBatchEntry=} [properties] Properties to set\n         * @returns {ics23.CompressedBatchEntry} CompressedBatchEntry instance\n         */\n        CompressedBatchEntry.create = function create(properties) {\n            return new CompressedBatchEntry(properties);\n        };\n\n        /**\n         * Encodes the specified CompressedBatchEntry message. Does not implicitly {@link ics23.CompressedBatchEntry.verify|verify} messages.\n         * @function encode\n         * @memberof ics23.CompressedBatchEntry\n         * @static\n         * @param {ics23.ICompressedBatchEntry} message CompressedBatchEntry message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CompressedBatchEntry.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.exist != null && message.hasOwnProperty(\"exist\"))\n                $root.ics23.CompressedExistenceProof.encode(message.exist, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.nonexist != null && message.hasOwnProperty(\"nonexist\"))\n                $root.ics23.CompressedNonExistenceProof.encode(message.nonexist, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified CompressedBatchEntry message, length delimited. Does not implicitly {@link ics23.CompressedBatchEntry.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof ics23.CompressedBatchEntry\n         * @static\n         * @param {ics23.ICompressedBatchEntry} message CompressedBatchEntry message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CompressedBatchEntry.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a CompressedBatchEntry message from the specified reader or buffer.\n         * @function decode\n         * @memberof ics23.CompressedBatchEntry\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {ics23.CompressedBatchEntry} CompressedBatchEntry\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CompressedBatchEntry.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ics23.CompressedBatchEntry();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.exist = $root.ics23.CompressedExistenceProof.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.nonexist = $root.ics23.CompressedNonExistenceProof.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a CompressedBatchEntry message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof ics23.CompressedBatchEntry\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {ics23.CompressedBatchEntry} CompressedBatchEntry\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CompressedBatchEntry.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a CompressedBatchEntry message.\n         * @function verify\n         * @memberof ics23.CompressedBatchEntry\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        CompressedBatchEntry.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            var properties = {};\n            if (message.exist != null && message.hasOwnProperty(\"exist\")) {\n                properties.proof = 1;\n                {\n                    var error = $root.ics23.CompressedExistenceProof.verify(message.exist);\n                    if (error)\n                        return \"exist.\" + error;\n                }\n            }\n            if (message.nonexist != null && message.hasOwnProperty(\"nonexist\")) {\n                if (properties.proof === 1)\n                    return \"proof: multiple values\";\n                properties.proof = 1;\n                {\n                    var error = $root.ics23.CompressedNonExistenceProof.verify(message.nonexist);\n                    if (error)\n                        return \"nonexist.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a CompressedBatchEntry message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof ics23.CompressedBatchEntry\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {ics23.CompressedBatchEntry} CompressedBatchEntry\n         */\n        CompressedBatchEntry.fromObject = function fromObject(object) {\n            if (object instanceof $root.ics23.CompressedBatchEntry)\n                return object;\n            var message = new $root.ics23.CompressedBatchEntry();\n            if (object.exist != null) {\n                if (typeof object.exist !== \"object\")\n                    throw TypeError(\".ics23.CompressedBatchEntry.exist: object expected\");\n                message.exist = $root.ics23.CompressedExistenceProof.fromObject(object.exist);\n            }\n            if (object.nonexist != null) {\n                if (typeof object.nonexist !== \"object\")\n                    throw TypeError(\".ics23.CompressedBatchEntry.nonexist: object expected\");\n                message.nonexist = $root.ics23.CompressedNonExistenceProof.fromObject(object.nonexist);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a CompressedBatchEntry message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof ics23.CompressedBatchEntry\n         * @static\n         * @param {ics23.CompressedBatchEntry} message CompressedBatchEntry\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        CompressedBatchEntry.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (message.exist != null && message.hasOwnProperty(\"exist\")) {\n                object.exist = $root.ics23.CompressedExistenceProof.toObject(message.exist, options);\n                if (options.oneofs)\n                    object.proof = \"exist\";\n            }\n            if (message.nonexist != null && message.hasOwnProperty(\"nonexist\")) {\n                object.nonexist = $root.ics23.CompressedNonExistenceProof.toObject(message.nonexist, options);\n                if (options.oneofs)\n                    object.proof = \"nonexist\";\n            }\n            return object;\n        };\n\n        /**\n         * Converts this CompressedBatchEntry to JSON.\n         * @function toJSON\n         * @memberof ics23.CompressedBatchEntry\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        CompressedBatchEntry.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return CompressedBatchEntry;\n    })();\n\n    ics23.CompressedExistenceProof = (function() {\n\n        /**\n         * Properties of a CompressedExistenceProof.\n         * @memberof ics23\n         * @interface ICompressedExistenceProof\n         * @property {Uint8Array|null} [key] CompressedExistenceProof key\n         * @property {Uint8Array|null} [value] CompressedExistenceProof value\n         * @property {ics23.ILeafOp|null} [leaf] CompressedExistenceProof leaf\n         * @property {Array.<number>|null} [path] CompressedExistenceProof path\n         */\n\n        /**\n         * Constructs a new CompressedExistenceProof.\n         * @memberof ics23\n         * @classdesc Represents a CompressedExistenceProof.\n         * @implements ICompressedExistenceProof\n         * @constructor\n         * @param {ics23.ICompressedExistenceProof=} [properties] Properties to set\n         */\n        function CompressedExistenceProof(properties) {\n            this.path = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * CompressedExistenceProof key.\n         * @member {Uint8Array} key\n         * @memberof ics23.CompressedExistenceProof\n         * @instance\n         */\n        CompressedExistenceProof.prototype.key = $util.newBuffer([]);\n\n        /**\n         * CompressedExistenceProof value.\n         * @member {Uint8Array} value\n         * @memberof ics23.CompressedExistenceProof\n         * @instance\n         */\n        CompressedExistenceProof.prototype.value = $util.newBuffer([]);\n\n        /**\n         * CompressedExistenceProof leaf.\n         * @member {ics23.ILeafOp|null|undefined} leaf\n         * @memberof ics23.CompressedExistenceProof\n         * @instance\n         */\n        CompressedExistenceProof.prototype.leaf = null;\n\n        /**\n         * CompressedExistenceProof path.\n         * @member {Array.<number>} path\n         * @memberof ics23.CompressedExistenceProof\n         * @instance\n         */\n        CompressedExistenceProof.prototype.path = $util.emptyArray;\n\n        /**\n         * Creates a new CompressedExistenceProof instance using the specified properties.\n         * @function create\n         * @memberof ics23.CompressedExistenceProof\n         * @static\n         * @param {ics23.ICompressedExistenceProof=} [properties] Properties to set\n         * @returns {ics23.CompressedExistenceProof} CompressedExistenceProof instance\n         */\n        CompressedExistenceProof.create = function create(properties) {\n            return new CompressedExistenceProof(properties);\n        };\n\n        /**\n         * Encodes the specified CompressedExistenceProof message. Does not implicitly {@link ics23.CompressedExistenceProof.verify|verify} messages.\n         * @function encode\n         * @memberof ics23.CompressedExistenceProof\n         * @static\n         * @param {ics23.ICompressedExistenceProof} message CompressedExistenceProof message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CompressedExistenceProof.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.key);\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.value);\n            if (message.leaf != null && message.hasOwnProperty(\"leaf\"))\n                $root.ics23.LeafOp.encode(message.leaf, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.path != null && message.path.length) {\n                writer.uint32(/* id 4, wireType 2 =*/34).fork();\n                for (var i = 0; i < message.path.length; ++i)\n                    writer.int32(message.path[i]);\n                writer.ldelim();\n            }\n            return writer;\n        };\n\n        /**\n         * Encodes the specified CompressedExistenceProof message, length delimited. Does not implicitly {@link ics23.CompressedExistenceProof.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof ics23.CompressedExistenceProof\n         * @static\n         * @param {ics23.ICompressedExistenceProof} message CompressedExistenceProof message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CompressedExistenceProof.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a CompressedExistenceProof message from the specified reader or buffer.\n         * @function decode\n         * @memberof ics23.CompressedExistenceProof\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {ics23.CompressedExistenceProof} CompressedExistenceProof\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CompressedExistenceProof.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ics23.CompressedExistenceProof();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.key = reader.bytes();\n                    break;\n                case 2:\n                    message.value = reader.bytes();\n                    break;\n                case 3:\n                    message.leaf = $root.ics23.LeafOp.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    if (!(message.path && message.path.length))\n                        message.path = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.path.push(reader.int32());\n                    } else\n                        message.path.push(reader.int32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a CompressedExistenceProof message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof ics23.CompressedExistenceProof\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {ics23.CompressedExistenceProof} CompressedExistenceProof\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CompressedExistenceProof.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a CompressedExistenceProof message.\n         * @function verify\n         * @memberof ics23.CompressedExistenceProof\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        CompressedExistenceProof.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                if (!(message.key && typeof message.key.length === \"number\" || $util.isString(message.key)))\n                    return \"key: buffer expected\";\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                if (!(message.value && typeof message.value.length === \"number\" || $util.isString(message.value)))\n                    return \"value: buffer expected\";\n            if (message.leaf != null && message.hasOwnProperty(\"leaf\")) {\n                var error = $root.ics23.LeafOp.verify(message.leaf);\n                if (error)\n                    return \"leaf.\" + error;\n            }\n            if (message.path != null && message.hasOwnProperty(\"path\")) {\n                if (!Array.isArray(message.path))\n                    return \"path: array expected\";\n                for (var i = 0; i < message.path.length; ++i)\n                    if (!$util.isInteger(message.path[i]))\n                        return \"path: integer[] expected\";\n            }\n            return null;\n        };\n\n        /**\n         * Creates a CompressedExistenceProof message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof ics23.CompressedExistenceProof\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {ics23.CompressedExistenceProof} CompressedExistenceProof\n         */\n        CompressedExistenceProof.fromObject = function fromObject(object) {\n            if (object instanceof $root.ics23.CompressedExistenceProof)\n                return object;\n            var message = new $root.ics23.CompressedExistenceProof();\n            if (object.key != null)\n                if (typeof object.key === \"string\")\n                    $util.base64.decode(object.key, message.key = $util.newBuffer($util.base64.length(object.key)), 0);\n                else if (object.key.length)\n                    message.key = object.key;\n            if (object.value != null)\n                if (typeof object.value === \"string\")\n                    $util.base64.decode(object.value, message.value = $util.newBuffer($util.base64.length(object.value)), 0);\n                else if (object.value.length)\n                    message.value = object.value;\n            if (object.leaf != null) {\n                if (typeof object.leaf !== \"object\")\n                    throw TypeError(\".ics23.CompressedExistenceProof.leaf: object expected\");\n                message.leaf = $root.ics23.LeafOp.fromObject(object.leaf);\n            }\n            if (object.path) {\n                if (!Array.isArray(object.path))\n                    throw TypeError(\".ics23.CompressedExistenceProof.path: array expected\");\n                message.path = [];\n                for (var i = 0; i < object.path.length; ++i)\n                    message.path[i] = object.path[i] | 0;\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a CompressedExistenceProof message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof ics23.CompressedExistenceProof\n         * @static\n         * @param {ics23.CompressedExistenceProof} message CompressedExistenceProof\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        CompressedExistenceProof.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.path = [];\n            if (options.defaults) {\n                if (options.bytes === String)\n                    object.key = \"\";\n                else {\n                    object.key = [];\n                    if (options.bytes !== Array)\n                        object.key = $util.newBuffer(object.key);\n                }\n                if (options.bytes === String)\n                    object.value = \"\";\n                else {\n                    object.value = [];\n                    if (options.bytes !== Array)\n                        object.value = $util.newBuffer(object.value);\n                }\n                object.leaf = null;\n            }\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                object.key = options.bytes === String ? $util.base64.encode(message.key, 0, message.key.length) : options.bytes === Array ? Array.prototype.slice.call(message.key) : message.key;\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                object.value = options.bytes === String ? $util.base64.encode(message.value, 0, message.value.length) : options.bytes === Array ? Array.prototype.slice.call(message.value) : message.value;\n            if (message.leaf != null && message.hasOwnProperty(\"leaf\"))\n                object.leaf = $root.ics23.LeafOp.toObject(message.leaf, options);\n            if (message.path && message.path.length) {\n                object.path = [];\n                for (var j = 0; j < message.path.length; ++j)\n                    object.path[j] = message.path[j];\n            }\n            return object;\n        };\n\n        /**\n         * Converts this CompressedExistenceProof to JSON.\n         * @function toJSON\n         * @memberof ics23.CompressedExistenceProof\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        CompressedExistenceProof.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return CompressedExistenceProof;\n    })();\n\n    ics23.CompressedNonExistenceProof = (function() {\n\n        /**\n         * Properties of a CompressedNonExistenceProof.\n         * @memberof ics23\n         * @interface ICompressedNonExistenceProof\n         * @property {Uint8Array|null} [key] CompressedNonExistenceProof key\n         * @property {ics23.ICompressedExistenceProof|null} [left] CompressedNonExistenceProof left\n         * @property {ics23.ICompressedExistenceProof|null} [right] CompressedNonExistenceProof right\n         */\n\n        /**\n         * Constructs a new CompressedNonExistenceProof.\n         * @memberof ics23\n         * @classdesc Represents a CompressedNonExistenceProof.\n         * @implements ICompressedNonExistenceProof\n         * @constructor\n         * @param {ics23.ICompressedNonExistenceProof=} [properties] Properties to set\n         */\n        function CompressedNonExistenceProof(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * CompressedNonExistenceProof key.\n         * @member {Uint8Array} key\n         * @memberof ics23.CompressedNonExistenceProof\n         * @instance\n         */\n        CompressedNonExistenceProof.prototype.key = $util.newBuffer([]);\n\n        /**\n         * CompressedNonExistenceProof left.\n         * @member {ics23.ICompressedExistenceProof|null|undefined} left\n         * @memberof ics23.CompressedNonExistenceProof\n         * @instance\n         */\n        CompressedNonExistenceProof.prototype.left = null;\n\n        /**\n         * CompressedNonExistenceProof right.\n         * @member {ics23.ICompressedExistenceProof|null|undefined} right\n         * @memberof ics23.CompressedNonExistenceProof\n         * @instance\n         */\n        CompressedNonExistenceProof.prototype.right = null;\n\n        /**\n         * Creates a new CompressedNonExistenceProof instance using the specified properties.\n         * @function create\n         * @memberof ics23.CompressedNonExistenceProof\n         * @static\n         * @param {ics23.ICompressedNonExistenceProof=} [properties] Properties to set\n         * @returns {ics23.CompressedNonExistenceProof} CompressedNonExistenceProof instance\n         */\n        CompressedNonExistenceProof.create = function create(properties) {\n            return new CompressedNonExistenceProof(properties);\n        };\n\n        /**\n         * Encodes the specified CompressedNonExistenceProof message. Does not implicitly {@link ics23.CompressedNonExistenceProof.verify|verify} messages.\n         * @function encode\n         * @memberof ics23.CompressedNonExistenceProof\n         * @static\n         * @param {ics23.ICompressedNonExistenceProof} message CompressedNonExistenceProof message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CompressedNonExistenceProof.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.key);\n            if (message.left != null && message.hasOwnProperty(\"left\"))\n                $root.ics23.CompressedExistenceProof.encode(message.left, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.right != null && message.hasOwnProperty(\"right\"))\n                $root.ics23.CompressedExistenceProof.encode(message.right, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified CompressedNonExistenceProof message, length delimited. Does not implicitly {@link ics23.CompressedNonExistenceProof.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof ics23.CompressedNonExistenceProof\n         * @static\n         * @param {ics23.ICompressedNonExistenceProof} message CompressedNonExistenceProof message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CompressedNonExistenceProof.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a CompressedNonExistenceProof message from the specified reader or buffer.\n         * @function decode\n         * @memberof ics23.CompressedNonExistenceProof\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {ics23.CompressedNonExistenceProof} CompressedNonExistenceProof\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CompressedNonExistenceProof.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ics23.CompressedNonExistenceProof();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.key = reader.bytes();\n                    break;\n                case 2:\n                    message.left = $root.ics23.CompressedExistenceProof.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.right = $root.ics23.CompressedExistenceProof.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a CompressedNonExistenceProof message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof ics23.CompressedNonExistenceProof\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {ics23.CompressedNonExistenceProof} CompressedNonExistenceProof\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CompressedNonExistenceProof.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a CompressedNonExistenceProof message.\n         * @function verify\n         * @memberof ics23.CompressedNonExistenceProof\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        CompressedNonExistenceProof.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                if (!(message.key && typeof message.key.length === \"number\" || $util.isString(message.key)))\n                    return \"key: buffer expected\";\n            if (message.left != null && message.hasOwnProperty(\"left\")) {\n                var error = $root.ics23.CompressedExistenceProof.verify(message.left);\n                if (error)\n                    return \"left.\" + error;\n            }\n            if (message.right != null && message.hasOwnProperty(\"right\")) {\n                var error = $root.ics23.CompressedExistenceProof.verify(message.right);\n                if (error)\n                    return \"right.\" + error;\n            }\n            return null;\n        };\n\n        /**\n         * Creates a CompressedNonExistenceProof message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof ics23.CompressedNonExistenceProof\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {ics23.CompressedNonExistenceProof} CompressedNonExistenceProof\n         */\n        CompressedNonExistenceProof.fromObject = function fromObject(object) {\n            if (object instanceof $root.ics23.CompressedNonExistenceProof)\n                return object;\n            var message = new $root.ics23.CompressedNonExistenceProof();\n            if (object.key != null)\n                if (typeof object.key === \"string\")\n                    $util.base64.decode(object.key, message.key = $util.newBuffer($util.base64.length(object.key)), 0);\n                else if (object.key.length)\n                    message.key = object.key;\n            if (object.left != null) {\n                if (typeof object.left !== \"object\")\n                    throw TypeError(\".ics23.CompressedNonExistenceProof.left: object expected\");\n                message.left = $root.ics23.CompressedExistenceProof.fromObject(object.left);\n            }\n            if (object.right != null) {\n                if (typeof object.right !== \"object\")\n                    throw TypeError(\".ics23.CompressedNonExistenceProof.right: object expected\");\n                message.right = $root.ics23.CompressedExistenceProof.fromObject(object.right);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a CompressedNonExistenceProof message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof ics23.CompressedNonExistenceProof\n         * @static\n         * @param {ics23.CompressedNonExistenceProof} message CompressedNonExistenceProof\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        CompressedNonExistenceProof.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                if (options.bytes === String)\n                    object.key = \"\";\n                else {\n                    object.key = [];\n                    if (options.bytes !== Array)\n                        object.key = $util.newBuffer(object.key);\n                }\n                object.left = null;\n                object.right = null;\n            }\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                object.key = options.bytes === String ? $util.base64.encode(message.key, 0, message.key.length) : options.bytes === Array ? Array.prototype.slice.call(message.key) : message.key;\n            if (message.left != null && message.hasOwnProperty(\"left\"))\n                object.left = $root.ics23.CompressedExistenceProof.toObject(message.left, options);\n            if (message.right != null && message.hasOwnProperty(\"right\"))\n                object.right = $root.ics23.CompressedExistenceProof.toObject(message.right, options);\n            return object;\n        };\n\n        /**\n         * Converts this CompressedNonExistenceProof to JSON.\n         * @function toJSON\n         * @memberof ics23.CompressedNonExistenceProof\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        CompressedNonExistenceProof.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return CompressedNonExistenceProof;\n    })();\n\n    return ics23;\n})();\n\nmodule.exports = $root;\n"]},"metadata":{},"sourceType":"script"}