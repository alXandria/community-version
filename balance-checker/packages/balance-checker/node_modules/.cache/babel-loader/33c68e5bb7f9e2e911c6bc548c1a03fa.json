{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LaunchpadLedger = void 0;\n\nconst amino_1 = require(\"@cosmjs/amino\");\n\nconst crypto_1 = require(\"@cosmjs/crypto\");\n\nconst encoding_1 = require(\"@cosmjs/encoding\");\n\nconst utils_1 = require(\"@cosmjs/utils\");\n\nconst ledger_cosmos_js_1 = __importDefault(require(\"ledger-cosmos-js\"));\n\nconst semver_1 = __importDefault(require(\"semver\"));\n/* eslint-enable */\n\n\nfunction unharden(hdPath) {\n  return hdPath.map(n => n.isHardened() ? n.toNumber() - 2 ** 31 : n.toNumber());\n}\n\nconst cosmosHdPath = amino_1.makeCosmoshubPath(0);\nconst cosmosBech32Prefix = \"cosmos\";\nconst requiredCosmosAppVersion = \"1.5.3\";\n\nclass LaunchpadLedger {\n  constructor(transport, options = {}) {\n    var _a, _b, _c;\n\n    const defaultOptions = {\n      hdPaths: [cosmosHdPath],\n      prefix: cosmosBech32Prefix,\n      testModeAllowed: false\n    };\n    this.testModeAllowed = (_a = options.testModeAllowed) !== null && _a !== void 0 ? _a : defaultOptions.testModeAllowed;\n    this.hdPaths = (_b = options.hdPaths) !== null && _b !== void 0 ? _b : defaultOptions.hdPaths;\n    this.prefix = (_c = options.prefix) !== null && _c !== void 0 ? _c : defaultOptions.prefix;\n    this.app = new ledger_cosmos_js_1.default(transport);\n  }\n\n  async getCosmosAppVersion() {\n    await this.verifyCosmosAppIsOpen();\n    utils_1.assert(this.app, \"Cosmos Ledger App is not connected\");\n    const response = await this.app.getVersion();\n    this.handleLedgerErrors(response); // eslint-disable-next-line @typescript-eslint/naming-convention\n\n    const {\n      major,\n      minor,\n      patch,\n      test_mode: testMode\n    } = response;\n    this.verifyAppMode(testMode);\n    return `${major}.${minor}.${patch}`;\n  }\n\n  async getPubkey(hdPath) {\n    await this.verifyDeviceIsReady();\n    utils_1.assert(this.app, \"Cosmos Ledger App is not connected\");\n    const hdPathToUse = hdPath || this.hdPaths[0]; // ledger-cosmos-js hardens the first three indices\n\n    const response = await this.app.publicKey(unharden(hdPathToUse));\n    this.handleLedgerErrors(response);\n    return Uint8Array.from(response.compressed_pk);\n  }\n\n  async getPubkeys() {\n    return this.hdPaths.reduce((promise, hdPath) => promise.then(async pubkeys => [...pubkeys, await this.getPubkey(hdPath)]), Promise.resolve([]));\n  }\n\n  async getCosmosAddress(pubkey) {\n    const pubkeyToUse = pubkey || (await this.getPubkey());\n    return ledger_cosmos_js_1.default.getBech32FromPK(this.prefix, Buffer.from(pubkeyToUse));\n  }\n\n  async sign(message, hdPath) {\n    await this.verifyDeviceIsReady();\n    utils_1.assert(this.app, \"Cosmos Ledger App is not connected\");\n    const hdPathToUse = hdPath || this.hdPaths[0]; // ledger-cosmos-js hardens the first three indices\n\n    const response = await this.app.sign(unharden(hdPathToUse), encoding_1.fromUtf8(message));\n    this.handleLedgerErrors(response, \"Transaction signing request was rejected by the user\");\n    return crypto_1.Secp256k1Signature.fromDer(response.signature).toFixedLength();\n  }\n\n  verifyAppMode(testMode) {\n    if (testMode && !this.testModeAllowed) {\n      throw new Error(`DANGER: The Cosmos Ledger app is in test mode and should not be used on mainnet!`);\n    }\n  }\n\n  async getOpenAppName() {\n    utils_1.assert(this.app, \"Cosmos Ledger App is not connected\");\n    const response = await this.app.appInfo();\n    this.handleLedgerErrors(response);\n    return response.appName;\n  }\n\n  async verifyAppVersion() {\n    const version = await this.getCosmosAppVersion();\n\n    if (!semver_1.default.gte(version, requiredCosmosAppVersion)) {\n      throw new Error(\"Outdated version: Please update Cosmos Ledger App to the latest version.\");\n    }\n  }\n\n  async verifyCosmosAppIsOpen() {\n    const appName = await this.getOpenAppName();\n\n    if (appName.toLowerCase() === `dashboard`) {\n      throw new Error(`Please open the Cosmos Ledger app on your Ledger device.`);\n    }\n\n    if (appName.toLowerCase() !== `cosmos`) {\n      throw new Error(`Please close ${appName} and open the Cosmos Ledger app on your Ledger device.`);\n    }\n  }\n\n  async verifyDeviceIsReady() {\n    await this.verifyAppVersion();\n    await this.verifyCosmosAppIsOpen();\n  }\n\n  handleLedgerErrors(\n  /* eslint-disable @typescript-eslint/naming-convention */\n  {\n    error_message: errorMessage = \"No errors\",\n    device_locked: deviceLocked = false\n  },\n  /* eslint-enable */\n  rejectionMessage = \"Request was rejected by the user\") {\n    if (deviceLocked) {\n      throw new Error(\"Ledger’s screensaver mode is on\");\n    }\n\n    switch (errorMessage) {\n      case \"U2F: Timeout\":\n        throw new Error(\"Connection timed out. Please try again.\");\n\n      case \"Cosmos app does not seem to be open\":\n        throw new Error(\"Cosmos app is not open\");\n\n      case \"Command not allowed\":\n        throw new Error(\"Transaction rejected\");\n\n      case \"Transaction rejected\":\n        throw new Error(rejectionMessage);\n\n      case \"Unknown Status Code: 26628\":\n        throw new Error(\"Ledger’s screensaver mode is on\");\n\n      case \"Instruction not supported\":\n        throw new Error(`Your Cosmos Ledger App is not up to date. Please update to version ${requiredCosmosAppVersion}.`);\n\n      case \"No errors\":\n        break;\n\n      default:\n        throw new Error(`Ledger Native Error: ${errorMessage}`);\n    }\n  }\n\n}\n\nexports.LaunchpadLedger = LaunchpadLedger;","map":{"version":3,"sources":["../src/launchpadledger.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LaunchpadLedger = void 0;\nconst amino_1 = require(\"@cosmjs/amino\");\nconst crypto_1 = require(\"@cosmjs/crypto\");\nconst encoding_1 = require(\"@cosmjs/encoding\");\nconst utils_1 = require(\"@cosmjs/utils\");\nconst ledger_cosmos_js_1 = __importDefault(require(\"ledger-cosmos-js\"));\nconst semver_1 = __importDefault(require(\"semver\"));\n/* eslint-enable */\nfunction unharden(hdPath) {\n    return hdPath.map((n) => (n.isHardened() ? n.toNumber() - 2 ** 31 : n.toNumber()));\n}\nconst cosmosHdPath = amino_1.makeCosmoshubPath(0);\nconst cosmosBech32Prefix = \"cosmos\";\nconst requiredCosmosAppVersion = \"1.5.3\";\nclass LaunchpadLedger {\n    constructor(transport, options = {}) {\n        var _a, _b, _c;\n        const defaultOptions = {\n            hdPaths: [cosmosHdPath],\n            prefix: cosmosBech32Prefix,\n            testModeAllowed: false,\n        };\n        this.testModeAllowed = (_a = options.testModeAllowed) !== null && _a !== void 0 ? _a : defaultOptions.testModeAllowed;\n        this.hdPaths = (_b = options.hdPaths) !== null && _b !== void 0 ? _b : defaultOptions.hdPaths;\n        this.prefix = (_c = options.prefix) !== null && _c !== void 0 ? _c : defaultOptions.prefix;\n        this.app = new ledger_cosmos_js_1.default(transport);\n    }\n    async getCosmosAppVersion() {\n        await this.verifyCosmosAppIsOpen();\n        utils_1.assert(this.app, \"Cosmos Ledger App is not connected\");\n        const response = await this.app.getVersion();\n        this.handleLedgerErrors(response);\n        // eslint-disable-next-line @typescript-eslint/naming-convention\n        const { major, minor, patch, test_mode: testMode } = response;\n        this.verifyAppMode(testMode);\n        return `${major}.${minor}.${patch}`;\n    }\n    async getPubkey(hdPath) {\n        await this.verifyDeviceIsReady();\n        utils_1.assert(this.app, \"Cosmos Ledger App is not connected\");\n        const hdPathToUse = hdPath || this.hdPaths[0];\n        // ledger-cosmos-js hardens the first three indices\n        const response = await this.app.publicKey(unharden(hdPathToUse));\n        this.handleLedgerErrors(response);\n        return Uint8Array.from(response.compressed_pk);\n    }\n    async getPubkeys() {\n        return this.hdPaths.reduce((promise, hdPath) => promise.then(async (pubkeys) => [...pubkeys, await this.getPubkey(hdPath)]), Promise.resolve([]));\n    }\n    async getCosmosAddress(pubkey) {\n        const pubkeyToUse = pubkey || (await this.getPubkey());\n        return ledger_cosmos_js_1.default.getBech32FromPK(this.prefix, Buffer.from(pubkeyToUse));\n    }\n    async sign(message, hdPath) {\n        await this.verifyDeviceIsReady();\n        utils_1.assert(this.app, \"Cosmos Ledger App is not connected\");\n        const hdPathToUse = hdPath || this.hdPaths[0];\n        // ledger-cosmos-js hardens the first three indices\n        const response = await this.app.sign(unharden(hdPathToUse), encoding_1.fromUtf8(message));\n        this.handleLedgerErrors(response, \"Transaction signing request was rejected by the user\");\n        return crypto_1.Secp256k1Signature.fromDer(response.signature).toFixedLength();\n    }\n    verifyAppMode(testMode) {\n        if (testMode && !this.testModeAllowed) {\n            throw new Error(`DANGER: The Cosmos Ledger app is in test mode and should not be used on mainnet!`);\n        }\n    }\n    async getOpenAppName() {\n        utils_1.assert(this.app, \"Cosmos Ledger App is not connected\");\n        const response = await this.app.appInfo();\n        this.handleLedgerErrors(response);\n        return response.appName;\n    }\n    async verifyAppVersion() {\n        const version = await this.getCosmosAppVersion();\n        if (!semver_1.default.gte(version, requiredCosmosAppVersion)) {\n            throw new Error(\"Outdated version: Please update Cosmos Ledger App to the latest version.\");\n        }\n    }\n    async verifyCosmosAppIsOpen() {\n        const appName = await this.getOpenAppName();\n        if (appName.toLowerCase() === `dashboard`) {\n            throw new Error(`Please open the Cosmos Ledger app on your Ledger device.`);\n        }\n        if (appName.toLowerCase() !== `cosmos`) {\n            throw new Error(`Please close ${appName} and open the Cosmos Ledger app on your Ledger device.`);\n        }\n    }\n    async verifyDeviceIsReady() {\n        await this.verifyAppVersion();\n        await this.verifyCosmosAppIsOpen();\n    }\n    handleLedgerErrors(\n    /* eslint-disable @typescript-eslint/naming-convention */\n    { error_message: errorMessage = \"No errors\", device_locked: deviceLocked = false, }, \n    /* eslint-enable */\n    rejectionMessage = \"Request was rejected by the user\") {\n        if (deviceLocked) {\n            throw new Error(\"Ledger’s screensaver mode is on\");\n        }\n        switch (errorMessage) {\n            case \"U2F: Timeout\":\n                throw new Error(\"Connection timed out. Please try again.\");\n            case \"Cosmos app does not seem to be open\":\n                throw new Error(\"Cosmos app is not open\");\n            case \"Command not allowed\":\n                throw new Error(\"Transaction rejected\");\n            case \"Transaction rejected\":\n                throw new Error(rejectionMessage);\n            case \"Unknown Status Code: 26628\":\n                throw new Error(\"Ledger’s screensaver mode is on\");\n            case \"Instruction not supported\":\n                throw new Error(`Your Cosmos Ledger App is not up to date. Please update to version ${requiredCosmosAppVersion}.`);\n            case \"No errors\":\n                break;\n            default:\n                throw new Error(`Ledger Native Error: ${errorMessage}`);\n        }\n    }\n}\nexports.LaunchpadLedger = LaunchpadLedger;\n//# sourceMappingURL=launchpadledger.js.map"]},"metadata":{},"sourceType":"script"}