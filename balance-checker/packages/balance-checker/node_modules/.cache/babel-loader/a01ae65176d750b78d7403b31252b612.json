{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setupStakingExtension = void 0;\n/* eslint-disable @typescript-eslint/naming-convention */\n\nconst long_1 = __importDefault(require(\"long\"));\n\nconst query_1 = require(\"../codec/cosmos/staking/v1beta1/query\");\n\nconst utils_1 = require(\"./utils\");\n\nfunction setupStakingExtension(base) {\n  // Use this service to get easy typed access to query methods\n  // This cannot be used for proof verification\n  const rpc = utils_1.createProtobufRpcClient(base);\n  const queryService = new query_1.QueryClientImpl(rpc);\n  return {\n    staking: {\n      delegation: async (delegatorAddress, validatorAddress) => {\n        const response = await queryService.Delegation({\n          delegatorAddr: delegatorAddress,\n          validatorAddr: validatorAddress\n        });\n        return response;\n      },\n      delegatorDelegations: async (delegatorAddress, paginationKey) => {\n        const response = await queryService.DelegatorDelegations({\n          delegatorAddr: delegatorAddress,\n          pagination: utils_1.createPagination(paginationKey)\n        });\n        return response;\n      },\n      delegatorUnbondingDelegations: async (delegatorAddress, paginationKey) => {\n        const response = await queryService.DelegatorUnbondingDelegations({\n          delegatorAddr: delegatorAddress,\n          pagination: utils_1.createPagination(paginationKey)\n        });\n        return response;\n      },\n      delegatorValidator: async (delegatorAddress, validatorAddress) => {\n        const response = await queryService.DelegatorValidator({\n          delegatorAddr: delegatorAddress,\n          validatorAddr: validatorAddress\n        });\n        return response;\n      },\n      delegatorValidators: async (delegatorAddress, paginationKey) => {\n        const response = await queryService.DelegatorValidators({\n          delegatorAddr: delegatorAddress,\n          pagination: utils_1.createPagination(paginationKey)\n        });\n        return response;\n      },\n      historicalInfo: async height => {\n        const response = await queryService.HistoricalInfo({\n          height: long_1.default.fromNumber(height, true)\n        });\n        return response;\n      },\n      params: async () => {\n        const response = await queryService.Params({});\n        return response;\n      },\n      pool: async () => {\n        const response = await queryService.Pool({});\n        return response;\n      },\n      redelegations: async (delegatorAddress, sourceValidatorAddress, destinationValidatorAddress, paginationKey) => {\n        const response = await queryService.Redelegations({\n          delegatorAddr: delegatorAddress,\n          srcValidatorAddr: sourceValidatorAddress,\n          dstValidatorAddr: destinationValidatorAddress,\n          pagination: utils_1.createPagination(paginationKey)\n        });\n        return response;\n      },\n      unbondingDelegation: async (delegatorAddress, validatorAddress) => {\n        const response = await queryService.UnbondingDelegation({\n          delegatorAddr: delegatorAddress,\n          validatorAddr: validatorAddress\n        });\n        return response;\n      },\n      validator: async validatorAddress => {\n        const response = await queryService.Validator({\n          validatorAddr: validatorAddress\n        });\n        return response;\n      },\n      validatorDelegations: async (validatorAddress, paginationKey) => {\n        const response = await queryService.ValidatorDelegations({\n          validatorAddr: validatorAddress,\n          pagination: utils_1.createPagination(paginationKey)\n        });\n        return response;\n      },\n      validators: async (status, paginationKey) => {\n        const response = await queryService.Validators({\n          status: status,\n          pagination: utils_1.createPagination(paginationKey)\n        });\n        return response;\n      },\n      validatorUnbondingDelegations: async (validatorAddress, paginationKey) => {\n        const response = await queryService.ValidatorUnbondingDelegations({\n          validatorAddr: validatorAddress,\n          pagination: utils_1.createPagination(paginationKey)\n        });\n        return response;\n      }\n    }\n  };\n}\n\nexports.setupStakingExtension = setupStakingExtension;","map":{"version":3,"sources":["../../src/queries/staking.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.setupStakingExtension = void 0;\n/* eslint-disable @typescript-eslint/naming-convention */\nconst long_1 = __importDefault(require(\"long\"));\nconst query_1 = require(\"../codec/cosmos/staking/v1beta1/query\");\nconst utils_1 = require(\"./utils\");\nfunction setupStakingExtension(base) {\n    // Use this service to get easy typed access to query methods\n    // This cannot be used for proof verification\n    const rpc = utils_1.createProtobufRpcClient(base);\n    const queryService = new query_1.QueryClientImpl(rpc);\n    return {\n        staking: {\n            delegation: async (delegatorAddress, validatorAddress) => {\n                const response = await queryService.Delegation({\n                    delegatorAddr: delegatorAddress,\n                    validatorAddr: validatorAddress,\n                });\n                return response;\n            },\n            delegatorDelegations: async (delegatorAddress, paginationKey) => {\n                const response = await queryService.DelegatorDelegations({\n                    delegatorAddr: delegatorAddress,\n                    pagination: utils_1.createPagination(paginationKey),\n                });\n                return response;\n            },\n            delegatorUnbondingDelegations: async (delegatorAddress, paginationKey) => {\n                const response = await queryService.DelegatorUnbondingDelegations({\n                    delegatorAddr: delegatorAddress,\n                    pagination: utils_1.createPagination(paginationKey),\n                });\n                return response;\n            },\n            delegatorValidator: async (delegatorAddress, validatorAddress) => {\n                const response = await queryService.DelegatorValidator({\n                    delegatorAddr: delegatorAddress,\n                    validatorAddr: validatorAddress,\n                });\n                return response;\n            },\n            delegatorValidators: async (delegatorAddress, paginationKey) => {\n                const response = await queryService.DelegatorValidators({\n                    delegatorAddr: delegatorAddress,\n                    pagination: utils_1.createPagination(paginationKey),\n                });\n                return response;\n            },\n            historicalInfo: async (height) => {\n                const response = await queryService.HistoricalInfo({\n                    height: long_1.default.fromNumber(height, true),\n                });\n                return response;\n            },\n            params: async () => {\n                const response = await queryService.Params({});\n                return response;\n            },\n            pool: async () => {\n                const response = await queryService.Pool({});\n                return response;\n            },\n            redelegations: async (delegatorAddress, sourceValidatorAddress, destinationValidatorAddress, paginationKey) => {\n                const response = await queryService.Redelegations({\n                    delegatorAddr: delegatorAddress,\n                    srcValidatorAddr: sourceValidatorAddress,\n                    dstValidatorAddr: destinationValidatorAddress,\n                    pagination: utils_1.createPagination(paginationKey),\n                });\n                return response;\n            },\n            unbondingDelegation: async (delegatorAddress, validatorAddress) => {\n                const response = await queryService.UnbondingDelegation({\n                    delegatorAddr: delegatorAddress,\n                    validatorAddr: validatorAddress,\n                });\n                return response;\n            },\n            validator: async (validatorAddress) => {\n                const response = await queryService.Validator({ validatorAddr: validatorAddress });\n                return response;\n            },\n            validatorDelegations: async (validatorAddress, paginationKey) => {\n                const response = await queryService.ValidatorDelegations({\n                    validatorAddr: validatorAddress,\n                    pagination: utils_1.createPagination(paginationKey),\n                });\n                return response;\n            },\n            validators: async (status, paginationKey) => {\n                const response = await queryService.Validators({\n                    status: status,\n                    pagination: utils_1.createPagination(paginationKey),\n                });\n                return response;\n            },\n            validatorUnbondingDelegations: async (validatorAddress, paginationKey) => {\n                const response = await queryService.ValidatorUnbondingDelegations({\n                    validatorAddr: validatorAddress,\n                    pagination: utils_1.createPagination(paginationKey),\n                });\n                return response;\n            },\n        },\n    };\n}\nexports.setupStakingExtension = setupStakingExtension;\n//# sourceMappingURL=staking.js.map"]},"metadata":{},"sourceType":"script"}