{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.makeSignBytes = exports.makeSignDoc = exports.makeAuthInfoBytes = void 0;\n/* eslint-disable @typescript-eslint/naming-convention */\n\nconst long_1 = __importDefault(require(\"long\"));\n\nconst signing_1 = require(\"./codec/cosmos/tx/signing/v1beta1/signing\");\n\nconst tx_1 = require(\"./codec/cosmos/tx/v1beta1/tx\");\n/**\n * Creates and serializes an AuthInfo document using SIGN_MODE_DIRECT.\n */\n\n\nfunction makeAuthInfoBytes(pubkeys, feeAmount, gasLimit, sequence, signMode = signing_1.SignMode.SIGN_MODE_DIRECT) {\n  const authInfo = {\n    signerInfos: pubkeys.map(pubkey => ({\n      publicKey: pubkey,\n      modeInfo: {\n        single: {\n          mode: signMode\n        }\n      },\n      sequence: long_1.default.fromNumber(sequence)\n    })),\n    fee: {\n      amount: [...feeAmount],\n      gasLimit: long_1.default.fromNumber(gasLimit)\n    }\n  };\n  return tx_1.AuthInfo.encode(tx_1.AuthInfo.fromPartial(authInfo)).finish();\n}\n\nexports.makeAuthInfoBytes = makeAuthInfoBytes;\n\nfunction makeSignDoc(bodyBytes, authInfoBytes, chainId, accountNumber) {\n  return {\n    bodyBytes: bodyBytes,\n    authInfoBytes: authInfoBytes,\n    chainId: chainId,\n    accountNumber: long_1.default.fromNumber(accountNumber)\n  };\n}\n\nexports.makeSignDoc = makeSignDoc;\n\nfunction makeSignBytes({\n  accountNumber,\n  authInfoBytes,\n  bodyBytes,\n  chainId\n}) {\n  const signDoc = tx_1.SignDoc.fromPartial({\n    accountNumber: accountNumber,\n    authInfoBytes: authInfoBytes,\n    bodyBytes: bodyBytes,\n    chainId: chainId\n  });\n  return tx_1.SignDoc.encode(signDoc).finish();\n}\n\nexports.makeSignBytes = makeSignBytes;","map":{"version":3,"sources":["../src/signing.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA;;AACA,MAAA,MAAA,GAAA,eAAA,CAAA,OAAA,CAAA,MAAA,CAAA,CAAA;;AAGA,MAAA,SAAA,GAAA,OAAA,CAAA,2CAAA,CAAA;;AACA,MAAA,IAAA,GAAA,OAAA,CAAA,8BAAA,CAAA;AAGA;;;;;AAGA,SAAgB,iBAAhB,CACE,OADF,EAEE,SAFF,EAGE,QAHF,EAIE,QAJF,EAKE,QAAQ,GAAG,SAAA,CAAA,QAAA,CAAS,gBALtB,EAKsC;AAEpC,QAAM,QAAQ,GAAG;AACf,IAAA,WAAW,EAAE,OAAO,CAAC,GAAR,CACV,MAAD,KAAyB;AACvB,MAAA,SAAS,EAAE,MADY;AAEvB,MAAA,QAAQ,EAAE;AACR,QAAA,MAAM,EAAE;AAAE,UAAA,IAAI,EAAE;AAAR;AADA,OAFa;AAKvB,MAAA,QAAQ,EAAE,MAAA,CAAA,OAAA,CAAK,UAAL,CAAgB,QAAhB;AALa,KAAzB,CADW,CADE;AAUf,IAAA,GAAG,EAAE;AACH,MAAA,MAAM,EAAE,CAAC,GAAG,SAAJ,CADL;AAEH,MAAA,QAAQ,EAAE,MAAA,CAAA,OAAA,CAAK,UAAL,CAAgB,QAAhB;AAFP;AAVU,GAAjB;AAeA,SAAO,IAAA,CAAA,QAAA,CAAS,MAAT,CAAgB,IAAA,CAAA,QAAA,CAAS,WAAT,CAAqB,QAArB,CAAhB,EAAgD,MAAhD,EAAP;AACD;;AAvBD,OAAA,CAAA,iBAAA,GAAA,iBAAA;;AAyBA,SAAgB,WAAhB,CACE,SADF,EAEE,aAFF,EAGE,OAHF,EAIE,aAJF,EAIuB;AAErB,SAAO;AACL,IAAA,SAAS,EAAE,SADN;AAEL,IAAA,aAAa,EAAE,aAFV;AAGL,IAAA,OAAO,EAAE,OAHJ;AAIL,IAAA,aAAa,EAAE,MAAA,CAAA,OAAA,CAAK,UAAL,CAAgB,aAAhB;AAJV,GAAP;AAMD;;AAZD,OAAA,CAAA,WAAA,GAAA,WAAA;;AAcA,SAAgB,aAAhB,CAA8B;AAAE,EAAA,aAAF;AAAiB,EAAA,aAAjB;AAAgC,EAAA,SAAhC;AAA2C,EAAA;AAA3C,CAA9B,EAA2F;AACzF,QAAM,OAAO,GAAG,IAAA,CAAA,OAAA,CAAQ,WAAR,CAAoB;AAClC,IAAA,aAAa,EAAE,aADmB;AAElC,IAAA,aAAa,EAAE,aAFmB;AAGlC,IAAA,SAAS,EAAE,SAHuB;AAIlC,IAAA,OAAO,EAAE;AAJyB,GAApB,CAAhB;AAMA,SAAO,IAAA,CAAA,OAAA,CAAQ,MAAR,CAAe,OAAf,EAAwB,MAAxB,EAAP;AACD;;AARD,OAAA,CAAA,aAAA,GAAA,aAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.makeSignBytes = exports.makeSignDoc = exports.makeAuthInfoBytes = void 0;\n/* eslint-disable @typescript-eslint/naming-convention */\nconst long_1 = __importDefault(require(\"long\"));\nconst signing_1 = require(\"./codec/cosmos/tx/signing/v1beta1/signing\");\nconst tx_1 = require(\"./codec/cosmos/tx/v1beta1/tx\");\n/**\n * Creates and serializes an AuthInfo document using SIGN_MODE_DIRECT.\n */\nfunction makeAuthInfoBytes(pubkeys, feeAmount, gasLimit, sequence, signMode = signing_1.SignMode.SIGN_MODE_DIRECT) {\n    const authInfo = {\n        signerInfos: pubkeys.map((pubkey) => ({\n            publicKey: pubkey,\n            modeInfo: {\n                single: { mode: signMode },\n            },\n            sequence: long_1.default.fromNumber(sequence),\n        })),\n        fee: {\n            amount: [...feeAmount],\n            gasLimit: long_1.default.fromNumber(gasLimit),\n        },\n    };\n    return tx_1.AuthInfo.encode(tx_1.AuthInfo.fromPartial(authInfo)).finish();\n}\nexports.makeAuthInfoBytes = makeAuthInfoBytes;\nfunction makeSignDoc(bodyBytes, authInfoBytes, chainId, accountNumber) {\n    return {\n        bodyBytes: bodyBytes,\n        authInfoBytes: authInfoBytes,\n        chainId: chainId,\n        accountNumber: long_1.default.fromNumber(accountNumber),\n    };\n}\nexports.makeSignDoc = makeSignDoc;\nfunction makeSignBytes({ accountNumber, authInfoBytes, bodyBytes, chainId }) {\n    const signDoc = tx_1.SignDoc.fromPartial({\n        accountNumber: accountNumber,\n        authInfoBytes: authInfoBytes,\n        bodyBytes: bodyBytes,\n        chainId: chainId,\n    });\n    return tx_1.SignDoc.encode(signDoc).finish();\n}\nexports.makeSignBytes = makeSignBytes;\n//# sourceMappingURL=signing.js.map"]},"metadata":{},"sourceType":"script"}