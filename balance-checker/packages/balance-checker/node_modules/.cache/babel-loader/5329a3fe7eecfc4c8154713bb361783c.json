{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.JsonRpcClient = void 0;\n\nconst stream_1 = require(\"@cosmjs/stream\");\n\nconst types_1 = require(\"./types\");\n/**\n * A thin wrapper that is used to bring together requests and responses by ID.\n *\n * Using this class is only advised for continous communication channels like\n * WebSockets or WebWorker messaging.\n */\n\n\nclass JsonRpcClient {\n  constructor(connection) {\n    this.connection = connection;\n  }\n\n  async run(request) {\n    const filteredStream = this.connection.responseStream.filter(r => r.id === request.id);\n    const pendingResponses = stream_1.firstEvent(filteredStream);\n    this.connection.sendRequest(request);\n    const response = await pendingResponses;\n\n    if (types_1.isJsonRpcErrorResponse(response)) {\n      const error = response.error;\n      throw new Error(`JSON RPC error: code=${error.code}; message='${error.message}'`);\n    }\n\n    return response;\n  }\n\n}\n\nexports.JsonRpcClient = JsonRpcClient;","map":{"version":3,"sources":["../src/jsonrpcclient.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,QAAA,GAAA,OAAA,CAAA,gBAAA,CAAA;;AAGA,MAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;AAOA;;;;;;;;AAMA,MAAa,aAAb,CAA0B;AAGxB,EAAA,WAAA,CAAmB,UAAnB,EAAyF;AACvF,SAAK,UAAL,GAAkB,UAAlB;AACD;;AAEM,QAAM,GAAN,CAAU,OAAV,EAAiC;AACtC,UAAM,cAAc,GAAG,KAAK,UAAL,CAAgB,cAAhB,CAA+B,MAA/B,CAAuC,CAAD,IAAO,CAAC,CAAC,EAAF,KAAS,OAAO,CAAC,EAA9D,CAAvB;AACA,UAAM,gBAAgB,GAAG,QAAA,CAAA,UAAA,CAAW,cAAX,CAAzB;AACA,SAAK,UAAL,CAAgB,WAAhB,CAA4B,OAA5B;AAEA,UAAM,QAAQ,GAAG,MAAM,gBAAvB;;AACA,QAAI,OAAA,CAAA,sBAAA,CAAuB,QAAvB,CAAJ,EAAsC;AACpC,YAAM,KAAK,GAAG,QAAQ,CAAC,KAAvB;AACA,YAAM,IAAI,KAAJ,CAAU,wBAAwB,KAAK,CAAC,IAAI,cAAc,KAAK,CAAC,OAAO,GAAvE,CAAN;AACD;;AAED,WAAO,QAAP;AACD;;AAnBuB;;AAA1B,OAAA,CAAA,aAAA,GAAA,aAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.JsonRpcClient = void 0;\nconst stream_1 = require(\"@cosmjs/stream\");\nconst types_1 = require(\"./types\");\n/**\n * A thin wrapper that is used to bring together requests and responses by ID.\n *\n * Using this class is only advised for continous communication channels like\n * WebSockets or WebWorker messaging.\n */\nclass JsonRpcClient {\n    constructor(connection) {\n        this.connection = connection;\n    }\n    async run(request) {\n        const filteredStream = this.connection.responseStream.filter((r) => r.id === request.id);\n        const pendingResponses = stream_1.firstEvent(filteredStream);\n        this.connection.sendRequest(request);\n        const response = await pendingResponses;\n        if (types_1.isJsonRpcErrorResponse(response)) {\n            const error = response.error;\n            throw new Error(`JSON RPC error: code=${error.code}; message='${error.message}'`);\n        }\n        return response;\n    }\n}\nexports.JsonRpcClient = JsonRpcClient;\n//# sourceMappingURL=jsonrpcclient.js.map"]},"metadata":{},"sourceType":"script"}