{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setupWasmExtension = void 0;\n\nconst encoding_1 = require(\"@cosmjs/encoding\");\n\nconst stargate_1 = require(\"@cosmjs/stargate\");\n\nconst long_1 = __importDefault(require(\"long\"));\n\nconst query_1 = require(\"../codec/cosmwasm/wasm/v1beta1/query\");\n\nfunction setupWasmExtension(base) {\n  const rpc = stargate_1.createProtobufRpcClient(base); // Use this service to get easy typed access to query methods\n  // This cannot be used for proof verification\n\n  const queryService = new query_1.QueryClientImpl(rpc);\n  return {\n    wasm: {\n      listCodeInfo: async paginationKey => {\n        const request = {\n          pagination: stargate_1.createPagination(paginationKey)\n        };\n        return queryService.Codes(request);\n      },\n      getCode: async id => {\n        const request = {\n          codeId: long_1.default.fromNumber(id)\n        };\n        return queryService.Code(request);\n      },\n      listContractsByCodeId: async (id, paginationKey) => {\n        const pagination = {\n          pagination: stargate_1.createPagination(paginationKey)\n        };\n        const request = Object.assign(Object.assign({}, pagination), {\n          codeId: long_1.default.fromNumber(id)\n        });\n        return queryService.ContractsByCode(request);\n      },\n      getContractInfo: async address => {\n        const request = {\n          address: address\n        };\n        return queryService.ContractInfo(request);\n      },\n      getContractCodeHistory: async (address, paginationKey) => {\n        const pagination = {\n          pagination: stargate_1.createPagination(paginationKey)\n        };\n        const request = Object.assign(Object.assign({}, pagination), {\n          address: address\n        });\n        return queryService.ContractHistory(request);\n      },\n      getAllContractState: async (address, paginationKey) => {\n        const pagination = {\n          pagination: stargate_1.createPagination(paginationKey)\n        };\n        const request = Object.assign(Object.assign({}, pagination), {\n          address: address\n        });\n        return queryService.AllContractState(request);\n      },\n      queryContractRaw: async (address, key) => {\n        const request = {\n          address: address,\n          queryData: key\n        };\n        return queryService.RawContractState(request);\n      },\n      queryContractSmart: async (address, query) => {\n        const request = {\n          address: address,\n          queryData: encoding_1.toAscii(JSON.stringify(query))\n        };\n        const {\n          data\n        } = await queryService.SmartContractState(request); // By convention, smart queries must return a valid JSON document (see https://github.com/CosmWasm/cosmwasm/issues/144)\n\n        try {\n          return JSON.parse(encoding_1.fromUtf8(data));\n        } catch (error) {\n          throw new Error(\"Contract did not return valid JSON data\");\n        }\n      }\n    }\n  };\n}\n\nexports.setupWasmExtension = setupWasmExtension;","map":{"version":3,"sources":["../../src/queries/wasm.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.setupWasmExtension = void 0;\nconst encoding_1 = require(\"@cosmjs/encoding\");\nconst stargate_1 = require(\"@cosmjs/stargate\");\nconst long_1 = __importDefault(require(\"long\"));\nconst query_1 = require(\"../codec/cosmwasm/wasm/v1beta1/query\");\nfunction setupWasmExtension(base) {\n    const rpc = stargate_1.createProtobufRpcClient(base);\n    // Use this service to get easy typed access to query methods\n    // This cannot be used for proof verification\n    const queryService = new query_1.QueryClientImpl(rpc);\n    return {\n        wasm: {\n            listCodeInfo: async (paginationKey) => {\n                const request = {\n                    pagination: stargate_1.createPagination(paginationKey),\n                };\n                return queryService.Codes(request);\n            },\n            getCode: async (id) => {\n                const request = { codeId: long_1.default.fromNumber(id) };\n                return queryService.Code(request);\n            },\n            listContractsByCodeId: async (id, paginationKey) => {\n                const pagination = {\n                    pagination: stargate_1.createPagination(paginationKey),\n                };\n                const request = Object.assign(Object.assign({}, pagination), { codeId: long_1.default.fromNumber(id) });\n                return queryService.ContractsByCode(request);\n            },\n            getContractInfo: async (address) => {\n                const request = { address: address };\n                return queryService.ContractInfo(request);\n            },\n            getContractCodeHistory: async (address, paginationKey) => {\n                const pagination = {\n                    pagination: stargate_1.createPagination(paginationKey),\n                };\n                const request = Object.assign(Object.assign({}, pagination), { address: address });\n                return queryService.ContractHistory(request);\n            },\n            getAllContractState: async (address, paginationKey) => {\n                const pagination = {\n                    pagination: stargate_1.createPagination(paginationKey),\n                };\n                const request = Object.assign(Object.assign({}, pagination), { address: address });\n                return queryService.AllContractState(request);\n            },\n            queryContractRaw: async (address, key) => {\n                const request = { address: address, queryData: key };\n                return queryService.RawContractState(request);\n            },\n            queryContractSmart: async (address, query) => {\n                const request = { address: address, queryData: encoding_1.toAscii(JSON.stringify(query)) };\n                const { data } = await queryService.SmartContractState(request);\n                // By convention, smart queries must return a valid JSON document (see https://github.com/CosmWasm/cosmwasm/issues/144)\n                try {\n                    return JSON.parse(encoding_1.fromUtf8(data));\n                }\n                catch (error) {\n                    throw new Error(\"Contract did not return valid JSON data\");\n                }\n            },\n        },\n    };\n}\nexports.setupWasmExtension = setupWasmExtension;\n//# sourceMappingURL=wasm.js.map"]},"metadata":{},"sourceType":"script"}