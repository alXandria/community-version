{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DirectSecp256k1Wallet = void 0;\n\nconst amino_1 = require(\"@cosmjs/amino\");\n\nconst crypto_1 = require(\"@cosmjs/crypto\");\n\nconst encoding_1 = require(\"@cosmjs/encoding\");\n\nconst signing_1 = require(\"./signing\");\n/**\n * A wallet that holds a single secp256k1 keypair.\n *\n * If you want to work with BIP39 mnemonics and multiple accounts, use DirectSecp256k1HdWallet.\n */\n\n\nclass DirectSecp256k1Wallet {\n  constructor(privkey, pubkey, prefix) {\n    this.privkey = privkey;\n    this.pubkey = pubkey;\n    this.prefix = prefix;\n  }\n  /**\n   * Creates a DirectSecp256k1Wallet from the given private key\n   *\n   * @param privkey The private key.\n   * @param prefix The bech32 address prefix (human readable part). Defaults to \"cosmos\".\n   */\n\n\n  static async fromKey(privkey, prefix = \"cosmos\") {\n    const uncompressed = (await crypto_1.Secp256k1.makeKeypair(privkey)).pubkey;\n    return new DirectSecp256k1Wallet(privkey, crypto_1.Secp256k1.compressPubkey(uncompressed), prefix);\n  }\n\n  get address() {\n    return encoding_1.Bech32.encode(this.prefix, amino_1.rawSecp256k1PubkeyToRawAddress(this.pubkey));\n  }\n\n  async getAccounts() {\n    return [{\n      algo: \"secp256k1\",\n      address: this.address,\n      pubkey: this.pubkey\n    }];\n  }\n\n  async signDirect(address, signDoc) {\n    const signBytes = signing_1.makeSignBytes(signDoc);\n\n    if (address !== this.address) {\n      throw new Error(`Address ${address} not found in wallet`);\n    }\n\n    const hashedMessage = crypto_1.sha256(signBytes);\n    const signature = await crypto_1.Secp256k1.createSignature(hashedMessage, this.privkey);\n    const signatureBytes = new Uint8Array([...signature.r(32), ...signature.s(32)]);\n    const stdSignature = amino_1.encodeSecp256k1Signature(this.pubkey, signatureBytes);\n    return {\n      signed: signDoc,\n      signature: stdSignature\n    };\n  }\n\n}\n\nexports.DirectSecp256k1Wallet = DirectSecp256k1Wallet;","map":{"version":3,"sources":["../src/directsecp256k1wallet.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,OAAA,GAAA,OAAA,CAAA,eAAA,CAAA;;AACA,MAAA,QAAA,GAAA,OAAA,CAAA,gBAAA,CAAA;;AACA,MAAA,UAAA,GAAA,OAAA,CAAA,kBAAA,CAAA;;AAIA,MAAA,SAAA,GAAA,OAAA,CAAA,WAAA,CAAA;AAEA;;;;;;;AAKA,MAAa,qBAAb,CAAkC;AAgBhC,EAAA,WAAA,CAAoB,OAApB,EAAyC,MAAzC,EAA6D,MAA7D,EAA2E;AACzE,SAAK,OAAL,GAAe,OAAf;AACA,SAAK,MAAL,GAAc,MAAd;AACA,SAAK,MAAL,GAAc,MAAd;AACD;AAnBD;;;;;;;;AAMO,eAAa,OAAb,CAAqB,OAArB,EAA0C,MAAM,GAAG,QAAnD,EAA2D;AAChE,UAAM,YAAY,GAAG,CAAC,MAAM,QAAA,CAAA,SAAA,CAAU,WAAV,CAAsB,OAAtB,CAAP,EAAuC,MAA5D;AACA,WAAO,IAAI,qBAAJ,CAA0B,OAA1B,EAAmC,QAAA,CAAA,SAAA,CAAU,cAAV,CAAyB,YAAzB,CAAnC,EAA2E,MAA3E,CAAP;AACD;;AAYD,MAAY,OAAZ,GAAmB;AACjB,WAAO,UAAA,CAAA,MAAA,CAAO,MAAP,CAAc,KAAK,MAAnB,EAA2B,OAAA,CAAA,8BAAA,CAA+B,KAAK,MAApC,CAA3B,CAAP;AACD;;AAEM,QAAM,WAAN,GAAiB;AACtB,WAAO,CACL;AACE,MAAA,IAAI,EAAE,WADR;AAEE,MAAA,OAAO,EAAE,KAAK,OAFhB;AAGE,MAAA,MAAM,EAAE,KAAK;AAHf,KADK,CAAP;AAOD;;AAEM,QAAM,UAAN,CAAiB,OAAjB,EAAkC,OAAlC,EAAkD;AACvD,UAAM,SAAS,GAAG,SAAA,CAAA,aAAA,CAAc,OAAd,CAAlB;;AACA,QAAI,OAAO,KAAK,KAAK,OAArB,EAA8B;AAC5B,YAAM,IAAI,KAAJ,CAAU,WAAW,OAAO,sBAA5B,CAAN;AACD;;AACD,UAAM,aAAa,GAAG,QAAA,CAAA,MAAA,CAAO,SAAP,CAAtB;AACA,UAAM,SAAS,GAAG,MAAM,QAAA,CAAA,SAAA,CAAU,eAAV,CAA0B,aAA1B,EAAyC,KAAK,OAA9C,CAAxB;AACA,UAAM,cAAc,GAAG,IAAI,UAAJ,CAAe,CAAC,GAAG,SAAS,CAAC,CAAV,CAAY,EAAZ,CAAJ,EAAqB,GAAG,SAAS,CAAC,CAAV,CAAY,EAAZ,CAAxB,CAAf,CAAvB;AACA,UAAM,YAAY,GAAG,OAAA,CAAA,wBAAA,CAAyB,KAAK,MAA9B,EAAsC,cAAtC,CAArB;AACA,WAAO;AACL,MAAA,MAAM,EAAE,OADH;AAEL,MAAA,SAAS,EAAE;AAFN,KAAP;AAID;;AAjD+B;;AAAlC,OAAA,CAAA,qBAAA,GAAA,qBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DirectSecp256k1Wallet = void 0;\nconst amino_1 = require(\"@cosmjs/amino\");\nconst crypto_1 = require(\"@cosmjs/crypto\");\nconst encoding_1 = require(\"@cosmjs/encoding\");\nconst signing_1 = require(\"./signing\");\n/**\n * A wallet that holds a single secp256k1 keypair.\n *\n * If you want to work with BIP39 mnemonics and multiple accounts, use DirectSecp256k1HdWallet.\n */\nclass DirectSecp256k1Wallet {\n    constructor(privkey, pubkey, prefix) {\n        this.privkey = privkey;\n        this.pubkey = pubkey;\n        this.prefix = prefix;\n    }\n    /**\n     * Creates a DirectSecp256k1Wallet from the given private key\n     *\n     * @param privkey The private key.\n     * @param prefix The bech32 address prefix (human readable part). Defaults to \"cosmos\".\n     */\n    static async fromKey(privkey, prefix = \"cosmos\") {\n        const uncompressed = (await crypto_1.Secp256k1.makeKeypair(privkey)).pubkey;\n        return new DirectSecp256k1Wallet(privkey, crypto_1.Secp256k1.compressPubkey(uncompressed), prefix);\n    }\n    get address() {\n        return encoding_1.Bech32.encode(this.prefix, amino_1.rawSecp256k1PubkeyToRawAddress(this.pubkey));\n    }\n    async getAccounts() {\n        return [\n            {\n                algo: \"secp256k1\",\n                address: this.address,\n                pubkey: this.pubkey,\n            },\n        ];\n    }\n    async signDirect(address, signDoc) {\n        const signBytes = signing_1.makeSignBytes(signDoc);\n        if (address !== this.address) {\n            throw new Error(`Address ${address} not found in wallet`);\n        }\n        const hashedMessage = crypto_1.sha256(signBytes);\n        const signature = await crypto_1.Secp256k1.createSignature(hashedMessage, this.privkey);\n        const signatureBytes = new Uint8Array([...signature.r(32), ...signature.s(32)]);\n        const stdSignature = amino_1.encodeSecp256k1Signature(this.pubkey, signatureBytes);\n        return {\n            signed: signDoc,\n            signature: stdSignature,\n        };\n    }\n}\nexports.DirectSecp256k1Wallet = DirectSecp256k1Wallet;\n//# sourceMappingURL=directsecp256k1wallet.js.map"]},"metadata":{},"sourceType":"script"}