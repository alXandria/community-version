{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.QueryClientImpl = exports.QueryParamsResponse = exports.QueryParamsRequest = exports.QueryPoolResponse = exports.QueryPoolRequest = exports.QueryHistoricalInfoResponse = exports.QueryHistoricalInfoRequest = exports.QueryDelegatorValidatorResponse = exports.QueryDelegatorValidatorRequest = exports.QueryDelegatorValidatorsResponse = exports.QueryDelegatorValidatorsRequest = exports.QueryRedelegationsResponse = exports.QueryRedelegationsRequest = exports.QueryDelegatorUnbondingDelegationsResponse = exports.QueryDelegatorUnbondingDelegationsRequest = exports.QueryDelegatorDelegationsResponse = exports.QueryDelegatorDelegationsRequest = exports.QueryUnbondingDelegationResponse = exports.QueryUnbondingDelegationRequest = exports.QueryDelegationResponse = exports.QueryDelegationRequest = exports.QueryValidatorUnbondingDelegationsResponse = exports.QueryValidatorUnbondingDelegationsRequest = exports.QueryValidatorDelegationsResponse = exports.QueryValidatorDelegationsRequest = exports.QueryValidatorResponse = exports.QueryValidatorRequest = exports.QueryValidatorsResponse = exports.QueryValidatorsRequest = exports.protobufPackage = void 0;\n/* eslint-disable */\n\nconst long_1 = __importDefault(require(\"long\"));\n\nconst minimal_1 = __importDefault(require(\"protobufjs/minimal\"));\n\nconst pagination_1 = require(\"../../../cosmos/base/query/v1beta1/pagination\");\n\nconst staking_1 = require(\"../../../cosmos/staking/v1beta1/staking\");\n\nexports.protobufPackage = \"cosmos.staking.v1beta1\";\nconst baseQueryValidatorsRequest = {\n  status: \"\"\n};\nexports.QueryValidatorsRequest = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.status !== \"\") {\n      writer.uint32(10).string(message.status);\n    }\n\n    if (message.pagination !== undefined) {\n      pagination_1.PageRequest.encode(message.pagination, writer.uint32(18).fork()).ldelim();\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseQueryValidatorsRequest);\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.status = reader.string();\n          break;\n\n        case 2:\n          message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseQueryValidatorsRequest);\n\n    if (object.status !== undefined && object.status !== null) {\n      message.status = String(object.status);\n    } else {\n      message.status = \"\";\n    }\n\n    if (object.pagination !== undefined && object.pagination !== null) {\n      message.pagination = pagination_1.PageRequest.fromJSON(object.pagination);\n    } else {\n      message.pagination = undefined;\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.status !== undefined && (obj.status = message.status);\n    message.pagination !== undefined && (obj.pagination = message.pagination ? pagination_1.PageRequest.toJSON(message.pagination) : undefined);\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseQueryValidatorsRequest);\n\n    if (object.status !== undefined && object.status !== null) {\n      message.status = object.status;\n    } else {\n      message.status = \"\";\n    }\n\n    if (object.pagination !== undefined && object.pagination !== null) {\n      message.pagination = pagination_1.PageRequest.fromPartial(object.pagination);\n    } else {\n      message.pagination = undefined;\n    }\n\n    return message;\n  }\n\n};\nconst baseQueryValidatorsResponse = {};\nexports.QueryValidatorsResponse = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    for (const v of message.validators) {\n      staking_1.Validator.encode(v, writer.uint32(10).fork()).ldelim();\n    }\n\n    if (message.pagination !== undefined) {\n      pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseQueryValidatorsResponse);\n    message.validators = [];\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.validators.push(staking_1.Validator.decode(reader, reader.uint32()));\n          break;\n\n        case 2:\n          message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseQueryValidatorsResponse);\n    message.validators = [];\n\n    if (object.validators !== undefined && object.validators !== null) {\n      for (const e of object.validators) {\n        message.validators.push(staking_1.Validator.fromJSON(e));\n      }\n    }\n\n    if (object.pagination !== undefined && object.pagination !== null) {\n      message.pagination = pagination_1.PageResponse.fromJSON(object.pagination);\n    } else {\n      message.pagination = undefined;\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n\n    if (message.validators) {\n      obj.validators = message.validators.map(e => e ? staking_1.Validator.toJSON(e) : undefined);\n    } else {\n      obj.validators = [];\n    }\n\n    message.pagination !== undefined && (obj.pagination = message.pagination ? pagination_1.PageResponse.toJSON(message.pagination) : undefined);\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseQueryValidatorsResponse);\n    message.validators = [];\n\n    if (object.validators !== undefined && object.validators !== null) {\n      for (const e of object.validators) {\n        message.validators.push(staking_1.Validator.fromPartial(e));\n      }\n    }\n\n    if (object.pagination !== undefined && object.pagination !== null) {\n      message.pagination = pagination_1.PageResponse.fromPartial(object.pagination);\n    } else {\n      message.pagination = undefined;\n    }\n\n    return message;\n  }\n\n};\nconst baseQueryValidatorRequest = {\n  validatorAddr: \"\"\n};\nexports.QueryValidatorRequest = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.validatorAddr !== \"\") {\n      writer.uint32(10).string(message.validatorAddr);\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseQueryValidatorRequest);\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.validatorAddr = reader.string();\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseQueryValidatorRequest);\n\n    if (object.validatorAddr !== undefined && object.validatorAddr !== null) {\n      message.validatorAddr = String(object.validatorAddr);\n    } else {\n      message.validatorAddr = \"\";\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.validatorAddr !== undefined && (obj.validatorAddr = message.validatorAddr);\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseQueryValidatorRequest);\n\n    if (object.validatorAddr !== undefined && object.validatorAddr !== null) {\n      message.validatorAddr = object.validatorAddr;\n    } else {\n      message.validatorAddr = \"\";\n    }\n\n    return message;\n  }\n\n};\nconst baseQueryValidatorResponse = {};\nexports.QueryValidatorResponse = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.validator !== undefined) {\n      staking_1.Validator.encode(message.validator, writer.uint32(10).fork()).ldelim();\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseQueryValidatorResponse);\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.validator = staking_1.Validator.decode(reader, reader.uint32());\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseQueryValidatorResponse);\n\n    if (object.validator !== undefined && object.validator !== null) {\n      message.validator = staking_1.Validator.fromJSON(object.validator);\n    } else {\n      message.validator = undefined;\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.validator !== undefined && (obj.validator = message.validator ? staking_1.Validator.toJSON(message.validator) : undefined);\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseQueryValidatorResponse);\n\n    if (object.validator !== undefined && object.validator !== null) {\n      message.validator = staking_1.Validator.fromPartial(object.validator);\n    } else {\n      message.validator = undefined;\n    }\n\n    return message;\n  }\n\n};\nconst baseQueryValidatorDelegationsRequest = {\n  validatorAddr: \"\"\n};\nexports.QueryValidatorDelegationsRequest = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.validatorAddr !== \"\") {\n      writer.uint32(10).string(message.validatorAddr);\n    }\n\n    if (message.pagination !== undefined) {\n      pagination_1.PageRequest.encode(message.pagination, writer.uint32(18).fork()).ldelim();\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseQueryValidatorDelegationsRequest);\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.validatorAddr = reader.string();\n          break;\n\n        case 2:\n          message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseQueryValidatorDelegationsRequest);\n\n    if (object.validatorAddr !== undefined && object.validatorAddr !== null) {\n      message.validatorAddr = String(object.validatorAddr);\n    } else {\n      message.validatorAddr = \"\";\n    }\n\n    if (object.pagination !== undefined && object.pagination !== null) {\n      message.pagination = pagination_1.PageRequest.fromJSON(object.pagination);\n    } else {\n      message.pagination = undefined;\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.validatorAddr !== undefined && (obj.validatorAddr = message.validatorAddr);\n    message.pagination !== undefined && (obj.pagination = message.pagination ? pagination_1.PageRequest.toJSON(message.pagination) : undefined);\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseQueryValidatorDelegationsRequest);\n\n    if (object.validatorAddr !== undefined && object.validatorAddr !== null) {\n      message.validatorAddr = object.validatorAddr;\n    } else {\n      message.validatorAddr = \"\";\n    }\n\n    if (object.pagination !== undefined && object.pagination !== null) {\n      message.pagination = pagination_1.PageRequest.fromPartial(object.pagination);\n    } else {\n      message.pagination = undefined;\n    }\n\n    return message;\n  }\n\n};\nconst baseQueryValidatorDelegationsResponse = {};\nexports.QueryValidatorDelegationsResponse = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    for (const v of message.delegationResponses) {\n      staking_1.DelegationResponse.encode(v, writer.uint32(10).fork()).ldelim();\n    }\n\n    if (message.pagination !== undefined) {\n      pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseQueryValidatorDelegationsResponse);\n    message.delegationResponses = [];\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.delegationResponses.push(staking_1.DelegationResponse.decode(reader, reader.uint32()));\n          break;\n\n        case 2:\n          message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseQueryValidatorDelegationsResponse);\n    message.delegationResponses = [];\n\n    if (object.delegationResponses !== undefined && object.delegationResponses !== null) {\n      for (const e of object.delegationResponses) {\n        message.delegationResponses.push(staking_1.DelegationResponse.fromJSON(e));\n      }\n    }\n\n    if (object.pagination !== undefined && object.pagination !== null) {\n      message.pagination = pagination_1.PageResponse.fromJSON(object.pagination);\n    } else {\n      message.pagination = undefined;\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n\n    if (message.delegationResponses) {\n      obj.delegationResponses = message.delegationResponses.map(e => e ? staking_1.DelegationResponse.toJSON(e) : undefined);\n    } else {\n      obj.delegationResponses = [];\n    }\n\n    message.pagination !== undefined && (obj.pagination = message.pagination ? pagination_1.PageResponse.toJSON(message.pagination) : undefined);\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseQueryValidatorDelegationsResponse);\n    message.delegationResponses = [];\n\n    if (object.delegationResponses !== undefined && object.delegationResponses !== null) {\n      for (const e of object.delegationResponses) {\n        message.delegationResponses.push(staking_1.DelegationResponse.fromPartial(e));\n      }\n    }\n\n    if (object.pagination !== undefined && object.pagination !== null) {\n      message.pagination = pagination_1.PageResponse.fromPartial(object.pagination);\n    } else {\n      message.pagination = undefined;\n    }\n\n    return message;\n  }\n\n};\nconst baseQueryValidatorUnbondingDelegationsRequest = {\n  validatorAddr: \"\"\n};\nexports.QueryValidatorUnbondingDelegationsRequest = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.validatorAddr !== \"\") {\n      writer.uint32(10).string(message.validatorAddr);\n    }\n\n    if (message.pagination !== undefined) {\n      pagination_1.PageRequest.encode(message.pagination, writer.uint32(18).fork()).ldelim();\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseQueryValidatorUnbondingDelegationsRequest);\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.validatorAddr = reader.string();\n          break;\n\n        case 2:\n          message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseQueryValidatorUnbondingDelegationsRequest);\n\n    if (object.validatorAddr !== undefined && object.validatorAddr !== null) {\n      message.validatorAddr = String(object.validatorAddr);\n    } else {\n      message.validatorAddr = \"\";\n    }\n\n    if (object.pagination !== undefined && object.pagination !== null) {\n      message.pagination = pagination_1.PageRequest.fromJSON(object.pagination);\n    } else {\n      message.pagination = undefined;\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.validatorAddr !== undefined && (obj.validatorAddr = message.validatorAddr);\n    message.pagination !== undefined && (obj.pagination = message.pagination ? pagination_1.PageRequest.toJSON(message.pagination) : undefined);\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseQueryValidatorUnbondingDelegationsRequest);\n\n    if (object.validatorAddr !== undefined && object.validatorAddr !== null) {\n      message.validatorAddr = object.validatorAddr;\n    } else {\n      message.validatorAddr = \"\";\n    }\n\n    if (object.pagination !== undefined && object.pagination !== null) {\n      message.pagination = pagination_1.PageRequest.fromPartial(object.pagination);\n    } else {\n      message.pagination = undefined;\n    }\n\n    return message;\n  }\n\n};\nconst baseQueryValidatorUnbondingDelegationsResponse = {};\nexports.QueryValidatorUnbondingDelegationsResponse = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    for (const v of message.unbondingResponses) {\n      staking_1.UnbondingDelegation.encode(v, writer.uint32(10).fork()).ldelim();\n    }\n\n    if (message.pagination !== undefined) {\n      pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseQueryValidatorUnbondingDelegationsResponse);\n    message.unbondingResponses = [];\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.unbondingResponses.push(staking_1.UnbondingDelegation.decode(reader, reader.uint32()));\n          break;\n\n        case 2:\n          message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseQueryValidatorUnbondingDelegationsResponse);\n    message.unbondingResponses = [];\n\n    if (object.unbondingResponses !== undefined && object.unbondingResponses !== null) {\n      for (const e of object.unbondingResponses) {\n        message.unbondingResponses.push(staking_1.UnbondingDelegation.fromJSON(e));\n      }\n    }\n\n    if (object.pagination !== undefined && object.pagination !== null) {\n      message.pagination = pagination_1.PageResponse.fromJSON(object.pagination);\n    } else {\n      message.pagination = undefined;\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n\n    if (message.unbondingResponses) {\n      obj.unbondingResponses = message.unbondingResponses.map(e => e ? staking_1.UnbondingDelegation.toJSON(e) : undefined);\n    } else {\n      obj.unbondingResponses = [];\n    }\n\n    message.pagination !== undefined && (obj.pagination = message.pagination ? pagination_1.PageResponse.toJSON(message.pagination) : undefined);\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseQueryValidatorUnbondingDelegationsResponse);\n    message.unbondingResponses = [];\n\n    if (object.unbondingResponses !== undefined && object.unbondingResponses !== null) {\n      for (const e of object.unbondingResponses) {\n        message.unbondingResponses.push(staking_1.UnbondingDelegation.fromPartial(e));\n      }\n    }\n\n    if (object.pagination !== undefined && object.pagination !== null) {\n      message.pagination = pagination_1.PageResponse.fromPartial(object.pagination);\n    } else {\n      message.pagination = undefined;\n    }\n\n    return message;\n  }\n\n};\nconst baseQueryDelegationRequest = {\n  delegatorAddr: \"\",\n  validatorAddr: \"\"\n};\nexports.QueryDelegationRequest = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.delegatorAddr !== \"\") {\n      writer.uint32(10).string(message.delegatorAddr);\n    }\n\n    if (message.validatorAddr !== \"\") {\n      writer.uint32(18).string(message.validatorAddr);\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseQueryDelegationRequest);\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.delegatorAddr = reader.string();\n          break;\n\n        case 2:\n          message.validatorAddr = reader.string();\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseQueryDelegationRequest);\n\n    if (object.delegatorAddr !== undefined && object.delegatorAddr !== null) {\n      message.delegatorAddr = String(object.delegatorAddr);\n    } else {\n      message.delegatorAddr = \"\";\n    }\n\n    if (object.validatorAddr !== undefined && object.validatorAddr !== null) {\n      message.validatorAddr = String(object.validatorAddr);\n    } else {\n      message.validatorAddr = \"\";\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.delegatorAddr !== undefined && (obj.delegatorAddr = message.delegatorAddr);\n    message.validatorAddr !== undefined && (obj.validatorAddr = message.validatorAddr);\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseQueryDelegationRequest);\n\n    if (object.delegatorAddr !== undefined && object.delegatorAddr !== null) {\n      message.delegatorAddr = object.delegatorAddr;\n    } else {\n      message.delegatorAddr = \"\";\n    }\n\n    if (object.validatorAddr !== undefined && object.validatorAddr !== null) {\n      message.validatorAddr = object.validatorAddr;\n    } else {\n      message.validatorAddr = \"\";\n    }\n\n    return message;\n  }\n\n};\nconst baseQueryDelegationResponse = {};\nexports.QueryDelegationResponse = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.delegationResponse !== undefined) {\n      staking_1.DelegationResponse.encode(message.delegationResponse, writer.uint32(10).fork()).ldelim();\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseQueryDelegationResponse);\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.delegationResponse = staking_1.DelegationResponse.decode(reader, reader.uint32());\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseQueryDelegationResponse);\n\n    if (object.delegationResponse !== undefined && object.delegationResponse !== null) {\n      message.delegationResponse = staking_1.DelegationResponse.fromJSON(object.delegationResponse);\n    } else {\n      message.delegationResponse = undefined;\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.delegationResponse !== undefined && (obj.delegationResponse = message.delegationResponse ? staking_1.DelegationResponse.toJSON(message.delegationResponse) : undefined);\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseQueryDelegationResponse);\n\n    if (object.delegationResponse !== undefined && object.delegationResponse !== null) {\n      message.delegationResponse = staking_1.DelegationResponse.fromPartial(object.delegationResponse);\n    } else {\n      message.delegationResponse = undefined;\n    }\n\n    return message;\n  }\n\n};\nconst baseQueryUnbondingDelegationRequest = {\n  delegatorAddr: \"\",\n  validatorAddr: \"\"\n};\nexports.QueryUnbondingDelegationRequest = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.delegatorAddr !== \"\") {\n      writer.uint32(10).string(message.delegatorAddr);\n    }\n\n    if (message.validatorAddr !== \"\") {\n      writer.uint32(18).string(message.validatorAddr);\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseQueryUnbondingDelegationRequest);\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.delegatorAddr = reader.string();\n          break;\n\n        case 2:\n          message.validatorAddr = reader.string();\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseQueryUnbondingDelegationRequest);\n\n    if (object.delegatorAddr !== undefined && object.delegatorAddr !== null) {\n      message.delegatorAddr = String(object.delegatorAddr);\n    } else {\n      message.delegatorAddr = \"\";\n    }\n\n    if (object.validatorAddr !== undefined && object.validatorAddr !== null) {\n      message.validatorAddr = String(object.validatorAddr);\n    } else {\n      message.validatorAddr = \"\";\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.delegatorAddr !== undefined && (obj.delegatorAddr = message.delegatorAddr);\n    message.validatorAddr !== undefined && (obj.validatorAddr = message.validatorAddr);\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseQueryUnbondingDelegationRequest);\n\n    if (object.delegatorAddr !== undefined && object.delegatorAddr !== null) {\n      message.delegatorAddr = object.delegatorAddr;\n    } else {\n      message.delegatorAddr = \"\";\n    }\n\n    if (object.validatorAddr !== undefined && object.validatorAddr !== null) {\n      message.validatorAddr = object.validatorAddr;\n    } else {\n      message.validatorAddr = \"\";\n    }\n\n    return message;\n  }\n\n};\nconst baseQueryUnbondingDelegationResponse = {};\nexports.QueryUnbondingDelegationResponse = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.unbond !== undefined) {\n      staking_1.UnbondingDelegation.encode(message.unbond, writer.uint32(10).fork()).ldelim();\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseQueryUnbondingDelegationResponse);\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.unbond = staking_1.UnbondingDelegation.decode(reader, reader.uint32());\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseQueryUnbondingDelegationResponse);\n\n    if (object.unbond !== undefined && object.unbond !== null) {\n      message.unbond = staking_1.UnbondingDelegation.fromJSON(object.unbond);\n    } else {\n      message.unbond = undefined;\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.unbond !== undefined && (obj.unbond = message.unbond ? staking_1.UnbondingDelegation.toJSON(message.unbond) : undefined);\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseQueryUnbondingDelegationResponse);\n\n    if (object.unbond !== undefined && object.unbond !== null) {\n      message.unbond = staking_1.UnbondingDelegation.fromPartial(object.unbond);\n    } else {\n      message.unbond = undefined;\n    }\n\n    return message;\n  }\n\n};\nconst baseQueryDelegatorDelegationsRequest = {\n  delegatorAddr: \"\"\n};\nexports.QueryDelegatorDelegationsRequest = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.delegatorAddr !== \"\") {\n      writer.uint32(10).string(message.delegatorAddr);\n    }\n\n    if (message.pagination !== undefined) {\n      pagination_1.PageRequest.encode(message.pagination, writer.uint32(18).fork()).ldelim();\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseQueryDelegatorDelegationsRequest);\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.delegatorAddr = reader.string();\n          break;\n\n        case 2:\n          message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseQueryDelegatorDelegationsRequest);\n\n    if (object.delegatorAddr !== undefined && object.delegatorAddr !== null) {\n      message.delegatorAddr = String(object.delegatorAddr);\n    } else {\n      message.delegatorAddr = \"\";\n    }\n\n    if (object.pagination !== undefined && object.pagination !== null) {\n      message.pagination = pagination_1.PageRequest.fromJSON(object.pagination);\n    } else {\n      message.pagination = undefined;\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.delegatorAddr !== undefined && (obj.delegatorAddr = message.delegatorAddr);\n    message.pagination !== undefined && (obj.pagination = message.pagination ? pagination_1.PageRequest.toJSON(message.pagination) : undefined);\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseQueryDelegatorDelegationsRequest);\n\n    if (object.delegatorAddr !== undefined && object.delegatorAddr !== null) {\n      message.delegatorAddr = object.delegatorAddr;\n    } else {\n      message.delegatorAddr = \"\";\n    }\n\n    if (object.pagination !== undefined && object.pagination !== null) {\n      message.pagination = pagination_1.PageRequest.fromPartial(object.pagination);\n    } else {\n      message.pagination = undefined;\n    }\n\n    return message;\n  }\n\n};\nconst baseQueryDelegatorDelegationsResponse = {};\nexports.QueryDelegatorDelegationsResponse = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    for (const v of message.delegationResponses) {\n      staking_1.DelegationResponse.encode(v, writer.uint32(10).fork()).ldelim();\n    }\n\n    if (message.pagination !== undefined) {\n      pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseQueryDelegatorDelegationsResponse);\n    message.delegationResponses = [];\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.delegationResponses.push(staking_1.DelegationResponse.decode(reader, reader.uint32()));\n          break;\n\n        case 2:\n          message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseQueryDelegatorDelegationsResponse);\n    message.delegationResponses = [];\n\n    if (object.delegationResponses !== undefined && object.delegationResponses !== null) {\n      for (const e of object.delegationResponses) {\n        message.delegationResponses.push(staking_1.DelegationResponse.fromJSON(e));\n      }\n    }\n\n    if (object.pagination !== undefined && object.pagination !== null) {\n      message.pagination = pagination_1.PageResponse.fromJSON(object.pagination);\n    } else {\n      message.pagination = undefined;\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n\n    if (message.delegationResponses) {\n      obj.delegationResponses = message.delegationResponses.map(e => e ? staking_1.DelegationResponse.toJSON(e) : undefined);\n    } else {\n      obj.delegationResponses = [];\n    }\n\n    message.pagination !== undefined && (obj.pagination = message.pagination ? pagination_1.PageResponse.toJSON(message.pagination) : undefined);\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseQueryDelegatorDelegationsResponse);\n    message.delegationResponses = [];\n\n    if (object.delegationResponses !== undefined && object.delegationResponses !== null) {\n      for (const e of object.delegationResponses) {\n        message.delegationResponses.push(staking_1.DelegationResponse.fromPartial(e));\n      }\n    }\n\n    if (object.pagination !== undefined && object.pagination !== null) {\n      message.pagination = pagination_1.PageResponse.fromPartial(object.pagination);\n    } else {\n      message.pagination = undefined;\n    }\n\n    return message;\n  }\n\n};\nconst baseQueryDelegatorUnbondingDelegationsRequest = {\n  delegatorAddr: \"\"\n};\nexports.QueryDelegatorUnbondingDelegationsRequest = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.delegatorAddr !== \"\") {\n      writer.uint32(10).string(message.delegatorAddr);\n    }\n\n    if (message.pagination !== undefined) {\n      pagination_1.PageRequest.encode(message.pagination, writer.uint32(18).fork()).ldelim();\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseQueryDelegatorUnbondingDelegationsRequest);\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.delegatorAddr = reader.string();\n          break;\n\n        case 2:\n          message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseQueryDelegatorUnbondingDelegationsRequest);\n\n    if (object.delegatorAddr !== undefined && object.delegatorAddr !== null) {\n      message.delegatorAddr = String(object.delegatorAddr);\n    } else {\n      message.delegatorAddr = \"\";\n    }\n\n    if (object.pagination !== undefined && object.pagination !== null) {\n      message.pagination = pagination_1.PageRequest.fromJSON(object.pagination);\n    } else {\n      message.pagination = undefined;\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.delegatorAddr !== undefined && (obj.delegatorAddr = message.delegatorAddr);\n    message.pagination !== undefined && (obj.pagination = message.pagination ? pagination_1.PageRequest.toJSON(message.pagination) : undefined);\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseQueryDelegatorUnbondingDelegationsRequest);\n\n    if (object.delegatorAddr !== undefined && object.delegatorAddr !== null) {\n      message.delegatorAddr = object.delegatorAddr;\n    } else {\n      message.delegatorAddr = \"\";\n    }\n\n    if (object.pagination !== undefined && object.pagination !== null) {\n      message.pagination = pagination_1.PageRequest.fromPartial(object.pagination);\n    } else {\n      message.pagination = undefined;\n    }\n\n    return message;\n  }\n\n};\nconst baseQueryDelegatorUnbondingDelegationsResponse = {};\nexports.QueryDelegatorUnbondingDelegationsResponse = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    for (const v of message.unbondingResponses) {\n      staking_1.UnbondingDelegation.encode(v, writer.uint32(10).fork()).ldelim();\n    }\n\n    if (message.pagination !== undefined) {\n      pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseQueryDelegatorUnbondingDelegationsResponse);\n    message.unbondingResponses = [];\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.unbondingResponses.push(staking_1.UnbondingDelegation.decode(reader, reader.uint32()));\n          break;\n\n        case 2:\n          message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseQueryDelegatorUnbondingDelegationsResponse);\n    message.unbondingResponses = [];\n\n    if (object.unbondingResponses !== undefined && object.unbondingResponses !== null) {\n      for (const e of object.unbondingResponses) {\n        message.unbondingResponses.push(staking_1.UnbondingDelegation.fromJSON(e));\n      }\n    }\n\n    if (object.pagination !== undefined && object.pagination !== null) {\n      message.pagination = pagination_1.PageResponse.fromJSON(object.pagination);\n    } else {\n      message.pagination = undefined;\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n\n    if (message.unbondingResponses) {\n      obj.unbondingResponses = message.unbondingResponses.map(e => e ? staking_1.UnbondingDelegation.toJSON(e) : undefined);\n    } else {\n      obj.unbondingResponses = [];\n    }\n\n    message.pagination !== undefined && (obj.pagination = message.pagination ? pagination_1.PageResponse.toJSON(message.pagination) : undefined);\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseQueryDelegatorUnbondingDelegationsResponse);\n    message.unbondingResponses = [];\n\n    if (object.unbondingResponses !== undefined && object.unbondingResponses !== null) {\n      for (const e of object.unbondingResponses) {\n        message.unbondingResponses.push(staking_1.UnbondingDelegation.fromPartial(e));\n      }\n    }\n\n    if (object.pagination !== undefined && object.pagination !== null) {\n      message.pagination = pagination_1.PageResponse.fromPartial(object.pagination);\n    } else {\n      message.pagination = undefined;\n    }\n\n    return message;\n  }\n\n};\nconst baseQueryRedelegationsRequest = {\n  delegatorAddr: \"\",\n  srcValidatorAddr: \"\",\n  dstValidatorAddr: \"\"\n};\nexports.QueryRedelegationsRequest = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.delegatorAddr !== \"\") {\n      writer.uint32(10).string(message.delegatorAddr);\n    }\n\n    if (message.srcValidatorAddr !== \"\") {\n      writer.uint32(18).string(message.srcValidatorAddr);\n    }\n\n    if (message.dstValidatorAddr !== \"\") {\n      writer.uint32(26).string(message.dstValidatorAddr);\n    }\n\n    if (message.pagination !== undefined) {\n      pagination_1.PageRequest.encode(message.pagination, writer.uint32(34).fork()).ldelim();\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseQueryRedelegationsRequest);\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.delegatorAddr = reader.string();\n          break;\n\n        case 2:\n          message.srcValidatorAddr = reader.string();\n          break;\n\n        case 3:\n          message.dstValidatorAddr = reader.string();\n          break;\n\n        case 4:\n          message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseQueryRedelegationsRequest);\n\n    if (object.delegatorAddr !== undefined && object.delegatorAddr !== null) {\n      message.delegatorAddr = String(object.delegatorAddr);\n    } else {\n      message.delegatorAddr = \"\";\n    }\n\n    if (object.srcValidatorAddr !== undefined && object.srcValidatorAddr !== null) {\n      message.srcValidatorAddr = String(object.srcValidatorAddr);\n    } else {\n      message.srcValidatorAddr = \"\";\n    }\n\n    if (object.dstValidatorAddr !== undefined && object.dstValidatorAddr !== null) {\n      message.dstValidatorAddr = String(object.dstValidatorAddr);\n    } else {\n      message.dstValidatorAddr = \"\";\n    }\n\n    if (object.pagination !== undefined && object.pagination !== null) {\n      message.pagination = pagination_1.PageRequest.fromJSON(object.pagination);\n    } else {\n      message.pagination = undefined;\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.delegatorAddr !== undefined && (obj.delegatorAddr = message.delegatorAddr);\n    message.srcValidatorAddr !== undefined && (obj.srcValidatorAddr = message.srcValidatorAddr);\n    message.dstValidatorAddr !== undefined && (obj.dstValidatorAddr = message.dstValidatorAddr);\n    message.pagination !== undefined && (obj.pagination = message.pagination ? pagination_1.PageRequest.toJSON(message.pagination) : undefined);\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseQueryRedelegationsRequest);\n\n    if (object.delegatorAddr !== undefined && object.delegatorAddr !== null) {\n      message.delegatorAddr = object.delegatorAddr;\n    } else {\n      message.delegatorAddr = \"\";\n    }\n\n    if (object.srcValidatorAddr !== undefined && object.srcValidatorAddr !== null) {\n      message.srcValidatorAddr = object.srcValidatorAddr;\n    } else {\n      message.srcValidatorAddr = \"\";\n    }\n\n    if (object.dstValidatorAddr !== undefined && object.dstValidatorAddr !== null) {\n      message.dstValidatorAddr = object.dstValidatorAddr;\n    } else {\n      message.dstValidatorAddr = \"\";\n    }\n\n    if (object.pagination !== undefined && object.pagination !== null) {\n      message.pagination = pagination_1.PageRequest.fromPartial(object.pagination);\n    } else {\n      message.pagination = undefined;\n    }\n\n    return message;\n  }\n\n};\nconst baseQueryRedelegationsResponse = {};\nexports.QueryRedelegationsResponse = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    for (const v of message.redelegationResponses) {\n      staking_1.RedelegationResponse.encode(v, writer.uint32(10).fork()).ldelim();\n    }\n\n    if (message.pagination !== undefined) {\n      pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseQueryRedelegationsResponse);\n    message.redelegationResponses = [];\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.redelegationResponses.push(staking_1.RedelegationResponse.decode(reader, reader.uint32()));\n          break;\n\n        case 2:\n          message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseQueryRedelegationsResponse);\n    message.redelegationResponses = [];\n\n    if (object.redelegationResponses !== undefined && object.redelegationResponses !== null) {\n      for (const e of object.redelegationResponses) {\n        message.redelegationResponses.push(staking_1.RedelegationResponse.fromJSON(e));\n      }\n    }\n\n    if (object.pagination !== undefined && object.pagination !== null) {\n      message.pagination = pagination_1.PageResponse.fromJSON(object.pagination);\n    } else {\n      message.pagination = undefined;\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n\n    if (message.redelegationResponses) {\n      obj.redelegationResponses = message.redelegationResponses.map(e => e ? staking_1.RedelegationResponse.toJSON(e) : undefined);\n    } else {\n      obj.redelegationResponses = [];\n    }\n\n    message.pagination !== undefined && (obj.pagination = message.pagination ? pagination_1.PageResponse.toJSON(message.pagination) : undefined);\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseQueryRedelegationsResponse);\n    message.redelegationResponses = [];\n\n    if (object.redelegationResponses !== undefined && object.redelegationResponses !== null) {\n      for (const e of object.redelegationResponses) {\n        message.redelegationResponses.push(staking_1.RedelegationResponse.fromPartial(e));\n      }\n    }\n\n    if (object.pagination !== undefined && object.pagination !== null) {\n      message.pagination = pagination_1.PageResponse.fromPartial(object.pagination);\n    } else {\n      message.pagination = undefined;\n    }\n\n    return message;\n  }\n\n};\nconst baseQueryDelegatorValidatorsRequest = {\n  delegatorAddr: \"\"\n};\nexports.QueryDelegatorValidatorsRequest = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.delegatorAddr !== \"\") {\n      writer.uint32(10).string(message.delegatorAddr);\n    }\n\n    if (message.pagination !== undefined) {\n      pagination_1.PageRequest.encode(message.pagination, writer.uint32(18).fork()).ldelim();\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseQueryDelegatorValidatorsRequest);\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.delegatorAddr = reader.string();\n          break;\n\n        case 2:\n          message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseQueryDelegatorValidatorsRequest);\n\n    if (object.delegatorAddr !== undefined && object.delegatorAddr !== null) {\n      message.delegatorAddr = String(object.delegatorAddr);\n    } else {\n      message.delegatorAddr = \"\";\n    }\n\n    if (object.pagination !== undefined && object.pagination !== null) {\n      message.pagination = pagination_1.PageRequest.fromJSON(object.pagination);\n    } else {\n      message.pagination = undefined;\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.delegatorAddr !== undefined && (obj.delegatorAddr = message.delegatorAddr);\n    message.pagination !== undefined && (obj.pagination = message.pagination ? pagination_1.PageRequest.toJSON(message.pagination) : undefined);\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseQueryDelegatorValidatorsRequest);\n\n    if (object.delegatorAddr !== undefined && object.delegatorAddr !== null) {\n      message.delegatorAddr = object.delegatorAddr;\n    } else {\n      message.delegatorAddr = \"\";\n    }\n\n    if (object.pagination !== undefined && object.pagination !== null) {\n      message.pagination = pagination_1.PageRequest.fromPartial(object.pagination);\n    } else {\n      message.pagination = undefined;\n    }\n\n    return message;\n  }\n\n};\nconst baseQueryDelegatorValidatorsResponse = {};\nexports.QueryDelegatorValidatorsResponse = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    for (const v of message.validators) {\n      staking_1.Validator.encode(v, writer.uint32(10).fork()).ldelim();\n    }\n\n    if (message.pagination !== undefined) {\n      pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseQueryDelegatorValidatorsResponse);\n    message.validators = [];\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.validators.push(staking_1.Validator.decode(reader, reader.uint32()));\n          break;\n\n        case 2:\n          message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseQueryDelegatorValidatorsResponse);\n    message.validators = [];\n\n    if (object.validators !== undefined && object.validators !== null) {\n      for (const e of object.validators) {\n        message.validators.push(staking_1.Validator.fromJSON(e));\n      }\n    }\n\n    if (object.pagination !== undefined && object.pagination !== null) {\n      message.pagination = pagination_1.PageResponse.fromJSON(object.pagination);\n    } else {\n      message.pagination = undefined;\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n\n    if (message.validators) {\n      obj.validators = message.validators.map(e => e ? staking_1.Validator.toJSON(e) : undefined);\n    } else {\n      obj.validators = [];\n    }\n\n    message.pagination !== undefined && (obj.pagination = message.pagination ? pagination_1.PageResponse.toJSON(message.pagination) : undefined);\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseQueryDelegatorValidatorsResponse);\n    message.validators = [];\n\n    if (object.validators !== undefined && object.validators !== null) {\n      for (const e of object.validators) {\n        message.validators.push(staking_1.Validator.fromPartial(e));\n      }\n    }\n\n    if (object.pagination !== undefined && object.pagination !== null) {\n      message.pagination = pagination_1.PageResponse.fromPartial(object.pagination);\n    } else {\n      message.pagination = undefined;\n    }\n\n    return message;\n  }\n\n};\nconst baseQueryDelegatorValidatorRequest = {\n  delegatorAddr: \"\",\n  validatorAddr: \"\"\n};\nexports.QueryDelegatorValidatorRequest = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.delegatorAddr !== \"\") {\n      writer.uint32(10).string(message.delegatorAddr);\n    }\n\n    if (message.validatorAddr !== \"\") {\n      writer.uint32(18).string(message.validatorAddr);\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseQueryDelegatorValidatorRequest);\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.delegatorAddr = reader.string();\n          break;\n\n        case 2:\n          message.validatorAddr = reader.string();\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseQueryDelegatorValidatorRequest);\n\n    if (object.delegatorAddr !== undefined && object.delegatorAddr !== null) {\n      message.delegatorAddr = String(object.delegatorAddr);\n    } else {\n      message.delegatorAddr = \"\";\n    }\n\n    if (object.validatorAddr !== undefined && object.validatorAddr !== null) {\n      message.validatorAddr = String(object.validatorAddr);\n    } else {\n      message.validatorAddr = \"\";\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.delegatorAddr !== undefined && (obj.delegatorAddr = message.delegatorAddr);\n    message.validatorAddr !== undefined && (obj.validatorAddr = message.validatorAddr);\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseQueryDelegatorValidatorRequest);\n\n    if (object.delegatorAddr !== undefined && object.delegatorAddr !== null) {\n      message.delegatorAddr = object.delegatorAddr;\n    } else {\n      message.delegatorAddr = \"\";\n    }\n\n    if (object.validatorAddr !== undefined && object.validatorAddr !== null) {\n      message.validatorAddr = object.validatorAddr;\n    } else {\n      message.validatorAddr = \"\";\n    }\n\n    return message;\n  }\n\n};\nconst baseQueryDelegatorValidatorResponse = {};\nexports.QueryDelegatorValidatorResponse = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.validator !== undefined) {\n      staking_1.Validator.encode(message.validator, writer.uint32(10).fork()).ldelim();\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseQueryDelegatorValidatorResponse);\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.validator = staking_1.Validator.decode(reader, reader.uint32());\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseQueryDelegatorValidatorResponse);\n\n    if (object.validator !== undefined && object.validator !== null) {\n      message.validator = staking_1.Validator.fromJSON(object.validator);\n    } else {\n      message.validator = undefined;\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.validator !== undefined && (obj.validator = message.validator ? staking_1.Validator.toJSON(message.validator) : undefined);\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseQueryDelegatorValidatorResponse);\n\n    if (object.validator !== undefined && object.validator !== null) {\n      message.validator = staking_1.Validator.fromPartial(object.validator);\n    } else {\n      message.validator = undefined;\n    }\n\n    return message;\n  }\n\n};\nconst baseQueryHistoricalInfoRequest = {\n  height: long_1.default.ZERO\n};\nexports.QueryHistoricalInfoRequest = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (!message.height.isZero()) {\n      writer.uint32(8).int64(message.height);\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseQueryHistoricalInfoRequest);\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.height = reader.int64();\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseQueryHistoricalInfoRequest);\n\n    if (object.height !== undefined && object.height !== null) {\n      message.height = long_1.default.fromString(object.height);\n    } else {\n      message.height = long_1.default.ZERO;\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.height !== undefined && (obj.height = (message.height || long_1.default.ZERO).toString());\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseQueryHistoricalInfoRequest);\n\n    if (object.height !== undefined && object.height !== null) {\n      message.height = object.height;\n    } else {\n      message.height = long_1.default.ZERO;\n    }\n\n    return message;\n  }\n\n};\nconst baseQueryHistoricalInfoResponse = {};\nexports.QueryHistoricalInfoResponse = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.hist !== undefined) {\n      staking_1.HistoricalInfo.encode(message.hist, writer.uint32(10).fork()).ldelim();\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseQueryHistoricalInfoResponse);\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.hist = staking_1.HistoricalInfo.decode(reader, reader.uint32());\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseQueryHistoricalInfoResponse);\n\n    if (object.hist !== undefined && object.hist !== null) {\n      message.hist = staking_1.HistoricalInfo.fromJSON(object.hist);\n    } else {\n      message.hist = undefined;\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.hist !== undefined && (obj.hist = message.hist ? staking_1.HistoricalInfo.toJSON(message.hist) : undefined);\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseQueryHistoricalInfoResponse);\n\n    if (object.hist !== undefined && object.hist !== null) {\n      message.hist = staking_1.HistoricalInfo.fromPartial(object.hist);\n    } else {\n      message.hist = undefined;\n    }\n\n    return message;\n  }\n\n};\nconst baseQueryPoolRequest = {};\nexports.QueryPoolRequest = {\n  encode(_, writer = minimal_1.default.Writer.create()) {\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseQueryPoolRequest);\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(_) {\n    const message = Object.assign({}, baseQueryPoolRequest);\n    return message;\n  },\n\n  toJSON(_) {\n    const obj = {};\n    return obj;\n  },\n\n  fromPartial(_) {\n    const message = Object.assign({}, baseQueryPoolRequest);\n    return message;\n  }\n\n};\nconst baseQueryPoolResponse = {};\nexports.QueryPoolResponse = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.pool !== undefined) {\n      staking_1.Pool.encode(message.pool, writer.uint32(10).fork()).ldelim();\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseQueryPoolResponse);\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.pool = staking_1.Pool.decode(reader, reader.uint32());\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseQueryPoolResponse);\n\n    if (object.pool !== undefined && object.pool !== null) {\n      message.pool = staking_1.Pool.fromJSON(object.pool);\n    } else {\n      message.pool = undefined;\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.pool !== undefined && (obj.pool = message.pool ? staking_1.Pool.toJSON(message.pool) : undefined);\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseQueryPoolResponse);\n\n    if (object.pool !== undefined && object.pool !== null) {\n      message.pool = staking_1.Pool.fromPartial(object.pool);\n    } else {\n      message.pool = undefined;\n    }\n\n    return message;\n  }\n\n};\nconst baseQueryParamsRequest = {};\nexports.QueryParamsRequest = {\n  encode(_, writer = minimal_1.default.Writer.create()) {\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseQueryParamsRequest);\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(_) {\n    const message = Object.assign({}, baseQueryParamsRequest);\n    return message;\n  },\n\n  toJSON(_) {\n    const obj = {};\n    return obj;\n  },\n\n  fromPartial(_) {\n    const message = Object.assign({}, baseQueryParamsRequest);\n    return message;\n  }\n\n};\nconst baseQueryParamsResponse = {};\nexports.QueryParamsResponse = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.params !== undefined) {\n      staking_1.Params.encode(message.params, writer.uint32(10).fork()).ldelim();\n    }\n\n    return writer;\n  },\n\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseQueryParamsResponse);\n\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.params = staking_1.Params.decode(reader, reader.uint32());\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  },\n\n  fromJSON(object) {\n    const message = Object.assign({}, baseQueryParamsResponse);\n\n    if (object.params !== undefined && object.params !== null) {\n      message.params = staking_1.Params.fromJSON(object.params);\n    } else {\n      message.params = undefined;\n    }\n\n    return message;\n  },\n\n  toJSON(message) {\n    const obj = {};\n    message.params !== undefined && (obj.params = message.params ? staking_1.Params.toJSON(message.params) : undefined);\n    return obj;\n  },\n\n  fromPartial(object) {\n    const message = Object.assign({}, baseQueryParamsResponse);\n\n    if (object.params !== undefined && object.params !== null) {\n      message.params = staking_1.Params.fromPartial(object.params);\n    } else {\n      message.params = undefined;\n    }\n\n    return message;\n  }\n\n};\n\nclass QueryClientImpl {\n  constructor(rpc) {\n    this.rpc = rpc;\n  }\n\n  Validators(request) {\n    const data = exports.QueryValidatorsRequest.encode(request).finish();\n    const promise = this.rpc.request(\"cosmos.staking.v1beta1.Query\", \"Validators\", data);\n    return promise.then(data => exports.QueryValidatorsResponse.decode(new minimal_1.default.Reader(data)));\n  }\n\n  Validator(request) {\n    const data = exports.QueryValidatorRequest.encode(request).finish();\n    const promise = this.rpc.request(\"cosmos.staking.v1beta1.Query\", \"Validator\", data);\n    return promise.then(data => exports.QueryValidatorResponse.decode(new minimal_1.default.Reader(data)));\n  }\n\n  ValidatorDelegations(request) {\n    const data = exports.QueryValidatorDelegationsRequest.encode(request).finish();\n    const promise = this.rpc.request(\"cosmos.staking.v1beta1.Query\", \"ValidatorDelegations\", data);\n    return promise.then(data => exports.QueryValidatorDelegationsResponse.decode(new minimal_1.default.Reader(data)));\n  }\n\n  ValidatorUnbondingDelegations(request) {\n    const data = exports.QueryValidatorUnbondingDelegationsRequest.encode(request).finish();\n    const promise = this.rpc.request(\"cosmos.staking.v1beta1.Query\", \"ValidatorUnbondingDelegations\", data);\n    return promise.then(data => exports.QueryValidatorUnbondingDelegationsResponse.decode(new minimal_1.default.Reader(data)));\n  }\n\n  Delegation(request) {\n    const data = exports.QueryDelegationRequest.encode(request).finish();\n    const promise = this.rpc.request(\"cosmos.staking.v1beta1.Query\", \"Delegation\", data);\n    return promise.then(data => exports.QueryDelegationResponse.decode(new minimal_1.default.Reader(data)));\n  }\n\n  UnbondingDelegation(request) {\n    const data = exports.QueryUnbondingDelegationRequest.encode(request).finish();\n    const promise = this.rpc.request(\"cosmos.staking.v1beta1.Query\", \"UnbondingDelegation\", data);\n    return promise.then(data => exports.QueryUnbondingDelegationResponse.decode(new minimal_1.default.Reader(data)));\n  }\n\n  DelegatorDelegations(request) {\n    const data = exports.QueryDelegatorDelegationsRequest.encode(request).finish();\n    const promise = this.rpc.request(\"cosmos.staking.v1beta1.Query\", \"DelegatorDelegations\", data);\n    return promise.then(data => exports.QueryDelegatorDelegationsResponse.decode(new minimal_1.default.Reader(data)));\n  }\n\n  DelegatorUnbondingDelegations(request) {\n    const data = exports.QueryDelegatorUnbondingDelegationsRequest.encode(request).finish();\n    const promise = this.rpc.request(\"cosmos.staking.v1beta1.Query\", \"DelegatorUnbondingDelegations\", data);\n    return promise.then(data => exports.QueryDelegatorUnbondingDelegationsResponse.decode(new minimal_1.default.Reader(data)));\n  }\n\n  Redelegations(request) {\n    const data = exports.QueryRedelegationsRequest.encode(request).finish();\n    const promise = this.rpc.request(\"cosmos.staking.v1beta1.Query\", \"Redelegations\", data);\n    return promise.then(data => exports.QueryRedelegationsResponse.decode(new minimal_1.default.Reader(data)));\n  }\n\n  DelegatorValidators(request) {\n    const data = exports.QueryDelegatorValidatorsRequest.encode(request).finish();\n    const promise = this.rpc.request(\"cosmos.staking.v1beta1.Query\", \"DelegatorValidators\", data);\n    return promise.then(data => exports.QueryDelegatorValidatorsResponse.decode(new minimal_1.default.Reader(data)));\n  }\n\n  DelegatorValidator(request) {\n    const data = exports.QueryDelegatorValidatorRequest.encode(request).finish();\n    const promise = this.rpc.request(\"cosmos.staking.v1beta1.Query\", \"DelegatorValidator\", data);\n    return promise.then(data => exports.QueryDelegatorValidatorResponse.decode(new minimal_1.default.Reader(data)));\n  }\n\n  HistoricalInfo(request) {\n    const data = exports.QueryHistoricalInfoRequest.encode(request).finish();\n    const promise = this.rpc.request(\"cosmos.staking.v1beta1.Query\", \"HistoricalInfo\", data);\n    return promise.then(data => exports.QueryHistoricalInfoResponse.decode(new minimal_1.default.Reader(data)));\n  }\n\n  Pool(request) {\n    const data = exports.QueryPoolRequest.encode(request).finish();\n    const promise = this.rpc.request(\"cosmos.staking.v1beta1.Query\", \"Pool\", data);\n    return promise.then(data => exports.QueryPoolResponse.decode(new minimal_1.default.Reader(data)));\n  }\n\n  Params(request) {\n    const data = exports.QueryParamsRequest.encode(request).finish();\n    const promise = this.rpc.request(\"cosmos.staking.v1beta1.Query\", \"Params\", data);\n    return promise.then(data => exports.QueryParamsResponse.decode(new minimal_1.default.Reader(data)));\n  }\n\n}\n\nexports.QueryClientImpl = QueryClientImpl;\n\nif (minimal_1.default.util.Long !== long_1.default) {\n  minimal_1.default.util.Long = long_1.default;\n  minimal_1.default.configure();\n}","map":{"version":3,"sources":["../../../../../src/codec/cosmos/staking/v1beta1/query.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.QueryClientImpl = exports.QueryParamsResponse = exports.QueryParamsRequest = exports.QueryPoolResponse = exports.QueryPoolRequest = exports.QueryHistoricalInfoResponse = exports.QueryHistoricalInfoRequest = exports.QueryDelegatorValidatorResponse = exports.QueryDelegatorValidatorRequest = exports.QueryDelegatorValidatorsResponse = exports.QueryDelegatorValidatorsRequest = exports.QueryRedelegationsResponse = exports.QueryRedelegationsRequest = exports.QueryDelegatorUnbondingDelegationsResponse = exports.QueryDelegatorUnbondingDelegationsRequest = exports.QueryDelegatorDelegationsResponse = exports.QueryDelegatorDelegationsRequest = exports.QueryUnbondingDelegationResponse = exports.QueryUnbondingDelegationRequest = exports.QueryDelegationResponse = exports.QueryDelegationRequest = exports.QueryValidatorUnbondingDelegationsResponse = exports.QueryValidatorUnbondingDelegationsRequest = exports.QueryValidatorDelegationsResponse = exports.QueryValidatorDelegationsRequest = exports.QueryValidatorResponse = exports.QueryValidatorRequest = exports.QueryValidatorsResponse = exports.QueryValidatorsRequest = exports.protobufPackage = void 0;\n/* eslint-disable */\nconst long_1 = __importDefault(require(\"long\"));\nconst minimal_1 = __importDefault(require(\"protobufjs/minimal\"));\nconst pagination_1 = require(\"../../../cosmos/base/query/v1beta1/pagination\");\nconst staking_1 = require(\"../../../cosmos/staking/v1beta1/staking\");\nexports.protobufPackage = \"cosmos.staking.v1beta1\";\nconst baseQueryValidatorsRequest = { status: \"\" };\nexports.QueryValidatorsRequest = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.status !== \"\") {\n            writer.uint32(10).string(message.status);\n        }\n        if (message.pagination !== undefined) {\n            pagination_1.PageRequest.encode(message.pagination, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseQueryValidatorsRequest);\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.status = reader.string();\n                    break;\n                case 2:\n                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseQueryValidatorsRequest);\n        if (object.status !== undefined && object.status !== null) {\n            message.status = String(object.status);\n        }\n        else {\n            message.status = \"\";\n        }\n        if (object.pagination !== undefined && object.pagination !== null) {\n            message.pagination = pagination_1.PageRequest.fromJSON(object.pagination);\n        }\n        else {\n            message.pagination = undefined;\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.status !== undefined && (obj.status = message.status);\n        message.pagination !== undefined &&\n            (obj.pagination = message.pagination ? pagination_1.PageRequest.toJSON(message.pagination) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseQueryValidatorsRequest);\n        if (object.status !== undefined && object.status !== null) {\n            message.status = object.status;\n        }\n        else {\n            message.status = \"\";\n        }\n        if (object.pagination !== undefined && object.pagination !== null) {\n            message.pagination = pagination_1.PageRequest.fromPartial(object.pagination);\n        }\n        else {\n            message.pagination = undefined;\n        }\n        return message;\n    },\n};\nconst baseQueryValidatorsResponse = {};\nexports.QueryValidatorsResponse = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        for (const v of message.validators) {\n            staking_1.Validator.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.pagination !== undefined) {\n            pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseQueryValidatorsResponse);\n        message.validators = [];\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.validators.push(staking_1.Validator.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseQueryValidatorsResponse);\n        message.validators = [];\n        if (object.validators !== undefined && object.validators !== null) {\n            for (const e of object.validators) {\n                message.validators.push(staking_1.Validator.fromJSON(e));\n            }\n        }\n        if (object.pagination !== undefined && object.pagination !== null) {\n            message.pagination = pagination_1.PageResponse.fromJSON(object.pagination);\n        }\n        else {\n            message.pagination = undefined;\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.validators) {\n            obj.validators = message.validators.map((e) => (e ? staking_1.Validator.toJSON(e) : undefined));\n        }\n        else {\n            obj.validators = [];\n        }\n        message.pagination !== undefined &&\n            (obj.pagination = message.pagination ? pagination_1.PageResponse.toJSON(message.pagination) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseQueryValidatorsResponse);\n        message.validators = [];\n        if (object.validators !== undefined && object.validators !== null) {\n            for (const e of object.validators) {\n                message.validators.push(staking_1.Validator.fromPartial(e));\n            }\n        }\n        if (object.pagination !== undefined && object.pagination !== null) {\n            message.pagination = pagination_1.PageResponse.fromPartial(object.pagination);\n        }\n        else {\n            message.pagination = undefined;\n        }\n        return message;\n    },\n};\nconst baseQueryValidatorRequest = { validatorAddr: \"\" };\nexports.QueryValidatorRequest = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.validatorAddr !== \"\") {\n            writer.uint32(10).string(message.validatorAddr);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseQueryValidatorRequest);\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.validatorAddr = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseQueryValidatorRequest);\n        if (object.validatorAddr !== undefined && object.validatorAddr !== null) {\n            message.validatorAddr = String(object.validatorAddr);\n        }\n        else {\n            message.validatorAddr = \"\";\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.validatorAddr !== undefined && (obj.validatorAddr = message.validatorAddr);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseQueryValidatorRequest);\n        if (object.validatorAddr !== undefined && object.validatorAddr !== null) {\n            message.validatorAddr = object.validatorAddr;\n        }\n        else {\n            message.validatorAddr = \"\";\n        }\n        return message;\n    },\n};\nconst baseQueryValidatorResponse = {};\nexports.QueryValidatorResponse = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.validator !== undefined) {\n            staking_1.Validator.encode(message.validator, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseQueryValidatorResponse);\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.validator = staking_1.Validator.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseQueryValidatorResponse);\n        if (object.validator !== undefined && object.validator !== null) {\n            message.validator = staking_1.Validator.fromJSON(object.validator);\n        }\n        else {\n            message.validator = undefined;\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.validator !== undefined &&\n            (obj.validator = message.validator ? staking_1.Validator.toJSON(message.validator) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseQueryValidatorResponse);\n        if (object.validator !== undefined && object.validator !== null) {\n            message.validator = staking_1.Validator.fromPartial(object.validator);\n        }\n        else {\n            message.validator = undefined;\n        }\n        return message;\n    },\n};\nconst baseQueryValidatorDelegationsRequest = { validatorAddr: \"\" };\nexports.QueryValidatorDelegationsRequest = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.validatorAddr !== \"\") {\n            writer.uint32(10).string(message.validatorAddr);\n        }\n        if (message.pagination !== undefined) {\n            pagination_1.PageRequest.encode(message.pagination, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseQueryValidatorDelegationsRequest);\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.validatorAddr = reader.string();\n                    break;\n                case 2:\n                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseQueryValidatorDelegationsRequest);\n        if (object.validatorAddr !== undefined && object.validatorAddr !== null) {\n            message.validatorAddr = String(object.validatorAddr);\n        }\n        else {\n            message.validatorAddr = \"\";\n        }\n        if (object.pagination !== undefined && object.pagination !== null) {\n            message.pagination = pagination_1.PageRequest.fromJSON(object.pagination);\n        }\n        else {\n            message.pagination = undefined;\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.validatorAddr !== undefined && (obj.validatorAddr = message.validatorAddr);\n        message.pagination !== undefined &&\n            (obj.pagination = message.pagination ? pagination_1.PageRequest.toJSON(message.pagination) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseQueryValidatorDelegationsRequest);\n        if (object.validatorAddr !== undefined && object.validatorAddr !== null) {\n            message.validatorAddr = object.validatorAddr;\n        }\n        else {\n            message.validatorAddr = \"\";\n        }\n        if (object.pagination !== undefined && object.pagination !== null) {\n            message.pagination = pagination_1.PageRequest.fromPartial(object.pagination);\n        }\n        else {\n            message.pagination = undefined;\n        }\n        return message;\n    },\n};\nconst baseQueryValidatorDelegationsResponse = {};\nexports.QueryValidatorDelegationsResponse = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        for (const v of message.delegationResponses) {\n            staking_1.DelegationResponse.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.pagination !== undefined) {\n            pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseQueryValidatorDelegationsResponse);\n        message.delegationResponses = [];\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.delegationResponses.push(staking_1.DelegationResponse.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseQueryValidatorDelegationsResponse);\n        message.delegationResponses = [];\n        if (object.delegationResponses !== undefined && object.delegationResponses !== null) {\n            for (const e of object.delegationResponses) {\n                message.delegationResponses.push(staking_1.DelegationResponse.fromJSON(e));\n            }\n        }\n        if (object.pagination !== undefined && object.pagination !== null) {\n            message.pagination = pagination_1.PageResponse.fromJSON(object.pagination);\n        }\n        else {\n            message.pagination = undefined;\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.delegationResponses) {\n            obj.delegationResponses = message.delegationResponses.map((e) => e ? staking_1.DelegationResponse.toJSON(e) : undefined);\n        }\n        else {\n            obj.delegationResponses = [];\n        }\n        message.pagination !== undefined &&\n            (obj.pagination = message.pagination ? pagination_1.PageResponse.toJSON(message.pagination) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseQueryValidatorDelegationsResponse);\n        message.delegationResponses = [];\n        if (object.delegationResponses !== undefined && object.delegationResponses !== null) {\n            for (const e of object.delegationResponses) {\n                message.delegationResponses.push(staking_1.DelegationResponse.fromPartial(e));\n            }\n        }\n        if (object.pagination !== undefined && object.pagination !== null) {\n            message.pagination = pagination_1.PageResponse.fromPartial(object.pagination);\n        }\n        else {\n            message.pagination = undefined;\n        }\n        return message;\n    },\n};\nconst baseQueryValidatorUnbondingDelegationsRequest = { validatorAddr: \"\" };\nexports.QueryValidatorUnbondingDelegationsRequest = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.validatorAddr !== \"\") {\n            writer.uint32(10).string(message.validatorAddr);\n        }\n        if (message.pagination !== undefined) {\n            pagination_1.PageRequest.encode(message.pagination, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseQueryValidatorUnbondingDelegationsRequest);\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.validatorAddr = reader.string();\n                    break;\n                case 2:\n                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseQueryValidatorUnbondingDelegationsRequest);\n        if (object.validatorAddr !== undefined && object.validatorAddr !== null) {\n            message.validatorAddr = String(object.validatorAddr);\n        }\n        else {\n            message.validatorAddr = \"\";\n        }\n        if (object.pagination !== undefined && object.pagination !== null) {\n            message.pagination = pagination_1.PageRequest.fromJSON(object.pagination);\n        }\n        else {\n            message.pagination = undefined;\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.validatorAddr !== undefined && (obj.validatorAddr = message.validatorAddr);\n        message.pagination !== undefined &&\n            (obj.pagination = message.pagination ? pagination_1.PageRequest.toJSON(message.pagination) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseQueryValidatorUnbondingDelegationsRequest);\n        if (object.validatorAddr !== undefined && object.validatorAddr !== null) {\n            message.validatorAddr = object.validatorAddr;\n        }\n        else {\n            message.validatorAddr = \"\";\n        }\n        if (object.pagination !== undefined && object.pagination !== null) {\n            message.pagination = pagination_1.PageRequest.fromPartial(object.pagination);\n        }\n        else {\n            message.pagination = undefined;\n        }\n        return message;\n    },\n};\nconst baseQueryValidatorUnbondingDelegationsResponse = {};\nexports.QueryValidatorUnbondingDelegationsResponse = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        for (const v of message.unbondingResponses) {\n            staking_1.UnbondingDelegation.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.pagination !== undefined) {\n            pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseQueryValidatorUnbondingDelegationsResponse);\n        message.unbondingResponses = [];\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.unbondingResponses.push(staking_1.UnbondingDelegation.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseQueryValidatorUnbondingDelegationsResponse);\n        message.unbondingResponses = [];\n        if (object.unbondingResponses !== undefined && object.unbondingResponses !== null) {\n            for (const e of object.unbondingResponses) {\n                message.unbondingResponses.push(staking_1.UnbondingDelegation.fromJSON(e));\n            }\n        }\n        if (object.pagination !== undefined && object.pagination !== null) {\n            message.pagination = pagination_1.PageResponse.fromJSON(object.pagination);\n        }\n        else {\n            message.pagination = undefined;\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.unbondingResponses) {\n            obj.unbondingResponses = message.unbondingResponses.map((e) => e ? staking_1.UnbondingDelegation.toJSON(e) : undefined);\n        }\n        else {\n            obj.unbondingResponses = [];\n        }\n        message.pagination !== undefined &&\n            (obj.pagination = message.pagination ? pagination_1.PageResponse.toJSON(message.pagination) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseQueryValidatorUnbondingDelegationsResponse);\n        message.unbondingResponses = [];\n        if (object.unbondingResponses !== undefined && object.unbondingResponses !== null) {\n            for (const e of object.unbondingResponses) {\n                message.unbondingResponses.push(staking_1.UnbondingDelegation.fromPartial(e));\n            }\n        }\n        if (object.pagination !== undefined && object.pagination !== null) {\n            message.pagination = pagination_1.PageResponse.fromPartial(object.pagination);\n        }\n        else {\n            message.pagination = undefined;\n        }\n        return message;\n    },\n};\nconst baseQueryDelegationRequest = { delegatorAddr: \"\", validatorAddr: \"\" };\nexports.QueryDelegationRequest = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.delegatorAddr !== \"\") {\n            writer.uint32(10).string(message.delegatorAddr);\n        }\n        if (message.validatorAddr !== \"\") {\n            writer.uint32(18).string(message.validatorAddr);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseQueryDelegationRequest);\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.delegatorAddr = reader.string();\n                    break;\n                case 2:\n                    message.validatorAddr = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseQueryDelegationRequest);\n        if (object.delegatorAddr !== undefined && object.delegatorAddr !== null) {\n            message.delegatorAddr = String(object.delegatorAddr);\n        }\n        else {\n            message.delegatorAddr = \"\";\n        }\n        if (object.validatorAddr !== undefined && object.validatorAddr !== null) {\n            message.validatorAddr = String(object.validatorAddr);\n        }\n        else {\n            message.validatorAddr = \"\";\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.delegatorAddr !== undefined && (obj.delegatorAddr = message.delegatorAddr);\n        message.validatorAddr !== undefined && (obj.validatorAddr = message.validatorAddr);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseQueryDelegationRequest);\n        if (object.delegatorAddr !== undefined && object.delegatorAddr !== null) {\n            message.delegatorAddr = object.delegatorAddr;\n        }\n        else {\n            message.delegatorAddr = \"\";\n        }\n        if (object.validatorAddr !== undefined && object.validatorAddr !== null) {\n            message.validatorAddr = object.validatorAddr;\n        }\n        else {\n            message.validatorAddr = \"\";\n        }\n        return message;\n    },\n};\nconst baseQueryDelegationResponse = {};\nexports.QueryDelegationResponse = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.delegationResponse !== undefined) {\n            staking_1.DelegationResponse.encode(message.delegationResponse, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseQueryDelegationResponse);\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.delegationResponse = staking_1.DelegationResponse.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseQueryDelegationResponse);\n        if (object.delegationResponse !== undefined && object.delegationResponse !== null) {\n            message.delegationResponse = staking_1.DelegationResponse.fromJSON(object.delegationResponse);\n        }\n        else {\n            message.delegationResponse = undefined;\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.delegationResponse !== undefined &&\n            (obj.delegationResponse = message.delegationResponse\n                ? staking_1.DelegationResponse.toJSON(message.delegationResponse)\n                : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseQueryDelegationResponse);\n        if (object.delegationResponse !== undefined && object.delegationResponse !== null) {\n            message.delegationResponse = staking_1.DelegationResponse.fromPartial(object.delegationResponse);\n        }\n        else {\n            message.delegationResponse = undefined;\n        }\n        return message;\n    },\n};\nconst baseQueryUnbondingDelegationRequest = { delegatorAddr: \"\", validatorAddr: \"\" };\nexports.QueryUnbondingDelegationRequest = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.delegatorAddr !== \"\") {\n            writer.uint32(10).string(message.delegatorAddr);\n        }\n        if (message.validatorAddr !== \"\") {\n            writer.uint32(18).string(message.validatorAddr);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseQueryUnbondingDelegationRequest);\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.delegatorAddr = reader.string();\n                    break;\n                case 2:\n                    message.validatorAddr = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseQueryUnbondingDelegationRequest);\n        if (object.delegatorAddr !== undefined && object.delegatorAddr !== null) {\n            message.delegatorAddr = String(object.delegatorAddr);\n        }\n        else {\n            message.delegatorAddr = \"\";\n        }\n        if (object.validatorAddr !== undefined && object.validatorAddr !== null) {\n            message.validatorAddr = String(object.validatorAddr);\n        }\n        else {\n            message.validatorAddr = \"\";\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.delegatorAddr !== undefined && (obj.delegatorAddr = message.delegatorAddr);\n        message.validatorAddr !== undefined && (obj.validatorAddr = message.validatorAddr);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseQueryUnbondingDelegationRequest);\n        if (object.delegatorAddr !== undefined && object.delegatorAddr !== null) {\n            message.delegatorAddr = object.delegatorAddr;\n        }\n        else {\n            message.delegatorAddr = \"\";\n        }\n        if (object.validatorAddr !== undefined && object.validatorAddr !== null) {\n            message.validatorAddr = object.validatorAddr;\n        }\n        else {\n            message.validatorAddr = \"\";\n        }\n        return message;\n    },\n};\nconst baseQueryUnbondingDelegationResponse = {};\nexports.QueryUnbondingDelegationResponse = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.unbond !== undefined) {\n            staking_1.UnbondingDelegation.encode(message.unbond, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseQueryUnbondingDelegationResponse);\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.unbond = staking_1.UnbondingDelegation.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseQueryUnbondingDelegationResponse);\n        if (object.unbond !== undefined && object.unbond !== null) {\n            message.unbond = staking_1.UnbondingDelegation.fromJSON(object.unbond);\n        }\n        else {\n            message.unbond = undefined;\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.unbond !== undefined &&\n            (obj.unbond = message.unbond ? staking_1.UnbondingDelegation.toJSON(message.unbond) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseQueryUnbondingDelegationResponse);\n        if (object.unbond !== undefined && object.unbond !== null) {\n            message.unbond = staking_1.UnbondingDelegation.fromPartial(object.unbond);\n        }\n        else {\n            message.unbond = undefined;\n        }\n        return message;\n    },\n};\nconst baseQueryDelegatorDelegationsRequest = { delegatorAddr: \"\" };\nexports.QueryDelegatorDelegationsRequest = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.delegatorAddr !== \"\") {\n            writer.uint32(10).string(message.delegatorAddr);\n        }\n        if (message.pagination !== undefined) {\n            pagination_1.PageRequest.encode(message.pagination, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseQueryDelegatorDelegationsRequest);\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.delegatorAddr = reader.string();\n                    break;\n                case 2:\n                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseQueryDelegatorDelegationsRequest);\n        if (object.delegatorAddr !== undefined && object.delegatorAddr !== null) {\n            message.delegatorAddr = String(object.delegatorAddr);\n        }\n        else {\n            message.delegatorAddr = \"\";\n        }\n        if (object.pagination !== undefined && object.pagination !== null) {\n            message.pagination = pagination_1.PageRequest.fromJSON(object.pagination);\n        }\n        else {\n            message.pagination = undefined;\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.delegatorAddr !== undefined && (obj.delegatorAddr = message.delegatorAddr);\n        message.pagination !== undefined &&\n            (obj.pagination = message.pagination ? pagination_1.PageRequest.toJSON(message.pagination) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseQueryDelegatorDelegationsRequest);\n        if (object.delegatorAddr !== undefined && object.delegatorAddr !== null) {\n            message.delegatorAddr = object.delegatorAddr;\n        }\n        else {\n            message.delegatorAddr = \"\";\n        }\n        if (object.pagination !== undefined && object.pagination !== null) {\n            message.pagination = pagination_1.PageRequest.fromPartial(object.pagination);\n        }\n        else {\n            message.pagination = undefined;\n        }\n        return message;\n    },\n};\nconst baseQueryDelegatorDelegationsResponse = {};\nexports.QueryDelegatorDelegationsResponse = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        for (const v of message.delegationResponses) {\n            staking_1.DelegationResponse.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.pagination !== undefined) {\n            pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseQueryDelegatorDelegationsResponse);\n        message.delegationResponses = [];\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.delegationResponses.push(staking_1.DelegationResponse.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseQueryDelegatorDelegationsResponse);\n        message.delegationResponses = [];\n        if (object.delegationResponses !== undefined && object.delegationResponses !== null) {\n            for (const e of object.delegationResponses) {\n                message.delegationResponses.push(staking_1.DelegationResponse.fromJSON(e));\n            }\n        }\n        if (object.pagination !== undefined && object.pagination !== null) {\n            message.pagination = pagination_1.PageResponse.fromJSON(object.pagination);\n        }\n        else {\n            message.pagination = undefined;\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.delegationResponses) {\n            obj.delegationResponses = message.delegationResponses.map((e) => e ? staking_1.DelegationResponse.toJSON(e) : undefined);\n        }\n        else {\n            obj.delegationResponses = [];\n        }\n        message.pagination !== undefined &&\n            (obj.pagination = message.pagination ? pagination_1.PageResponse.toJSON(message.pagination) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseQueryDelegatorDelegationsResponse);\n        message.delegationResponses = [];\n        if (object.delegationResponses !== undefined && object.delegationResponses !== null) {\n            for (const e of object.delegationResponses) {\n                message.delegationResponses.push(staking_1.DelegationResponse.fromPartial(e));\n            }\n        }\n        if (object.pagination !== undefined && object.pagination !== null) {\n            message.pagination = pagination_1.PageResponse.fromPartial(object.pagination);\n        }\n        else {\n            message.pagination = undefined;\n        }\n        return message;\n    },\n};\nconst baseQueryDelegatorUnbondingDelegationsRequest = { delegatorAddr: \"\" };\nexports.QueryDelegatorUnbondingDelegationsRequest = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.delegatorAddr !== \"\") {\n            writer.uint32(10).string(message.delegatorAddr);\n        }\n        if (message.pagination !== undefined) {\n            pagination_1.PageRequest.encode(message.pagination, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseQueryDelegatorUnbondingDelegationsRequest);\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.delegatorAddr = reader.string();\n                    break;\n                case 2:\n                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseQueryDelegatorUnbondingDelegationsRequest);\n        if (object.delegatorAddr !== undefined && object.delegatorAddr !== null) {\n            message.delegatorAddr = String(object.delegatorAddr);\n        }\n        else {\n            message.delegatorAddr = \"\";\n        }\n        if (object.pagination !== undefined && object.pagination !== null) {\n            message.pagination = pagination_1.PageRequest.fromJSON(object.pagination);\n        }\n        else {\n            message.pagination = undefined;\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.delegatorAddr !== undefined && (obj.delegatorAddr = message.delegatorAddr);\n        message.pagination !== undefined &&\n            (obj.pagination = message.pagination ? pagination_1.PageRequest.toJSON(message.pagination) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseQueryDelegatorUnbondingDelegationsRequest);\n        if (object.delegatorAddr !== undefined && object.delegatorAddr !== null) {\n            message.delegatorAddr = object.delegatorAddr;\n        }\n        else {\n            message.delegatorAddr = \"\";\n        }\n        if (object.pagination !== undefined && object.pagination !== null) {\n            message.pagination = pagination_1.PageRequest.fromPartial(object.pagination);\n        }\n        else {\n            message.pagination = undefined;\n        }\n        return message;\n    },\n};\nconst baseQueryDelegatorUnbondingDelegationsResponse = {};\nexports.QueryDelegatorUnbondingDelegationsResponse = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        for (const v of message.unbondingResponses) {\n            staking_1.UnbondingDelegation.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.pagination !== undefined) {\n            pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseQueryDelegatorUnbondingDelegationsResponse);\n        message.unbondingResponses = [];\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.unbondingResponses.push(staking_1.UnbondingDelegation.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseQueryDelegatorUnbondingDelegationsResponse);\n        message.unbondingResponses = [];\n        if (object.unbondingResponses !== undefined && object.unbondingResponses !== null) {\n            for (const e of object.unbondingResponses) {\n                message.unbondingResponses.push(staking_1.UnbondingDelegation.fromJSON(e));\n            }\n        }\n        if (object.pagination !== undefined && object.pagination !== null) {\n            message.pagination = pagination_1.PageResponse.fromJSON(object.pagination);\n        }\n        else {\n            message.pagination = undefined;\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.unbondingResponses) {\n            obj.unbondingResponses = message.unbondingResponses.map((e) => e ? staking_1.UnbondingDelegation.toJSON(e) : undefined);\n        }\n        else {\n            obj.unbondingResponses = [];\n        }\n        message.pagination !== undefined &&\n            (obj.pagination = message.pagination ? pagination_1.PageResponse.toJSON(message.pagination) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseQueryDelegatorUnbondingDelegationsResponse);\n        message.unbondingResponses = [];\n        if (object.unbondingResponses !== undefined && object.unbondingResponses !== null) {\n            for (const e of object.unbondingResponses) {\n                message.unbondingResponses.push(staking_1.UnbondingDelegation.fromPartial(e));\n            }\n        }\n        if (object.pagination !== undefined && object.pagination !== null) {\n            message.pagination = pagination_1.PageResponse.fromPartial(object.pagination);\n        }\n        else {\n            message.pagination = undefined;\n        }\n        return message;\n    },\n};\nconst baseQueryRedelegationsRequest = {\n    delegatorAddr: \"\",\n    srcValidatorAddr: \"\",\n    dstValidatorAddr: \"\",\n};\nexports.QueryRedelegationsRequest = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.delegatorAddr !== \"\") {\n            writer.uint32(10).string(message.delegatorAddr);\n        }\n        if (message.srcValidatorAddr !== \"\") {\n            writer.uint32(18).string(message.srcValidatorAddr);\n        }\n        if (message.dstValidatorAddr !== \"\") {\n            writer.uint32(26).string(message.dstValidatorAddr);\n        }\n        if (message.pagination !== undefined) {\n            pagination_1.PageRequest.encode(message.pagination, writer.uint32(34).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseQueryRedelegationsRequest);\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.delegatorAddr = reader.string();\n                    break;\n                case 2:\n                    message.srcValidatorAddr = reader.string();\n                    break;\n                case 3:\n                    message.dstValidatorAddr = reader.string();\n                    break;\n                case 4:\n                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseQueryRedelegationsRequest);\n        if (object.delegatorAddr !== undefined && object.delegatorAddr !== null) {\n            message.delegatorAddr = String(object.delegatorAddr);\n        }\n        else {\n            message.delegatorAddr = \"\";\n        }\n        if (object.srcValidatorAddr !== undefined && object.srcValidatorAddr !== null) {\n            message.srcValidatorAddr = String(object.srcValidatorAddr);\n        }\n        else {\n            message.srcValidatorAddr = \"\";\n        }\n        if (object.dstValidatorAddr !== undefined && object.dstValidatorAddr !== null) {\n            message.dstValidatorAddr = String(object.dstValidatorAddr);\n        }\n        else {\n            message.dstValidatorAddr = \"\";\n        }\n        if (object.pagination !== undefined && object.pagination !== null) {\n            message.pagination = pagination_1.PageRequest.fromJSON(object.pagination);\n        }\n        else {\n            message.pagination = undefined;\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.delegatorAddr !== undefined && (obj.delegatorAddr = message.delegatorAddr);\n        message.srcValidatorAddr !== undefined && (obj.srcValidatorAddr = message.srcValidatorAddr);\n        message.dstValidatorAddr !== undefined && (obj.dstValidatorAddr = message.dstValidatorAddr);\n        message.pagination !== undefined &&\n            (obj.pagination = message.pagination ? pagination_1.PageRequest.toJSON(message.pagination) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseQueryRedelegationsRequest);\n        if (object.delegatorAddr !== undefined && object.delegatorAddr !== null) {\n            message.delegatorAddr = object.delegatorAddr;\n        }\n        else {\n            message.delegatorAddr = \"\";\n        }\n        if (object.srcValidatorAddr !== undefined && object.srcValidatorAddr !== null) {\n            message.srcValidatorAddr = object.srcValidatorAddr;\n        }\n        else {\n            message.srcValidatorAddr = \"\";\n        }\n        if (object.dstValidatorAddr !== undefined && object.dstValidatorAddr !== null) {\n            message.dstValidatorAddr = object.dstValidatorAddr;\n        }\n        else {\n            message.dstValidatorAddr = \"\";\n        }\n        if (object.pagination !== undefined && object.pagination !== null) {\n            message.pagination = pagination_1.PageRequest.fromPartial(object.pagination);\n        }\n        else {\n            message.pagination = undefined;\n        }\n        return message;\n    },\n};\nconst baseQueryRedelegationsResponse = {};\nexports.QueryRedelegationsResponse = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        for (const v of message.redelegationResponses) {\n            staking_1.RedelegationResponse.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.pagination !== undefined) {\n            pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseQueryRedelegationsResponse);\n        message.redelegationResponses = [];\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.redelegationResponses.push(staking_1.RedelegationResponse.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseQueryRedelegationsResponse);\n        message.redelegationResponses = [];\n        if (object.redelegationResponses !== undefined && object.redelegationResponses !== null) {\n            for (const e of object.redelegationResponses) {\n                message.redelegationResponses.push(staking_1.RedelegationResponse.fromJSON(e));\n            }\n        }\n        if (object.pagination !== undefined && object.pagination !== null) {\n            message.pagination = pagination_1.PageResponse.fromJSON(object.pagination);\n        }\n        else {\n            message.pagination = undefined;\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.redelegationResponses) {\n            obj.redelegationResponses = message.redelegationResponses.map((e) => e ? staking_1.RedelegationResponse.toJSON(e) : undefined);\n        }\n        else {\n            obj.redelegationResponses = [];\n        }\n        message.pagination !== undefined &&\n            (obj.pagination = message.pagination ? pagination_1.PageResponse.toJSON(message.pagination) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseQueryRedelegationsResponse);\n        message.redelegationResponses = [];\n        if (object.redelegationResponses !== undefined && object.redelegationResponses !== null) {\n            for (const e of object.redelegationResponses) {\n                message.redelegationResponses.push(staking_1.RedelegationResponse.fromPartial(e));\n            }\n        }\n        if (object.pagination !== undefined && object.pagination !== null) {\n            message.pagination = pagination_1.PageResponse.fromPartial(object.pagination);\n        }\n        else {\n            message.pagination = undefined;\n        }\n        return message;\n    },\n};\nconst baseQueryDelegatorValidatorsRequest = { delegatorAddr: \"\" };\nexports.QueryDelegatorValidatorsRequest = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.delegatorAddr !== \"\") {\n            writer.uint32(10).string(message.delegatorAddr);\n        }\n        if (message.pagination !== undefined) {\n            pagination_1.PageRequest.encode(message.pagination, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseQueryDelegatorValidatorsRequest);\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.delegatorAddr = reader.string();\n                    break;\n                case 2:\n                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseQueryDelegatorValidatorsRequest);\n        if (object.delegatorAddr !== undefined && object.delegatorAddr !== null) {\n            message.delegatorAddr = String(object.delegatorAddr);\n        }\n        else {\n            message.delegatorAddr = \"\";\n        }\n        if (object.pagination !== undefined && object.pagination !== null) {\n            message.pagination = pagination_1.PageRequest.fromJSON(object.pagination);\n        }\n        else {\n            message.pagination = undefined;\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.delegatorAddr !== undefined && (obj.delegatorAddr = message.delegatorAddr);\n        message.pagination !== undefined &&\n            (obj.pagination = message.pagination ? pagination_1.PageRequest.toJSON(message.pagination) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseQueryDelegatorValidatorsRequest);\n        if (object.delegatorAddr !== undefined && object.delegatorAddr !== null) {\n            message.delegatorAddr = object.delegatorAddr;\n        }\n        else {\n            message.delegatorAddr = \"\";\n        }\n        if (object.pagination !== undefined && object.pagination !== null) {\n            message.pagination = pagination_1.PageRequest.fromPartial(object.pagination);\n        }\n        else {\n            message.pagination = undefined;\n        }\n        return message;\n    },\n};\nconst baseQueryDelegatorValidatorsResponse = {};\nexports.QueryDelegatorValidatorsResponse = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        for (const v of message.validators) {\n            staking_1.Validator.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.pagination !== undefined) {\n            pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseQueryDelegatorValidatorsResponse);\n        message.validators = [];\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.validators.push(staking_1.Validator.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseQueryDelegatorValidatorsResponse);\n        message.validators = [];\n        if (object.validators !== undefined && object.validators !== null) {\n            for (const e of object.validators) {\n                message.validators.push(staking_1.Validator.fromJSON(e));\n            }\n        }\n        if (object.pagination !== undefined && object.pagination !== null) {\n            message.pagination = pagination_1.PageResponse.fromJSON(object.pagination);\n        }\n        else {\n            message.pagination = undefined;\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.validators) {\n            obj.validators = message.validators.map((e) => (e ? staking_1.Validator.toJSON(e) : undefined));\n        }\n        else {\n            obj.validators = [];\n        }\n        message.pagination !== undefined &&\n            (obj.pagination = message.pagination ? pagination_1.PageResponse.toJSON(message.pagination) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseQueryDelegatorValidatorsResponse);\n        message.validators = [];\n        if (object.validators !== undefined && object.validators !== null) {\n            for (const e of object.validators) {\n                message.validators.push(staking_1.Validator.fromPartial(e));\n            }\n        }\n        if (object.pagination !== undefined && object.pagination !== null) {\n            message.pagination = pagination_1.PageResponse.fromPartial(object.pagination);\n        }\n        else {\n            message.pagination = undefined;\n        }\n        return message;\n    },\n};\nconst baseQueryDelegatorValidatorRequest = { delegatorAddr: \"\", validatorAddr: \"\" };\nexports.QueryDelegatorValidatorRequest = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.delegatorAddr !== \"\") {\n            writer.uint32(10).string(message.delegatorAddr);\n        }\n        if (message.validatorAddr !== \"\") {\n            writer.uint32(18).string(message.validatorAddr);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseQueryDelegatorValidatorRequest);\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.delegatorAddr = reader.string();\n                    break;\n                case 2:\n                    message.validatorAddr = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseQueryDelegatorValidatorRequest);\n        if (object.delegatorAddr !== undefined && object.delegatorAddr !== null) {\n            message.delegatorAddr = String(object.delegatorAddr);\n        }\n        else {\n            message.delegatorAddr = \"\";\n        }\n        if (object.validatorAddr !== undefined && object.validatorAddr !== null) {\n            message.validatorAddr = String(object.validatorAddr);\n        }\n        else {\n            message.validatorAddr = \"\";\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.delegatorAddr !== undefined && (obj.delegatorAddr = message.delegatorAddr);\n        message.validatorAddr !== undefined && (obj.validatorAddr = message.validatorAddr);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseQueryDelegatorValidatorRequest);\n        if (object.delegatorAddr !== undefined && object.delegatorAddr !== null) {\n            message.delegatorAddr = object.delegatorAddr;\n        }\n        else {\n            message.delegatorAddr = \"\";\n        }\n        if (object.validatorAddr !== undefined && object.validatorAddr !== null) {\n            message.validatorAddr = object.validatorAddr;\n        }\n        else {\n            message.validatorAddr = \"\";\n        }\n        return message;\n    },\n};\nconst baseQueryDelegatorValidatorResponse = {};\nexports.QueryDelegatorValidatorResponse = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.validator !== undefined) {\n            staking_1.Validator.encode(message.validator, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseQueryDelegatorValidatorResponse);\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.validator = staking_1.Validator.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseQueryDelegatorValidatorResponse);\n        if (object.validator !== undefined && object.validator !== null) {\n            message.validator = staking_1.Validator.fromJSON(object.validator);\n        }\n        else {\n            message.validator = undefined;\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.validator !== undefined &&\n            (obj.validator = message.validator ? staking_1.Validator.toJSON(message.validator) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseQueryDelegatorValidatorResponse);\n        if (object.validator !== undefined && object.validator !== null) {\n            message.validator = staking_1.Validator.fromPartial(object.validator);\n        }\n        else {\n            message.validator = undefined;\n        }\n        return message;\n    },\n};\nconst baseQueryHistoricalInfoRequest = { height: long_1.default.ZERO };\nexports.QueryHistoricalInfoRequest = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (!message.height.isZero()) {\n            writer.uint32(8).int64(message.height);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseQueryHistoricalInfoRequest);\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.height = reader.int64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseQueryHistoricalInfoRequest);\n        if (object.height !== undefined && object.height !== null) {\n            message.height = long_1.default.fromString(object.height);\n        }\n        else {\n            message.height = long_1.default.ZERO;\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.height !== undefined && (obj.height = (message.height || long_1.default.ZERO).toString());\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseQueryHistoricalInfoRequest);\n        if (object.height !== undefined && object.height !== null) {\n            message.height = object.height;\n        }\n        else {\n            message.height = long_1.default.ZERO;\n        }\n        return message;\n    },\n};\nconst baseQueryHistoricalInfoResponse = {};\nexports.QueryHistoricalInfoResponse = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.hist !== undefined) {\n            staking_1.HistoricalInfo.encode(message.hist, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseQueryHistoricalInfoResponse);\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.hist = staking_1.HistoricalInfo.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseQueryHistoricalInfoResponse);\n        if (object.hist !== undefined && object.hist !== null) {\n            message.hist = staking_1.HistoricalInfo.fromJSON(object.hist);\n        }\n        else {\n            message.hist = undefined;\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.hist !== undefined && (obj.hist = message.hist ? staking_1.HistoricalInfo.toJSON(message.hist) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseQueryHistoricalInfoResponse);\n        if (object.hist !== undefined && object.hist !== null) {\n            message.hist = staking_1.HistoricalInfo.fromPartial(object.hist);\n        }\n        else {\n            message.hist = undefined;\n        }\n        return message;\n    },\n};\nconst baseQueryPoolRequest = {};\nexports.QueryPoolRequest = {\n    encode(_, writer = minimal_1.default.Writer.create()) {\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseQueryPoolRequest);\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(_) {\n        const message = Object.assign({}, baseQueryPoolRequest);\n        return message;\n    },\n    toJSON(_) {\n        const obj = {};\n        return obj;\n    },\n    fromPartial(_) {\n        const message = Object.assign({}, baseQueryPoolRequest);\n        return message;\n    },\n};\nconst baseQueryPoolResponse = {};\nexports.QueryPoolResponse = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.pool !== undefined) {\n            staking_1.Pool.encode(message.pool, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseQueryPoolResponse);\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.pool = staking_1.Pool.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseQueryPoolResponse);\n        if (object.pool !== undefined && object.pool !== null) {\n            message.pool = staking_1.Pool.fromJSON(object.pool);\n        }\n        else {\n            message.pool = undefined;\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.pool !== undefined && (obj.pool = message.pool ? staking_1.Pool.toJSON(message.pool) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseQueryPoolResponse);\n        if (object.pool !== undefined && object.pool !== null) {\n            message.pool = staking_1.Pool.fromPartial(object.pool);\n        }\n        else {\n            message.pool = undefined;\n        }\n        return message;\n    },\n};\nconst baseQueryParamsRequest = {};\nexports.QueryParamsRequest = {\n    encode(_, writer = minimal_1.default.Writer.create()) {\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseQueryParamsRequest);\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(_) {\n        const message = Object.assign({}, baseQueryParamsRequest);\n        return message;\n    },\n    toJSON(_) {\n        const obj = {};\n        return obj;\n    },\n    fromPartial(_) {\n        const message = Object.assign({}, baseQueryParamsRequest);\n        return message;\n    },\n};\nconst baseQueryParamsResponse = {};\nexports.QueryParamsResponse = {\n    encode(message, writer = minimal_1.default.Writer.create()) {\n        if (message.params !== undefined) {\n            staking_1.Params.encode(message.params, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = Object.assign({}, baseQueryParamsResponse);\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.params = staking_1.Params.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = Object.assign({}, baseQueryParamsResponse);\n        if (object.params !== undefined && object.params !== null) {\n            message.params = staking_1.Params.fromJSON(object.params);\n        }\n        else {\n            message.params = undefined;\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.params !== undefined && (obj.params = message.params ? staking_1.Params.toJSON(message.params) : undefined);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = Object.assign({}, baseQueryParamsResponse);\n        if (object.params !== undefined && object.params !== null) {\n            message.params = staking_1.Params.fromPartial(object.params);\n        }\n        else {\n            message.params = undefined;\n        }\n        return message;\n    },\n};\nclass QueryClientImpl {\n    constructor(rpc) {\n        this.rpc = rpc;\n    }\n    Validators(request) {\n        const data = exports.QueryValidatorsRequest.encode(request).finish();\n        const promise = this.rpc.request(\"cosmos.staking.v1beta1.Query\", \"Validators\", data);\n        return promise.then((data) => exports.QueryValidatorsResponse.decode(new minimal_1.default.Reader(data)));\n    }\n    Validator(request) {\n        const data = exports.QueryValidatorRequest.encode(request).finish();\n        const promise = this.rpc.request(\"cosmos.staking.v1beta1.Query\", \"Validator\", data);\n        return promise.then((data) => exports.QueryValidatorResponse.decode(new minimal_1.default.Reader(data)));\n    }\n    ValidatorDelegations(request) {\n        const data = exports.QueryValidatorDelegationsRequest.encode(request).finish();\n        const promise = this.rpc.request(\"cosmos.staking.v1beta1.Query\", \"ValidatorDelegations\", data);\n        return promise.then((data) => exports.QueryValidatorDelegationsResponse.decode(new minimal_1.default.Reader(data)));\n    }\n    ValidatorUnbondingDelegations(request) {\n        const data = exports.QueryValidatorUnbondingDelegationsRequest.encode(request).finish();\n        const promise = this.rpc.request(\"cosmos.staking.v1beta1.Query\", \"ValidatorUnbondingDelegations\", data);\n        return promise.then((data) => exports.QueryValidatorUnbondingDelegationsResponse.decode(new minimal_1.default.Reader(data)));\n    }\n    Delegation(request) {\n        const data = exports.QueryDelegationRequest.encode(request).finish();\n        const promise = this.rpc.request(\"cosmos.staking.v1beta1.Query\", \"Delegation\", data);\n        return promise.then((data) => exports.QueryDelegationResponse.decode(new minimal_1.default.Reader(data)));\n    }\n    UnbondingDelegation(request) {\n        const data = exports.QueryUnbondingDelegationRequest.encode(request).finish();\n        const promise = this.rpc.request(\"cosmos.staking.v1beta1.Query\", \"UnbondingDelegation\", data);\n        return promise.then((data) => exports.QueryUnbondingDelegationResponse.decode(new minimal_1.default.Reader(data)));\n    }\n    DelegatorDelegations(request) {\n        const data = exports.QueryDelegatorDelegationsRequest.encode(request).finish();\n        const promise = this.rpc.request(\"cosmos.staking.v1beta1.Query\", \"DelegatorDelegations\", data);\n        return promise.then((data) => exports.QueryDelegatorDelegationsResponse.decode(new minimal_1.default.Reader(data)));\n    }\n    DelegatorUnbondingDelegations(request) {\n        const data = exports.QueryDelegatorUnbondingDelegationsRequest.encode(request).finish();\n        const promise = this.rpc.request(\"cosmos.staking.v1beta1.Query\", \"DelegatorUnbondingDelegations\", data);\n        return promise.then((data) => exports.QueryDelegatorUnbondingDelegationsResponse.decode(new minimal_1.default.Reader(data)));\n    }\n    Redelegations(request) {\n        const data = exports.QueryRedelegationsRequest.encode(request).finish();\n        const promise = this.rpc.request(\"cosmos.staking.v1beta1.Query\", \"Redelegations\", data);\n        return promise.then((data) => exports.QueryRedelegationsResponse.decode(new minimal_1.default.Reader(data)));\n    }\n    DelegatorValidators(request) {\n        const data = exports.QueryDelegatorValidatorsRequest.encode(request).finish();\n        const promise = this.rpc.request(\"cosmos.staking.v1beta1.Query\", \"DelegatorValidators\", data);\n        return promise.then((data) => exports.QueryDelegatorValidatorsResponse.decode(new minimal_1.default.Reader(data)));\n    }\n    DelegatorValidator(request) {\n        const data = exports.QueryDelegatorValidatorRequest.encode(request).finish();\n        const promise = this.rpc.request(\"cosmos.staking.v1beta1.Query\", \"DelegatorValidator\", data);\n        return promise.then((data) => exports.QueryDelegatorValidatorResponse.decode(new minimal_1.default.Reader(data)));\n    }\n    HistoricalInfo(request) {\n        const data = exports.QueryHistoricalInfoRequest.encode(request).finish();\n        const promise = this.rpc.request(\"cosmos.staking.v1beta1.Query\", \"HistoricalInfo\", data);\n        return promise.then((data) => exports.QueryHistoricalInfoResponse.decode(new minimal_1.default.Reader(data)));\n    }\n    Pool(request) {\n        const data = exports.QueryPoolRequest.encode(request).finish();\n        const promise = this.rpc.request(\"cosmos.staking.v1beta1.Query\", \"Pool\", data);\n        return promise.then((data) => exports.QueryPoolResponse.decode(new minimal_1.default.Reader(data)));\n    }\n    Params(request) {\n        const data = exports.QueryParamsRequest.encode(request).finish();\n        const promise = this.rpc.request(\"cosmos.staking.v1beta1.Query\", \"Params\", data);\n        return promise.then((data) => exports.QueryParamsResponse.decode(new minimal_1.default.Reader(data)));\n    }\n}\nexports.QueryClientImpl = QueryClientImpl;\nif (minimal_1.default.util.Long !== long_1.default) {\n    minimal_1.default.util.Long = long_1.default;\n    minimal_1.default.configure();\n}\n//# sourceMappingURL=query.js.map"]},"metadata":{},"sourceType":"script"}