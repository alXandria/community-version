{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setupDistributionExtension = void 0;\n/* eslint-disable @typescript-eslint/naming-convention */\n\nconst long_1 = __importDefault(require(\"long\"));\n\nconst query_1 = require(\"../codec/cosmos/distribution/v1beta1/query\");\n\nconst utils_1 = require(\"./utils\");\n\nfunction setupDistributionExtension(base) {\n  const rpc = utils_1.createProtobufRpcClient(base); // Use this service to get easy typed access to query methods\n  // This cannot be used for proof verification\n\n  const queryService = new query_1.QueryClientImpl(rpc);\n  return {\n    distribution: {\n      communityPool: async () => {\n        const response = await queryService.CommunityPool({});\n        return response;\n      },\n      delegationRewards: async (delegatorAddress, validatorAddress) => {\n        const response = await queryService.DelegationRewards({\n          delegatorAddress: delegatorAddress,\n          validatorAddress: validatorAddress\n        });\n        return response;\n      },\n      delegationTotalRewards: async delegatorAddress => {\n        const response = await queryService.DelegationTotalRewards({\n          delegatorAddress: delegatorAddress\n        });\n        return response;\n      },\n      delegatorValidators: async delegatorAddress => {\n        const response = await queryService.DelegatorValidators({\n          delegatorAddress: delegatorAddress\n        });\n        return response;\n      },\n      delegatorWithdrawAddress: async delegatorAddress => {\n        const response = await queryService.DelegatorWithdrawAddress({\n          delegatorAddress: delegatorAddress\n        });\n        return response;\n      },\n      params: async () => {\n        const response = await queryService.Params({});\n        return response;\n      },\n      validatorCommission: async validatorAddress => {\n        const response = await queryService.ValidatorCommission({\n          validatorAddress: validatorAddress\n        });\n        return response;\n      },\n      validatorOutstandingRewards: async validatorAddress => {\n        const response = await queryService.ValidatorOutstandingRewards({\n          validatorAddress: validatorAddress\n        });\n        return response;\n      },\n      validatorSlashes: async (validatorAddress, startingHeight, endingHeight, paginationKey) => {\n        const response = await queryService.ValidatorSlashes({\n          validatorAddress: validatorAddress,\n          startingHeight: long_1.default.fromNumber(startingHeight, true),\n          endingHeight: long_1.default.fromNumber(endingHeight, true),\n          pagination: utils_1.createPagination(paginationKey)\n        });\n        return response;\n      }\n    }\n  };\n}\n\nexports.setupDistributionExtension = setupDistributionExtension;","map":{"version":3,"sources":["../../src/queries/distribution.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA;;AACA,MAAA,MAAA,GAAA,eAAA,CAAA,OAAA,CAAA,MAAA,CAAA,CAAA;;AAEA,MAAA,OAAA,GAAA,OAAA,CAAA,4CAAA,CAAA;;AAaA,MAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AA0BA,SAAgB,0BAAhB,CAA2C,IAA3C,EAA4D;AAC1D,QAAM,GAAG,GAAG,OAAA,CAAA,uBAAA,CAAwB,IAAxB,CAAZ,CAD0D,CAE1D;AACA;;AACA,QAAM,YAAY,GAAG,IAAI,OAAA,CAAA,eAAJ,CAAoB,GAApB,CAArB;AAEA,SAAO;AACL,IAAA,YAAY,EAAE;AACZ,MAAA,aAAa,EAAE,YAAW;AACxB,cAAM,QAAQ,GAAG,MAAM,YAAY,CAAC,aAAb,CAA2B,EAA3B,CAAvB;AACA,eAAO,QAAP;AACD,OAJW;AAKZ,MAAA,iBAAiB,EAAE,OAAO,gBAAP,EAAiC,gBAAjC,KAA6D;AAC9E,cAAM,QAAQ,GAAG,MAAM,YAAY,CAAC,iBAAb,CAA+B;AACpD,UAAA,gBAAgB,EAAE,gBADkC;AAEpD,UAAA,gBAAgB,EAAE;AAFkC,SAA/B,CAAvB;AAIA,eAAO,QAAP;AACD,OAXW;AAYZ,MAAA,sBAAsB,EAAE,MAAO,gBAAP,IAAmC;AACzD,cAAM,QAAQ,GAAG,MAAM,YAAY,CAAC,sBAAb,CAAoC;AACzD,UAAA,gBAAgB,EAAE;AADuC,SAApC,CAAvB;AAGA,eAAO,QAAP;AACD,OAjBW;AAkBZ,MAAA,mBAAmB,EAAE,MAAO,gBAAP,IAAmC;AACtD,cAAM,QAAQ,GAAG,MAAM,YAAY,CAAC,mBAAb,CAAiC;AACtD,UAAA,gBAAgB,EAAE;AADoC,SAAjC,CAAvB;AAGA,eAAO,QAAP;AACD,OAvBW;AAwBZ,MAAA,wBAAwB,EAAE,MAAO,gBAAP,IAAmC;AAC3D,cAAM,QAAQ,GAAG,MAAM,YAAY,CAAC,wBAAb,CAAsC;AAC3D,UAAA,gBAAgB,EAAE;AADyC,SAAtC,CAAvB;AAGA,eAAO,QAAP;AACD,OA7BW;AA8BZ,MAAA,MAAM,EAAE,YAAW;AACjB,cAAM,QAAQ,GAAG,MAAM,YAAY,CAAC,MAAb,CAAoB,EAApB,CAAvB;AACA,eAAO,QAAP;AACD,OAjCW;AAkCZ,MAAA,mBAAmB,EAAE,MAAO,gBAAP,IAAmC;AACtD,cAAM,QAAQ,GAAG,MAAM,YAAY,CAAC,mBAAb,CAAiC;AACtD,UAAA,gBAAgB,EAAE;AADoC,SAAjC,CAAvB;AAGA,eAAO,QAAP;AACD,OAvCW;AAwCZ,MAAA,2BAA2B,EAAE,MAAO,gBAAP,IAAmC;AAC9D,cAAM,QAAQ,GAAG,MAAM,YAAY,CAAC,2BAAb,CAAyC;AAC9D,UAAA,gBAAgB,EAAE;AAD4C,SAAzC,CAAvB;AAGA,eAAO,QAAP;AACD,OA7CW;AA8CZ,MAAA,gBAAgB,EAAE,OAChB,gBADgB,EAEhB,cAFgB,EAGhB,YAHgB,EAIhB,aAJgB,KAKd;AACF,cAAM,QAAQ,GAAG,MAAM,YAAY,CAAC,gBAAb,CAA8B;AACnD,UAAA,gBAAgB,EAAE,gBADiC;AAEnD,UAAA,cAAc,EAAE,MAAA,CAAA,OAAA,CAAK,UAAL,CAAgB,cAAhB,EAAgC,IAAhC,CAFmC;AAGnD,UAAA,YAAY,EAAE,MAAA,CAAA,OAAA,CAAK,UAAL,CAAgB,YAAhB,EAA8B,IAA9B,CAHqC;AAInD,UAAA,UAAU,EAAE,OAAA,CAAA,gBAAA,CAAiB,aAAjB;AAJuC,SAA9B,CAAvB;AAMA,eAAO,QAAP;AACD;AA3DW;AADT,GAAP;AA+DD;;AArED,OAAA,CAAA,0BAAA,GAAA,0BAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.setupDistributionExtension = void 0;\n/* eslint-disable @typescript-eslint/naming-convention */\nconst long_1 = __importDefault(require(\"long\"));\nconst query_1 = require(\"../codec/cosmos/distribution/v1beta1/query\");\nconst utils_1 = require(\"./utils\");\nfunction setupDistributionExtension(base) {\n    const rpc = utils_1.createProtobufRpcClient(base);\n    // Use this service to get easy typed access to query methods\n    // This cannot be used for proof verification\n    const queryService = new query_1.QueryClientImpl(rpc);\n    return {\n        distribution: {\n            communityPool: async () => {\n                const response = await queryService.CommunityPool({});\n                return response;\n            },\n            delegationRewards: async (delegatorAddress, validatorAddress) => {\n                const response = await queryService.DelegationRewards({\n                    delegatorAddress: delegatorAddress,\n                    validatorAddress: validatorAddress,\n                });\n                return response;\n            },\n            delegationTotalRewards: async (delegatorAddress) => {\n                const response = await queryService.DelegationTotalRewards({\n                    delegatorAddress: delegatorAddress,\n                });\n                return response;\n            },\n            delegatorValidators: async (delegatorAddress) => {\n                const response = await queryService.DelegatorValidators({\n                    delegatorAddress: delegatorAddress,\n                });\n                return response;\n            },\n            delegatorWithdrawAddress: async (delegatorAddress) => {\n                const response = await queryService.DelegatorWithdrawAddress({\n                    delegatorAddress: delegatorAddress,\n                });\n                return response;\n            },\n            params: async () => {\n                const response = await queryService.Params({});\n                return response;\n            },\n            validatorCommission: async (validatorAddress) => {\n                const response = await queryService.ValidatorCommission({\n                    validatorAddress: validatorAddress,\n                });\n                return response;\n            },\n            validatorOutstandingRewards: async (validatorAddress) => {\n                const response = await queryService.ValidatorOutstandingRewards({\n                    validatorAddress: validatorAddress,\n                });\n                return response;\n            },\n            validatorSlashes: async (validatorAddress, startingHeight, endingHeight, paginationKey) => {\n                const response = await queryService.ValidatorSlashes({\n                    validatorAddress: validatorAddress,\n                    startingHeight: long_1.default.fromNumber(startingHeight, true),\n                    endingHeight: long_1.default.fromNumber(endingHeight, true),\n                    pagination: utils_1.createPagination(paginationKey),\n                });\n                return response;\n            },\n        },\n    };\n}\nexports.setupDistributionExtension = setupDistributionExtension;\n//# sourceMappingURL=distribution.js.map"]},"metadata":{},"sourceType":"script"}