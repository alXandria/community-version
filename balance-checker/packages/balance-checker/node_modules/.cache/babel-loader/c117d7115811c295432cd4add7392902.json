{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Secp256k1Wallet = void 0;\n\nconst crypto_1 = require(\"@cosmjs/crypto\");\n\nconst encoding_1 = require(\"@cosmjs/encoding\");\n\nconst addresses_1 = require(\"./addresses\");\n\nconst signature_1 = require(\"./signature\");\n\nconst signdoc_1 = require(\"./signdoc\");\n/**\n * A wallet that holds a single secp256k1 keypair.\n *\n * If you want to work with BIP39 mnemonics and multiple accounts, use Secp256k1HdWallet.\n */\n\n\nclass Secp256k1Wallet {\n  constructor(privkey, pubkey, prefix) {\n    this.privkey = privkey;\n    this.pubkey = pubkey;\n    this.prefix = prefix;\n  }\n  /**\n   * Creates a Secp256k1Wallet from the given private key\n   *\n   * @param privkey The private key.\n   * @param prefix The bech32 address prefix (human readable part). Defaults to \"cosmos\".\n   */\n\n\n  static async fromKey(privkey, prefix = \"cosmos\") {\n    const uncompressed = (await crypto_1.Secp256k1.makeKeypair(privkey)).pubkey;\n    return new Secp256k1Wallet(privkey, crypto_1.Secp256k1.compressPubkey(uncompressed), prefix);\n  }\n\n  get address() {\n    return encoding_1.Bech32.encode(this.prefix, addresses_1.rawSecp256k1PubkeyToRawAddress(this.pubkey));\n  }\n\n  async getAccounts() {\n    return [{\n      algo: \"secp256k1\",\n      address: this.address,\n      pubkey: this.pubkey\n    }];\n  }\n\n  async signAmino(signerAddress, signDoc) {\n    if (signerAddress !== this.address) {\n      throw new Error(`Address ${signerAddress} not found in wallet`);\n    }\n\n    const message = new crypto_1.Sha256(signdoc_1.serializeSignDoc(signDoc)).digest();\n    const signature = await crypto_1.Secp256k1.createSignature(message, this.privkey);\n    const signatureBytes = new Uint8Array([...signature.r(32), ...signature.s(32)]);\n    return {\n      signed: signDoc,\n      signature: signature_1.encodeSecp256k1Signature(this.pubkey, signatureBytes)\n    };\n  }\n\n}\n\nexports.Secp256k1Wallet = Secp256k1Wallet;","map":{"version":3,"sources":["../src/secp256k1wallet.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,QAAA,GAAA,OAAA,CAAA,gBAAA,CAAA;;AACA,MAAA,UAAA,GAAA,OAAA,CAAA,kBAAA,CAAA;;AAEA,MAAA,WAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AACA,MAAA,WAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AACA,MAAA,SAAA,GAAA,OAAA,CAAA,WAAA,CAAA;AAGA;;;;;;;AAKA,MAAa,eAAb,CAA4B;AAgB1B,EAAA,WAAA,CAAoB,OAApB,EAAyC,MAAzC,EAA6D,MAA7D,EAA2E;AACzE,SAAK,OAAL,GAAe,OAAf;AACA,SAAK,MAAL,GAAc,MAAd;AACA,SAAK,MAAL,GAAc,MAAd;AACD;AAnBD;;;;;;;;AAMO,eAAa,OAAb,CAAqB,OAArB,EAA0C,MAAM,GAAG,QAAnD,EAA2D;AAChE,UAAM,YAAY,GAAG,CAAC,MAAM,QAAA,CAAA,SAAA,CAAU,WAAV,CAAsB,OAAtB,CAAP,EAAuC,MAA5D;AACA,WAAO,IAAI,eAAJ,CAAoB,OAApB,EAA6B,QAAA,CAAA,SAAA,CAAU,cAAV,CAAyB,YAAzB,CAA7B,EAAqE,MAArE,CAAP;AACD;;AAYD,MAAY,OAAZ,GAAmB;AACjB,WAAO,UAAA,CAAA,MAAA,CAAO,MAAP,CAAc,KAAK,MAAnB,EAA2B,WAAA,CAAA,8BAAA,CAA+B,KAAK,MAApC,CAA3B,CAAP;AACD;;AAEM,QAAM,WAAN,GAAiB;AACtB,WAAO,CACL;AACE,MAAA,IAAI,EAAE,WADR;AAEE,MAAA,OAAO,EAAE,KAAK,OAFhB;AAGE,MAAA,MAAM,EAAE,KAAK;AAHf,KADK,CAAP;AAOD;;AAEM,QAAM,SAAN,CAAgB,aAAhB,EAAuC,OAAvC,EAA0D;AAC/D,QAAI,aAAa,KAAK,KAAK,OAA3B,EAAoC;AAClC,YAAM,IAAI,KAAJ,CAAU,WAAW,aAAa,sBAAlC,CAAN;AACD;;AACD,UAAM,OAAO,GAAG,IAAI,QAAA,CAAA,MAAJ,CAAW,SAAA,CAAA,gBAAA,CAAiB,OAAjB,CAAX,EAAsC,MAAtC,EAAhB;AACA,UAAM,SAAS,GAAG,MAAM,QAAA,CAAA,SAAA,CAAU,eAAV,CAA0B,OAA1B,EAAmC,KAAK,OAAxC,CAAxB;AACA,UAAM,cAAc,GAAG,IAAI,UAAJ,CAAe,CAAC,GAAG,SAAS,CAAC,CAAV,CAAY,EAAZ,CAAJ,EAAqB,GAAG,SAAS,CAAC,CAAV,CAAY,EAAZ,CAAxB,CAAf,CAAvB;AACA,WAAO;AACL,MAAA,MAAM,EAAE,OADH;AAEL,MAAA,SAAS,EAAE,WAAA,CAAA,wBAAA,CAAyB,KAAK,MAA9B,EAAsC,cAAtC;AAFN,KAAP;AAID;;AA/CyB;;AAA5B,OAAA,CAAA,eAAA,GAAA,eAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Secp256k1Wallet = void 0;\nconst crypto_1 = require(\"@cosmjs/crypto\");\nconst encoding_1 = require(\"@cosmjs/encoding\");\nconst addresses_1 = require(\"./addresses\");\nconst signature_1 = require(\"./signature\");\nconst signdoc_1 = require(\"./signdoc\");\n/**\n * A wallet that holds a single secp256k1 keypair.\n *\n * If you want to work with BIP39 mnemonics and multiple accounts, use Secp256k1HdWallet.\n */\nclass Secp256k1Wallet {\n    constructor(privkey, pubkey, prefix) {\n        this.privkey = privkey;\n        this.pubkey = pubkey;\n        this.prefix = prefix;\n    }\n    /**\n     * Creates a Secp256k1Wallet from the given private key\n     *\n     * @param privkey The private key.\n     * @param prefix The bech32 address prefix (human readable part). Defaults to \"cosmos\".\n     */\n    static async fromKey(privkey, prefix = \"cosmos\") {\n        const uncompressed = (await crypto_1.Secp256k1.makeKeypair(privkey)).pubkey;\n        return new Secp256k1Wallet(privkey, crypto_1.Secp256k1.compressPubkey(uncompressed), prefix);\n    }\n    get address() {\n        return encoding_1.Bech32.encode(this.prefix, addresses_1.rawSecp256k1PubkeyToRawAddress(this.pubkey));\n    }\n    async getAccounts() {\n        return [\n            {\n                algo: \"secp256k1\",\n                address: this.address,\n                pubkey: this.pubkey,\n            },\n        ];\n    }\n    async signAmino(signerAddress, signDoc) {\n        if (signerAddress !== this.address) {\n            throw new Error(`Address ${signerAddress} not found in wallet`);\n        }\n        const message = new crypto_1.Sha256(signdoc_1.serializeSignDoc(signDoc)).digest();\n        const signature = await crypto_1.Secp256k1.createSignature(message, this.privkey);\n        const signatureBytes = new Uint8Array([...signature.r(32), ...signature.s(32)]);\n        return {\n            signed: signDoc,\n            signature: signature_1.encodeSecp256k1Signature(this.pubkey, signatureBytes),\n        };\n    }\n}\nexports.Secp256k1Wallet = Secp256k1Wallet;\n//# sourceMappingURL=secp256k1wallet.js.map"]},"metadata":{},"sourceType":"script"}